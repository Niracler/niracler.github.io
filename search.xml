<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos7 下使用 yum 安装 docker</title>
    <url>/2019/05/11/Centos7-%E4%B8%8B%E4%BD%BF%E7%94%A8-yum-%E5%AE%89%E8%A3%85-docker/</url>
    <content><![CDATA[<blockquote>
<p>本文是关于 docker-ce 的安装</p>
</blockquote>
<h3 id="使用-root-权限"><a href="#使用-root-权限" class="headerlink" title="使用 root 权限"></a>使用 root 权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su -</span><br></pre></td></tr></table></figure>

<h3 id="移除旧的版本"><a href="#移除旧的版本" class="headerlink" title="移除旧的版本"></a>移除旧的版本</h3><span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$yum</span> remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="安装一些必要的系统工具"><a href="#安装一些必要的系统工具" class="headerlink" title="安装一些必要的系统工具"></a>安装一些必要的系统工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$yum</span> install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<h3 id="添加软件源信息"><a href="#添加软件源信息" class="headerlink" title="添加软件源信息"></a>添加软件源信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$yum</span>-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h3 id="更新-yum-缓存"><a href="#更新-yum-缓存" class="headerlink" title="更新 yum 缓存"></a>更新 yum 缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$yum</span> makecache fast</span><br></pre></td></tr></table></figure>

<h3 id="安装-Docker-ce"><a href="#安装-Docker-ce" class="headerlink" title="安装 Docker-ce"></a>安装 Docker-ce</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$yum</span> -y install docker-ce</span><br></pre></td></tr></table></figure>

<h3 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$systemctl</span> start docker</span><br></pre></td></tr></table></figure>

<h3 id="验证-Docker-是否安装成功"><a href="#验证-Docker-是否安装成功" class="headerlink" title="验证 Docker 是否安装成功"></a>验证 Docker 是否安装成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> run hello-world</span><br></pre></td></tr></table></figure>

<h3 id="设置-Docker-开机启动"><a href="#设置-Docker-开机启动" class="headerlink" title="设置 Docker 开机启动"></a>设置 Docker 开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$systemctl</span> <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>docker</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>English</title>
    <url>/2019/06/23/English/</url>
    <content><![CDATA[<h2 id="U1"><a href="#U1" class="headerlink" title="U1"></a>U1</h2><h3 id="U1L1"><a href="#U1L1" class="headerlink" title="U1L1"></a>U1L1</h3><p>My expenses are really high at the moment because I stopped living with my parents. Now I have to pay rent for my apartment, buy food, and pay for everything myself. I have to make a budget every month so I can pay for everything. I decided to open a savings account at the bank to help me organize my finances. Last month, I borrowed some money to buy a car. The money was lent to me by the bank. That money has helped me, but now I have debt.</p>
<span id="more"></span>

<h3 id="U1L2"><a href="#U1L2" class="headerlink" title="U1L2"></a>U1L2</h3><p>Beth: I love eating in restaurants, but it’s so  expensive now!<br>Rick: Yeah, I know. That’s why I stopped going out for dinner.  I meet my friends on Saturday at noon because lunch is a bargain at lots of places.<br>Beth: That’s a good idea.<br>Rick: We like to eat in small, neighborhood restaurants. They’re not so expensive.<br>Beth: And they usually have better food.<br>Rick: I think so, too. And one more thing — I avoid having dessert. That’s another good way to save money.<br>Beth: You don’t have dessert? That’s a little too extreme for me. </p>
<h3 id="U1L5"><a href="#U1L5" class="headerlink" title="U1L5"></a>U1L5</h3><p>A man in Paris needs money from his bank in Washington. He goes to an ATM. In seconds, he receives 100 euros from his savings account. How does this work?The card is inserted into the machine, and the PIN is entered. The Information is sent to the bank’s computer. The computer sees that it’s a foreign ATM card, so an electronic message is transmitted to the banking center in Belgium, and then to the center in Detroit, and finally to the bank in Washington. The account is checked. If there is enough money in it, a message is returned to the ATM in Paris and the cash is delivered.<br>ATM was invented in the 1970s. At first, they weren’t used very much. Now they are found all around the world.</p>
<h3 id="U1L6"><a href="#U1L6" class="headerlink" title="U1L6"></a>U1L6</h3><p>Teller: Next? May I help you?<br>Annie: Yes. I need to withdraw $100.<br>Teller: Please fill out this form and write your account number here.<br>Annie: OK.<br>Teller: Do you want to withdraw the money from your savings account or your checking account?<br>Annie: From my checking account, please.<br>Teller: Here you are, $100. And here’s your receipt. Have a good day.<br>Annie: Thank you. You, too.  </p>
<h2 id="U2"><a href="#U2" class="headerlink" title="U2"></a>U2</h2><h3 id="U2L1"><a href="#U2L1" class="headerlink" title="U2L1"></a>U2L1</h3><p>Isabel：Nathan, do you ever  get worried?<br>Nathan: About what?<br>Isabel：Oh, you know about  things that kill you.<br>Nathan: Sometimes I think about how we would get out of this apartment building if there were a fire.<br>Isabel：Right! Or what you would do if you were  lost in the mountains after a plane crash.<br>Nathan: Well, that doesn’t sound very likely.<br>Isabel：That’s true, and I hope it never happens, but what if it did happen?<br>Nathan: Look, you can’t worry about everything, but you can prepare for some things.<br>Isabel：Which things?<br>Nathan: Things that are more likely to happen, like fires or earthquakes.<br>Isabel：Good idea. Let’s start by making an evacuation plan in case we need to get-out of this building.  </p>
<h3 id="U2L2"><a href="#U2L2" class="headerlink" title="U2L2"></a>U2L2</h3><p>Radio Host: The topic is survival. We’re taking your calls at 555-4962, so pick up the phone and tell us your survival story. Hello, caller number one, are you there?<br>Caller #1: Hi, yes, I’m here. And I feel lucky to be here, too. Last month I survived an attack in a parking lot. I had gone shopping, and I was returning to my car.<br>Radio Host: That sounds scary. What happened?<br>Caller #1: It was getting dark, and I didn’t see anyone around, but just as I was unlocking my car door, a young man and woman grabbed my purse. They tried to take my car keys, too, but that’s when I decided to fight back.<br>Radio Host: Do you think that was a good idea?<br>Caller #1: Well, I had taken a self-defense course, and I decided the right thing to do was to make a lot of noise. I started yelling as loud as I could. The attackers got scared and ran away.<br>Radio Host: Wow. It does sound like you got lucky. Of course, not every kind of self-defense works in every situation, but the important thing is that you survived. Thanks for calling.<br>Caller #1: Thank you.  </p>
<h3 id="U2L5"><a href="#U2L5" class="headerlink" title="U2L5"></a>U2L5</h3><p>Andrew: Do you ever wish you were an animal?<br>Caleb: Sure. Sometimes I wish I were a bird so I could fly.<br>Andrew: I wish I were a meerkat.<br>Caleb: A meerkat? What’s that?<br>Andrew: It’s an African animal. It survives by living in groups and cooperating.<br>Caleb: How do they cooperate?<br>Andrew: When there’s a predator nearby, they make a warning sound. Then all the meerkats go into their holes.<br>Caleb: That sounds helpful. What else do they do?<br>Andrew: They babysit for each other. That way, the parents have a chance to find food.<br>Caleb: I see what you mean. They’re a very social animal.<br>Andrew: Right, and if I were a meerkat, I wouldn’t have to carry these boxes by myself. I could get  some help from you!<br>Caleb: Oh, sorry. Can I give you a hand with those?  </p>
<h3 id="U2L6"><a href="#U2L6" class="headerlink" title="U2L6"></a>U2L6</h3><p>Southern Utah in the United States is a land of extremes. The normally dry desert is occasionally drowned in summer rainstorms. The high altitude of Utah’s mountains makes the days very hot and the nights very cold. It is also a beautiful place with a long history of human habitation. Utah is named after the Ute tribe of Native Americans, and before the Ute, the Anasazi people made their home there.<br>Perhaps it’s no surprise that modern outdoor adventurers come to southern Utah to go hiking, camping, and horseback riding in the area’s national forests, or to see the fantastic rock formations in Bryce  Canyon National Park. What might surprise you is that some of the adventurers choose to spend their time outdoors with little food or water and no modern camping equipment. Instead, they’re learning to live in the wilderness the old-fashioned way.<br>The Boulder Outdoor Survival School (BOSS), founded in 1968, is the world’s oldest survival school. With its philosophy of “Know more; carry less,” BOSS teaches its students techniques for surviving outdoors without tents, backpacks, or sleeping bags. Participants learn  to make shelters from leaves or snow, to find and purify water for drinking, and to eat what they can find in the wild. The students and instructors end their day around a crackling campfire, but the fire is made using stones and brush from the area, not matches.</p>
<h3 id="U2L7"><a href="#U2L7" class="headerlink" title="U2L7"></a>U2L7</h3><p>Every day, newspapers are filled with articles about natural disasters like floods, earthquakes, and hurricanes. These emergencies can occur in every country in the world, so it’s important to be ready for them. There are three important things you should do at home to prepare.<br>First, stock up on emergency supplies. You should keep enough food and water for at least three days in your house. Choose food that can be stored for a long time and food that can be eaten without cooking. Canned foods such as soup, fish, meat, and fruit are good choices. You can also store dry foods like crackers and cookies. Be sure to store food that you like and include a few special treats like candy or nuts. In an emergency situation, it’s nice to have something to cheer you up. If you have babies, small children, or elderly people in your family, remember to include any special foods that they need. And be sure to keep plenty of water. Each person needs 1 gallon (4 liters) of water per day for drinking and basic washing.</p>
<h2 id="U3"><a href="#U3" class="headerlink" title="U3"></a>U3</h2><h3 id="U3L1"><a href="#U3L1" class="headerlink" title="U3L1"></a>U3L1</h3><p>I like art that makes you feel good, like a painting that depicts a happy moment or a sculpture that represents love or peace. I don’t like some of the techniques artists use in abstract paintings. When there are only lines and shapes, I don’t understand what it is. I guess I prefer realistic art.</p>
<h3 id="U3L2"><a href="#U3L2" class="headerlink" title="U3L2"></a>U3L2</h3><p>Mia:      Hi, Jennie. What did you do over the weekend?<br>Jennie: Nothing special on Saturday, but on Sunday I went to the student painting show at the art institute.<br>Mia:      You’re kidding! I thought you didn’t like art very much.<br>Jennie: Not usually, but my brother told me about the show. He said the paintings were amazing.<br>Mia:      So, what did you think of them?<br>Jennie: I thought they were great! A lot of them were realistic, with the most wonderful details.<br>Mia:      Did you meet any of the artists?<br>Jennie: Yes, I met one of them. She told me her painting represented energy. It was just three blue circles!<br>Mia:      That sounds pretty abstract.  </p>
<h3 id="U3L3"><a href="#U3L3" class="headerlink" title="U3L3"></a>U3L3</h3><p>Conversation 1<br>Woman: I can’t believe how realistic that painting is! Look, you can see every little detail on the grapes.<br>Man:       Yeah, that’s true. But I think it’s kind of boring.<br>Woman: Really? To me, it’s very peaceful. I could look at that one all day.<br>Man:      That may be, but the artist doesn’t really express any feelings. I mean, how can you get excited about a pile of fruit?  </p>
<p>Conversation 2<br>Man:       I really like that big painting over there. It’s so dramatic, and the artist really says a lot in it.<br>Woman: But all it is just three-colored shapes!<br>Man:       No, not really. Look at it closely. You can see a lot of other colors in there. I think it’s like a window—a window into some strange new place.<br>Woman: Hmm. I think you have a much better imagination than I do!  </p>
<h3 id="U3L4"><a href="#U3L4" class="headerlink" title="U3L4"></a>U3L4</h3><p>Conversation 3<br>Man:      Did you see that painting in the corner? I really want to get a poster of it for our bedroom.  </p>
<p>Woman: Yeah, that is a nice painting… but why do you want a poster?  </p>
<p>Man:       It’s such a happy scene. It reminds me of when I was a little boy playing in my grandfather’s garden.  </p>
<p>Woman: I don’t know if the bedroom is the right place for it, though. The<br>colors are so bright. It’s beautiful, but it isn’t very relaxing.  </p>
<h3 id="U3L6"><a href="#U3L6" class="headerlink" title="U3L6"></a>U3L6</h3><p>Emily: Where did you get that jacket, Carrie? It’s really beautiful!<br>Carrie: Thank you! I bought it in the Fair Trade store. They have crafts from all different countries, and they pay the artists a fair price.<br>Emily: Sounds interesting. What else do they have there?<br>Carrie: Oh, lots of cool things! I also bought some coffee cups from Mexico,<br>and I’ve been using them every day. I really like crafts that are useful.<br>Emily: Do you? For me, the most important thing is the style. I want crafts that<br>            look handmade— not like they came from a machine.<br>Carrie: Well, I’m sure you can find something you like there.<br>Emily: Next time you go, I’d like to go along.  </p>
<h3 id="U3L7"><a href="#U3L7" class="headerlink" title="U3L7"></a>U3L7</h3><p>Saving a City’s Public Art<br>Avoiding L.A.’s traffic jams may be impossible, but the city’s colorful highway murals can brighten even the worst commute. Paintings that depict famous people and historical scenes cover office buildings and highway walls all across the city. With a collection of more than 2,000 murals, Los Angeles is the unofficial mural capital of the world.<br>But a combination of graffiti, pollution, and hot sun has left many L.A. murals in terrible condition. In the past, experts say, little attention was given to caring for public art. Artists were even expected to maintain their own works—not an easy task with cars racing by on the highway! Now the city is beginning a huge project to restore its murals. So far, 16 walls have been selected, and more may be<br>added later.<br>Until about 1960, public murals in Los Angeles were rare. But in the ’60s and ’70s, young L.A. artists began to study early 20th-century Mexican mural painting. Soon, the artists’ own murals became a symbol of the city’s cultural diversity.</p>
<h3 id="U3L8"><a href="#U3L8" class="headerlink" title="U3L8"></a>U3L8</h3><p>A Biography of Great Artist Frida Kahlo<br>Frida Kahlo was born in Mexico in 1907. As a small child, she was very happy and ran and laughed all the time—even in church. When she was six years old, her life changed completely. She got a serious disease called polio and had to remain in bed for nine months. The disease made her left leg shorter than her right, so she had serious problems walking.<br>When Frida was 15, she was enrolled at a prestigious school in Mexico City. There she was influenced by the modern changes that were sweeping across Mexico. She cut her hair short like a boy and started riding a bicycle—shocking for a young woman of her time. She was very interested in science and decided to become a doctor.<br>Then, in September 1925, Frida was involved in a horrendous accident. She was riding on a bus when<br>it crashed into a trolley car. Her right leg was broken in 11 places, and she had many other broken bones.<br>For the rest of her life, she had severe pain every day caused by that accident. She had to give up her<br>plans to become a doctor, because she knew she would never be strong enough. While lying in bed<br>after the accident, Frida began reading books about art. Her father was a painter and photographer, and<br>he encouraged her interest in art. One year later, she completed her first painting: a portrait of herself.</p>
<h2 id="U4"><a href="#U4" class="headerlink" title="U4"></a>U4</h2><h3 id="U4L1"><a href="#U4L1" class="headerlink" title="U4L1"></a>U4L1</h3><p>Many solo flights are around the world have been made since the first one in 1933. However, such a flight has been completed only once by a person born in Jamaica. It happened in 2007, when Barrington Irving was only 23 years old. Since then, Irving has been teaching children about building and piloting airplanes, and he has been named one of National Geographic’s Emerging Explorers. Around the world, many young people have been inspired by people such as Irving who are able to share themselves and their careers and motivate others to do great things.</p>
<h3 id="U4L2"><a href="#U4L2" class="headerlink" title="U4L2"></a>U4L2</h3><p>Cassie: The price of gas is getting so high. I think I’m going to get rid of my car and<br>              take the bus.<br>Jake:     Not me! I’m getting a new car next month. It’s a hybrid.<br>Cassie: You mean, one of those electric cars?<br>Jake:     Not exactly. It uses both electricity and gasoline.<br>Cassie: Well, I don’t like to be the first person to try something new. New technology always    has a lot of problems.<br>Jake:     That’s not always true. Besides, electric cars have been used for a long time.<br>Cassie: Well, I’d like to see your hybrid car when you get it. Will you take me for a ride?<br>Jake:     Sure! And maybe I’ll even let you drive it.  </p>
<h3 id="U4L3"><a href="#U4L3" class="headerlink" title="U4L3"></a>U4L3</h3><p>When cities are building a new subway, they often find pieces of history hidden deep under the ground. And then they have to make some difficult decisions. We’re going to hear what happened in three different cities.<br>I’m here in Mexico City, where the Pino Suarez subway station has one of the most unusual decrations in the world. In the hallway between lines 1 and 2, there is a pyramid that was built by the Aztec Indians. The pyramid was discovered in 1967 during construction of the station. The city government decided to keep the pyramid as a part of the station, although changing the plan of the station was very expensive. Later, the city built a new subway line and uncovered an entire Aztec neighborhood, with thousands of historic objects. Today some of the objects are displayed in the subway stations of Mexico City.</p>
<h3 id="U4L4"><a href="#U4L4" class="headerlink" title="U4L4"></a>U4L4</h3><p>New York has one of the world‘s longest subway systems. In 1997, while construction workers were building a new station called South Ferry, they ran into a big surprise: a huge stone wall buried underground. It was almost 50 feet long, and very old– maybe the oldest stone wall in New York! Construction stopped, and archeologists were called. They found many objects, including pottery, a tobacco pipe, and a coin from 1744. For years, people argued about what to do about the wall. In the end, the city dicided to preserve only a part of the wall, and construction of the station started again. It finally opened in 2008.</p>
<h3 id="U4L5"><a href="#U4L5" class="headerlink" title="U4L5"></a>U4L5</h3><p>The Bus Rapid Transit system of Curitiba, Brazil is famous for its convenience and design. Buses for up to 300 people travel all around the city. Passengers board the buses from comfortable glass tube stations. If they don’t have a pass or a ticket, they pay their fare in the station, so everyone gets on the bus quickly when it arrives. They can transfer to another route without paying again. Where different bus routes connect, there are comfortable terminals with small shops and restrooms. The system is efficient, and it’s very popular with the people of Curitiba.</p>
<h3 id="U4L6"><a href="#U4L6" class="headerlink" title="U4L6"></a>U4L6</h3><p>Luis: Excuse me. Do you speak English?<br>Yuki: Yes, a little.<br>Luis: Could you please tell me how to get to the<br>          Imperial Palace Garden?<br>Yuki: From here, you take the Tozai subway line to<br>          Hibiya Station. Then you walk for about five<br>          minutes.<br>Luis: And can you tell me where I can buy a ticket?<br>Yuki: You get them from that machine. Let’s see…<br>          the fare is 250 yen. You put your money in<br>          here and push this button.<br>Luis: Great! Oh, one more question—do<br>          you know where I board the train?<br>Yuki: Just go down those stairs and you’ll<br>          see a sign that says Tozai Line. It’s<br>          in English.<br>Luis: Thanks for your help!<br>Yuki: You’re welcome.  </p>
<h3 id="U4L7"><a href="#U4L7" class="headerlink" title="U4L7"></a>U4L7</h3><p>Human-powered rickshaws first appeared in Kolkata, India a century ago, and about 6,000 of them still roll through the streets today. Most of the men who pull the rickshaws are poor, aging migrants from the countryside. their vehicles are not being made any more, and as the parts wear out, they cannot be replaced. It appears that the days of the rickshaws are nearing their end in Kolkata.<br>Rickshaws are an important form of transportation in this city of nearly 15 million people. They are cheap and convenient. Poor and middle-class residents rely on rickshaws to move through narrow lanes in areas of the central city that are not served by public transportation. Families often pay a rickshaw puller to take their children to and from school.</p>
<h3 id="U4L8"><a href="#U4L8" class="headerlink" title="U4L8"></a>U4L8</h3><p>For the last ten years, the government has been trying to get rid of rickshaws. City authorities say they want to modernize Kolkata’s image. They also want to reduce traffic congestion. “We must be fair to the cars and buses that are crawling because of the rickshaws,” one city official said.<br>What does the future hold for rickshaw pullers? Most are 40 to 60 years old and have no other job skills. Local authorities have talked about programs to retrain the pullers. They could drive auto-rickshaws, for example, work in parking lots, or make traditional crafts. However, nothing has been done to start these programs, and rickshaw pullers are understandably very worried about the future. “I’ll try anything even learning a new job, if it will help my family,” one puller said.</p>
<h2 id="U5"><a href="#U5" class="headerlink" title="U5"></a>U5</h2><h4 id="U5L1"><a href="#U5L1" class="headerlink" title="U5L1"></a>U5L1</h4><p>Milena:  How about the tennis match last night. Sanders acted crazy.<br>Betty:    Really? What did he do?<br>Milena: Didn’t you see it? He got really angry and broke his tennis racket.<br>Betty:   No, I didn’t, but I’m surprised. Sanders is usually such a good sportsman.<br>Milena: I know, but not last night! Well, I should get going.<br>Betty:   Aren’t you going to join us for dinner?<br>Milena: No, not tonight. The finals start at seven o’clock.<br>Betty:   You’re a true tennis fan. Well, have fun watching!  </p>
<h4 id="U5L2"><a href="#U5L2" class="headerlink" title="U5L2"></a>U5L2</h4><p>Speaker A: Hi, I’m Rita. I don’t have much free time, but I want to have some fun and get some exercise. I’ve played golf before, and I like it. I also have some friends who are on a beach volleyball team. As far as my personality goes, I’m kind of an extrovert. I get a lot of energy from other people. I’m definitely not a perfectionist, but I always do my best when other people are counting on me.</p>
<p>Speaker B: My name is Chris, and I love to run! I enjoy sports like soccer where you do a lot of running. I also like to run by myself. The problem is, if I run solo and I win a race, I can’t share the victory with anyone. There’s nothing more fun than celebrating with a group of people after you win!</p>
<p>Speaker C: I’m Susan. I want to sign up for a sport at my school. I guess I’m an introvert. I enjoy doing things by myself. I’m also fairly tall, so some of my friends think I should sign up for basketball. I’m kind of a perfectionist. I’ll practice something again and again until I get it right. And I’m very focused. When I’m doing something I love, I don’t notice anything else.</p>
<h4 id="U5L3"><a href="#U5L3" class="headerlink" title="U5L3"></a>U5L3</h4><h4 id="U5L4"><a href="#U5L4" class="headerlink" title="U5L4"></a>U5L4</h4><p>Dean:     Hi, Kirsten. Can I talk to you about something?<br>Kirsten: Sure. What is it?<br>Dean:    Some of my friends want me to try out for the wrestling team, but I just don’t have a<br>              competitive personality.<br>Kirsten: Well, some people are more competitive than others.<br>Dean:    Right, and sometimes I am competitive. I think about my classmates who get good grades,<br>              and it motivates me to work harder.<br>Kirsten: There you go.<br>Dean:    On the other hand, I don’t really like people that always want to be the best. Sometimes<br>              other people are the best.<br>Kirsten: And you want to be happy for those other people.<br>Dean:    Exactly! Maybe I could talk to a few guys on the wrestling team and find out if it’s the right<br>              sport for me.  </p>
<h4 id="U5L5"><a href="#U5L5" class="headerlink" title="U5L5"></a>U5L5</h4><h4 id="U5L6"><a href="#U5L6" class="headerlink" title="U5L6"></a>U5L6</h4><h2 id="U6"><a href="#U6" class="headerlink" title="U6"></a>U6</h2><h4 id="U6L1"><a href="#U6L1" class="headerlink" title="U6L1"></a>U6L1</h4><p>The government estimates that more than 12,000 children in this country had accidents at home last year. The risk is highest for children under the age of five. One of the most common household accidents is eating or drinking poison. Many of our common cleaning products contain substances that are toxic, especially to very small children. And every year, many children are injured when they play with scissors, knives, or cigarette lighters.<br>Look at your house through your children’s eyes, and put dangerous items in a place that kids can’t reach. Keep your doctor’s phone number in a place that’s easy to find. Children can survive even serious accidents if they are treated quickly.<br>For simple ideas on how you can prevent accidents and keep your children safe, please visit our Web site.</p>
<h4 id="U6L2"><a href="#U6L2" class="headerlink" title="U6L2"></a>U6L2</h4><p>Ruthie:  You know, I really don’t like driving. It scares me to death.<br>Dan:       Really? Why is that?<br>Ruthie:  well, it’s dangerous, isn’t it? Just think of all the people who are  killed in their cars<br>              every year!<br>Dan:      That’s true, but there’s a lot you can do to stay safe.<br>Ruthie:  Like what?<br>Dan:      For one thing, you should stop texting or talking on your cell  phone when you drive.That causes a lot of accidents.<br>Ruthie:  I suppose you’re right.<br>Dan:       And you should keep enough distance from other cars.<br>Ruthie:  That’s a not a bad idea.  </p>
<h4 id="U6L5"><a href="#U6L5" class="headerlink" title="U6L5"></a>U6L5</h4><ol>
<li>That plant isn’t poisonous, is it? (not sure)</li>
<li>He knows all about it, doesn’t he? (sure)</li>
<li>That bridge doesn’t look safe, does it? (sure)</li>
<li>You were here yesterday, weren’t you? (not sure)</li>
<li>His name is David, isn’t it? (not sure)</li>
<li>This exercise was easy, wasn’t it? (not sure)</li>
</ol>
<h4 id="U6L6"><a href="#U6L6" class="headerlink" title="U6L6"></a>U6L6</h4><p>Both children and adults are often injured in their own home because of accidents that could be prevented. There are always risks in life. Accidents happen at home, driving your car, playing a sport, and in many other situations. It is important to take action as soon as something happens; for example, call an ambulance or the fire department or find the nearest hospital. But it is also important to try to prevent accidents before they happen. For example, whenever you are going on a trip in your car, you should get the car checked before you leave. At home, make sure toxic substances cannot be reached by children. Prevention is the best cure.</p>
<h4 id="U6L7"><a href="#U6L7" class="headerlink" title="U6L7"></a>U6L7</h4><p>Jen: Hello?<br>Lily: Hi, Jen. It’s Lily, your neighbor… Are you OK? I saw the fire truck in front of your house！<br>Jen: Don’t worry, we’re fine. We had a fire in our kitchen, but everything’s OK now.<br>Lily: Oh, no! What happened?<br>Jen: I was cooking dinner, and I went to check on the baby. When I went back, the kitchen was<br>        full of black smoke!<br>Lily: How awful!<br>Jen: As soon as I saw the smoke, I called the fire department. After I called  them, I took the<br>        baby out of the house.<br>Lily: Did it take them long to get there?<br>Jen: Only a few minutes. They put out the fire before it got very far. But my whole  house<br>        smells like smoke now.<br>Lily: I’m so glad you’re OK!  </p>
<h2 id="U7"><a href="#U7" class="headerlink" title="U7"></a>U7</h2><h3 id="U7L1"><a href="#U7L1" class="headerlink" title="U7L1"></a>U7L1</h3><p>Stonehenge is a prehistoric monument in England. Nobody knows exactly how or why it was built, but a lot of people speculate. Some people believe that aliens could have made it; others are certain that it must have been a religious place. There have been a lot of investigations as archaeologists try to figure out how the massive stones were moved and what Stonehenge really was. Human remains have been found at the site, and some archaeologists now think that it may have been a place where sick people came to be healed, but there is not enough evidence for them to be sure.</p>
<h3 id="U7L5"><a href="#U7L5" class="headerlink" title="U7L5"></a>U7L5</h3><p>Joan:     Hi, Tommy. What are you reading?<br>Tommy: It’s a mystery novel—The Clock Strikes,.at Midnight.<br>Joan: Is it any good?<br>Tommy: It’s all right, …<br>Joan:     Then maybe I’ll read it when you’re done.<br>Tommy: Maybe not. I was going to say it’s good, but I don’t think you’d like it.<br>Joan:     Why not? I like mystery novels.<br>Tommy: I know, but in this one, a young child is missing. I know you don’t like to read about<br>               kidnappings, or murder, or…<br>Joan:     You’re right. It doesn’t sound like my kind of book.  </p>
<h3 id="U7L6"><a href="#U7L6" class="headerlink" title="U7L6"></a>U7L6</h3><p>Tour guide: You can see that Stonehenge is very old. In fact, people started building<br>                     Stonehenge nearly 5,000 years ago.<br>Tourist 1: Wow!<br>Tour guide: That’s right. And while no one really knows why Stonehenge was built, there are<br>                     some things we do know. The largest stones you see are these trilithons—two huge<br>                     upright stones with a third stone laid on top. On average, these stones are six meters<br>                     high.<br>Tourist 2: That’s amazing!<br>Tour guide: I agree. What’s even more amazing is that prehistoric people transported these stones<br>                    30 kilometers. And that was without any modern machinery.<br>Tourist 1: Really?!<br>Tour guide: And would you believe that these smaller bluestones came from a site in Wales,<br>                    around 400 kilometers away!<br>Tourist 2: You’re kidding!<br>Tour guide: I’m not! And the builders of Stonehenge must have known a lot about transportation<br>                    because each of these “smaller” stones weighs around 4,000 kilos!<br>Tourist 1: Remarkable!  </p>
<h3 id="U7L7"><a href="#U7L7" class="headerlink" title="U7L7"></a>U7L7</h3><p>Lenora: Hi! I was hoping I would see you! I want to hear all about your trip.<br>Eric:      We had a wonderful time, except for one day.<br>Lenora: What happened?<br>Eric:      We were going to visit Takeda Castle. They call it Japan’s Machu Picchu.<br>Lenora: That sounds interesting.<br>Eric:      Yes, it’s in the mountains, and the view from there is supposed to be amazing.<br>Lenora: Is it very far from Kyoto?<br>Eric:      Only about three hours. We were going to take the train, but that morning,  my wife hurt<br>             her ankle.<br>Lenora: And, of course, you wanted to walk around the ruins.<br>Eric:      Of course, and we wanted to hike from the train station to the castle, too.<br>Lenora: That’s a shame, but now you have a good reason to go back to Japan.  </p>
<h2 id="U8"><a href="#U8" class="headerlink" title="U8"></a>U8</h2><h3 id="U8L1"><a href="#U8L1" class="headerlink" title="U8L1"></a>U8L1</h3><p>Tina: Alex, what are you going to do after high school?<br>Alex: Whoa! I don’t even know what I’m doing after school today!<br>Tina: Very funny. I’m  going to enroll  in a training program.<br>Alex: What kind of training program?<br>Tina:  They teach you to be  a laboratory assistant. It doesn’t take very long, and it starts a<br>          week after graduation.<br>Alex: That sounds all right. And what will you do when you finish the program? Tina: I’ll look for<br>          a job in a scientific laboratory. All of them need lab assistants.<br>Alex: That’s a pretty good idea. Eric is joining the military when he graduates.<br>Tina: So everybody has a plan except you.<br> Alex: True. That’s what I’ll do after school today! I’ll  plan my future.</p>
<h3 id="U8L5"><a href="#U8L5" class="headerlink" title="U8L5"></a>U8L5</h3><p>Speaker A: First, let’s consider the possibility of colonizing Mars. I know you want to hear about the moon, but I’ll talk about in a little while. There have already been several unmanned missions to Mars, and in ten years, a manned mission is scheduled. That manned mission will take three years to complete because of the distance from Earth to Mars! But one day, perhaps we’ll have spaceships that can travel much faster than they can now.<br>Speaker B: Many people talk about the importance of tourism, but have you ever heard of space tourism? It’s not cheap, but a few people have spent millions to visit the International Space Station. And one of these days, you might be able to go to the moon as a “spaceflight participant,” someone who isn’t on the crew, but is just along for the ride. Some day soon, you may also be able to experience private space flight on sophisticated airplanes. These planes give passengers the feeling of weightlessness and a great view of the Earth without such a high price tag. At the moment, not many companies are doing this, but sooner or later, more companies will see the profit potential of private space flight.</p>
<h3 id="U8L6"><a href="#U8L6" class="headerlink" title="U8L6"></a>U8L6</h3><p>Jacob:      What do you think? Will people ever walk on the moon again?<br>Matthew:  I don’t know. They might, but there are still problems with the technology.<br>Jacob:     Do you mean the space shuttle  accidents?<br>Matthew: Of course. It’s risky to send people into space.<br>Jacob:     That’s true, but it’s the only way to experience the  moon firsthand.                           .<br>Matthew: Sure, but unmanned spacecraft can travel much farther than the moon.<br>Jacob:     And there are going to be technical problems with those missions, too.<br>Matthew: OK, any future   space exploration could have technical problems.<br>Jacob:     But a human being could repair equipment and solve problems.<br>Matthew: You’re right. Maybe I’ll get lucky and they’ll send you into space.</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>English</tag>
        <tag>学校内容</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux | 基于Linux的教学资源服务器构建</title>
    <url>/2018/03/08/Linux-%E5%9F%BA%E4%BA%8ELinux%E7%9A%84%E6%95%99%E5%AD%A6%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="先是关于几点注意"><a href="#先是关于几点注意" class="headerlink" title="先是关于几点注意"></a>先是关于几点注意</h3><ul>
<li>本人是在阿里云服务器上搭建的教学资源服务器，若有不适合的地方，请酌情修改，或直接来问我。</li>
<li>我这里的所有命令都是没有sudo的，因为我就是root用户。有需要自己加。</li>
<li><a href="https://www.jianshu.com/p/43b7e6f069f9">zsh 和 fish 安装与使用</a>，工欲善其事,必先利其器</li>
</ul>
<span id="more"></span>

<h3 id="这里开始是ftp搭建过程"><a href="#这里开始是ftp搭建过程" class="headerlink" title="这里开始是ftp搭建过程"></a>这里开始是ftp搭建过程</h3><p><strong>1. Proftpd安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get update    <span class="comment"># 更新包信息</span></span><br><span class="line">$ apt-get upgrade  <span class="comment"># 升级</span></span><br><span class="line">$ apt-get install proftpd <span class="comment"># 安装proftp</span></span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4781155-89214869b66827aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>选择“standalone”<br>查看proftpd状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/proftpd status</span></span><br></pre></td></tr></table></figure>
<p><strong>2. 编辑配置文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/proftpd/proftpd.conf</span></span><br></pre></td></tr></table></figure>

<p><strong><a href="https://www.jianshu.com/p/e1546998c254">文件内容</a></strong></p>
<p><strong>3. 重启服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/proftpd restart</span></span><br></pre></td></tr></table></figure>

<p><strong>4. Ubuntu系统配置nologin</strong></p>
<p>这步是为了防止ftp用户用终端登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/shells</span></span><br></pre></td></tr></table></figure>

<p>最后一行增加&#x2F;usr&#x2F;sbin&#x2F;nologin</p>
<p><strong>5. 创建用户组</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> groupadd student</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> groupadd teacher</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 创建账号</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建用户</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> useradd -m fuckhu -g teacher -s /usr/sbin/nologin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> useradd fuckhus -g student -s /usr/sbin/nologin -d /home/fuckhu/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置账户密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">&quot;fuckhu:123&quot;</span> | sudo chpasswd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">&quot;fuckhus:123&quot;</span> | sudo chpasswd</span></span><br></pre></td></tr></table></figure>

<p><strong>7. 创建目录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/fuckhu/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir 学生作业</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir 资源共享</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置文件所属组和所属用户</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown fuckhu 学生作业/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown :teacher 学生作业/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown fuckhu 资源共享/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown :teacher 资源共享/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给学生加个写作业的权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod o+w 学生作业/</span></span><br></pre></td></tr></table></figure>
<p>教师私人账号功能测试</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4781155-261b0b46cf6fd1ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>教师公开账号功能测试</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4781155-7266590cb2c88b49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>大家可以自己<a href="ftp://niracler.com/">试试</a><br><a href="https://bbs.aliyun.com/read/323533.html?page=e">win的用户注意</a></p>
<h3 id="HTTP服务器安装与配置"><a href="#HTTP服务器安装与配置" class="headerlink" title="HTTP服务器安装与配置"></a>HTTP服务器安装与配置</h3><p><strong>1. 软件安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install apache2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install apache2-doc</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 服务器配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /var/www/html/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm index.html  <span class="comment"># 删除原有的index文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln -s /home/fuckhu/资源共享/ fuckfu <span class="comment"># 建立软连接</span></span></span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4781155-a551097a9b53090f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>然后直接浏览器用你们的ip去访问吧。</p>
<h3 id="Samba服务器安装与配置"><a href="#Samba服务器安装与配置" class="headerlink" title="Samba服务器安装与配置"></a>Samba服务器安装与配置</h3><p><strong>1. 软件安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install libtalloc2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install samba</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 系统用户设置 Samba 独立的登录密码:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">&quot;123\n123&quot;</span> | smbpasswd -a -s fuckhu</span></span><br></pre></td></tr></table></figure>
<p>添加samba用户帐号，smbpasswd -a -s fuckhu 是静默方式添加samba帐号，echo -e “123\n123” 是两次输出密码 123，中间输出回车符 \n</p>
<p><strong>抱歉，外网无法测试。</strong></p>
<h3 id="shell管理程序的设计与实现"><a href="#shell管理程序的设计与实现" class="headerlink" title="shell管理程序的设计与实现"></a>shell管理程序的设计与实现</h3><p>让程序员从一些工作中解脱出来，让你<a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">不必重复你自己</a></p>
<p>文件namefile.txt(请不要有多余的换行与空格)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zengjinping</span><br><span class="line">sundawei</span><br><span class="line">lishaoming</span><br><span class="line">liuxixian</span><br><span class="line">jiajihong</span><br><span class="line">fengfuye</span><br><span class="line">yujinchang</span><br><span class="line">gaoyanqun</span><br></pre></td></tr></table></figure>
<p>文件creat.sh<br>参考代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cat namefile.txt |while read name</span><br><span class="line">do useradd -m $name -g teacher -s /usr/sbin/nologin</span><br><span class="line">useradd $&#123;name&#125;s -g student -s /usr/sbin/nologin -d /home/$name/</span><br><span class="line">echo -e &quot;$name:123&quot; | sudo chpasswd</span><br><span class="line">echo -e &quot;$&#123;name&#125;s:123&quot; | sudo chpasswd</span><br><span class="line">cd /home/$name/</span><br><span class="line">mkdir 学生作业</span><br><span class="line">mkdir 资源共享</span><br><span class="line">chown $name 学生作业/</span><br><span class="line">chown :teacher 学生作业/</span><br><span class="line">chown $name 资源共享/</span><br><span class="line">chown :teacher 资源共享/</span><br><span class="line">chmod o+w 学生作业/</span><br><span class="line">cd /var/www/html/</span><br><span class="line">ln -s /home/$name/资源共享/ $name</span><br><span class="line">echo -e &quot;123\n123&quot; | smbpasswd -a -s $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo bash creat.sh <span class="comment">##执行</span></span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4781155-e1132b897ec96c89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="在此过程我所参考过的内容"><a href="#在此过程我所参考过的内容" class="headerlink" title="在此过程我所参考过的内容"></a>在此过程我所参考过的内容</h3><ul>
<li><a href="https://wenku.baidu.com/view/0546c4215901020207409c8c.html">黄培灿老师的方法</a></li>
<li><a href="http://blog.fens.me/linux-ftp-proftpd/">Proftpd快速搭建FTP服务器</a></li>
<li><a href="https://www.cnblogs.com/panblack/p/samba_batch_adding_users.html">Centos6配置samba服务器并批量添加用户和文件夹</a></li>
<li><a href="http://bbs.51cto.com/thread-1081649-1-1.html">Linux 下批量创建用户(shell 命令)</a></li>
<li><a href="http://www.linuxidc.com/Linux/2014-12/111056.htm">Linux ln命令 - 建立文件&#x2F;目录链接</a></li>
<li>老师的讲义。</li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python如何在遍历列表时删除元素</title>
    <url>/2019/03/06/Python%E5%A6%82%E4%BD%95%E5%9C%A8%E9%81%8D%E5%8E%86%E5%88%97%E8%A1%A8%E6%97%B6%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="问题源于leetcode26题"><a href="#问题源于leetcode26题" class="headerlink" title="问题源于leetcode26题"></a>问题源于leetcode26题</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<span id="more"></span>

<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [1,1,2],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<p>说明:</p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误解法"><a href="#错误解法" class="headerlink" title="错误解法"></a>错误解法</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> nums.count(num) &gt; <span class="number">1</span>:</span><br><span class="line">                nums.remove(num)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br></pre></td></tr></table></figure>

<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="/images/Screenshot_20190306_201335.png"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>原因是用for发起任何形式的遍历时，它的遍历顺序都是从最初就确定的，而在遍历中删除了元素会导致当前索引的变化，这样一是会导致漏删元素，二是会导致遍历超过链表的长度。</p>
<h2 id="通过拷贝的List来删除初始的List"><a href="#通过拷贝的List来删除初始的List" class="headerlink" title="通过拷贝的List来删除初始的List"></a>通过拷贝的List来删除初始的List</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums[:]:</span><br><span class="line">                <span class="keyword">if</span> nums.count(num) &gt; <span class="number">1</span>:</span><br><span class="line">                    nums.remove(num)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="/images/Screenshot_20190306_203338.png"></p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>因为拷贝List的行为需要耗费资源。</p>
<p>此语法是切片分配。 一片[：]表示整个列表。 nums [：] &#x3D;和nums &#x3D;之间的区别在于后者不替换原始列表中的元素。 当有两个对列表的引用时，这是可观察的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] <span class="comment"># changes what a and b both refer to</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">To see the difference just remove the [:] <span class="keyword">from</span> the above sequence.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] <span class="comment"># a now refers to a different list than b</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>要按字面意思取得问题的标题，如果list是变量名而不是内置，它将用省略号替换序列的长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>[:] = [...]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span></span><br><span class="line">[<span class="literal">Ellipsis</span>]</span><br></pre></td></tr></table></figure>

<h2 id="我的第三个优化的解法"><a href="#我的第三个优化的解法" class="headerlink" title="我的第三个优化的解法"></a>我的第三个优化的解法</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">        <span class="keyword">return</span> j + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="/images/Screenshot_20190306_213648.png"></p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>这类题想明白了其实解题很简单，重复的需要去掉，无非就是遍历数组，发现重复，就把后面的往前移，把重复值覆盖掉。具体说，可以维护2个指针，慢指针开始指向数组第一个元素，快指针指向第二个元素，然后快指针不断判断自己当前元素和前一个元素是否相同，相同则快指针后移，不相同则将当前值赋值给慢指针的后一个元素，慢指针后移。最后慢指针指向的元素及前面所有元素都是不重复的。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/bananaplan/p/remove-listitem-while-iterating.html">Python的list循环遍历中，删除数据的正确方法</a><br><a href="https://segmentfault.com/a/1190000007214571">Python语法糖——遍历列表时删除元素</a><br><a href="https://stackoverflow.com/questions/1157106/remove-all-occurrences-of-a-value-from-a-list">Remove all occurrences of a value from a list?</a><br><a href="https://stackoverflow.com/questions/1207406/how-to-remove-items-from-a-list-while-iterating">How to remove items from a list while iterating?</a><br><a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素</a></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux | 课程设计 ftp配置文件内容</title>
    <url>/2018/03/08/Linux-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-ftp%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h2 id="这两个地方是要改"><a href="#这两个地方是要改" class="headerlink" title="这两个地方是要改"></a>这两个地方是要改</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用户限制在主目录</span><br><span class="line">DefaultRoot			~</span><br><span class="line"></span><br><span class="line"># Umask是要修改的</span><br><span class="line">Umask 000 # 解决学生作业子目录无法上交的权限问题</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="这个很重要，一定要加"><a href="#这个很重要，一定要加" class="headerlink" title="这个很重要，一定要加"></a>这个很重要，一定要加</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;Directory &quot;~/学生作业&quot; &gt;</span><br><span class="line">Umask 000 # 解决学生作业子目录无法上交的权限问题</span><br><span class="line">&lt;Limit RMD DELE RETR&gt;</span><br><span class="line">DenyGroup student</span><br><span class="line">&lt;/Limit&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;~/资源共享&quot; &gt;</span><br><span class="line">Umask 000 # 解决学生作业子目录无法上交的权限问题</span><br><span class="line">&lt;Limit RMD DELE STOR&gt;</span><br><span class="line">DenyGroup student</span><br><span class="line">&lt;/Limit&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="修改之后要重启ftp服务器"><a href="#修改之后要重启ftp服务器" class="headerlink" title="修改之后要重启ftp服务器!!!!"></a>修改之后要重启ftp服务器!!!!</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /etc/init.d/proftpd restart</span><br></pre></td></tr></table></figure>

<h1 id="下面是我加了之后的配置文件，可以不看"><a href="#下面是我加了之后的配置文件，可以不看" class="headerlink" title="下面是我加了之后的配置文件，可以不看"></a>下面是我加了之后的配置文件，可以不看</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/proftpd/proftpd.conf -- This is a basic ProFTPD configuration file.</span><br><span class="line"># To really apply changes, reload proftpd after modifications, if</span><br><span class="line"># it runs in daemon mode. It is not required in inetd/xinetd mode.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Includes DSO modules</span><br><span class="line">Include /etc/proftpd/modules.conf</span><br><span class="line"></span><br><span class="line"># If set on you can experience a longer connection delay in many cases.</span><br><span class="line">IdentLookups			off</span><br><span class="line"></span><br><span class="line">#配置服务器名</span><br><span class="line">ServerName			&quot;niracler FTP Server&quot;</span><br><span class="line"></span><br><span class="line">#设置服务器运行模式，独立服务，或者被监管</span><br><span class="line">ServerType			standalone</span><br><span class="line"></span><br><span class="line">#设置为默认服务器</span><br><span class="line">DefaultServer			on</span><br><span class="line"></span><br><span class="line"># Set off to disable IPv6 support which is annoying on IPv4 only boxes.</span><br><span class="line">#设置关闭IPv6支持</span><br><span class="line">UseIPv6			        off</span><br><span class="line"></span><br><span class="line">#设置服务器接受请求的端口</span><br><span class="line">Port				21</span><br><span class="line"></span><br><span class="line">#设置被动模式使用的端口范围</span><br><span class="line">PassivePorts 			60000 65535</span><br><span class="line"></span><br><span class="line">#设置用户上传文件的权限掩码</span><br><span class="line">Umask				000 000</span><br><span class="line"></span><br><span class="line">#设置用户被chroot锁定到的各自的Home目录</span><br><span class="line">DefaultRoot			~</span><br><span class="line"></span><br><span class="line">#关闭欢迎信息显示</span><br><span class="line">DeferWelcome			off</span><br><span class="line"></span><br><span class="line">#如果显示欢迎信息，则指定显示的文件</span><br><span class="line">DisplayLogin			welcome.msg</span><br><span class="line"></span><br><span class="line">#指定切换文件夹时，显示的欢迎信息</span><br><span class="line">DisplayChdir               	.message true</span><br><span class="line"></span><br><span class="line">#设置日志</span><br><span class="line">TransferLog /var/log/proftpd/xferlog</span><br><span class="line">SystemLog   /var/log/proftpd/proftpd.log</span><br><span class="line"></span><br><span class="line">MultilineRFC2228		on</span><br><span class="line">ShowSymlinks			on</span><br><span class="line"></span><br><span class="line">TimeoutNoTransfer		600</span><br><span class="line">TimeoutStalled			600</span><br><span class="line">TimeoutIdle			1200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ListOptions                	&quot;-l&quot;</span><br><span class="line"></span><br><span class="line">DenyFilter			\*.*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_dynmasq.c&gt;</span><br><span class="line"># DynMasqRefresh 28800</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设置服务器进程运行使用的用户</span><br><span class="line">User				proftpd</span><br><span class="line"></span><br><span class="line">#设置服务器进程运行使用的组</span><br><span class="line">Group			        nogroup</span><br><span class="line"></span><br><span class="line"># (such as xinetd)</span><br><span class="line">MaxInstances			30</span><br><span class="line"></span><br><span class="line"># Normally, we want files to be overwriteable.</span><br><span class="line">AllowOverwrite			on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_quotatab.c&gt;</span><br><span class="line">QuotaEngine off</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_ratio.c&gt;</span><br><span class="line">Ratios off</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Delay engine reduces impact of the so-called Timing Attack described in</span><br><span class="line"># http://www.securityfocus.com/bid/11430/discuss</span><br><span class="line"># It is on by default.</span><br><span class="line">&lt;IfModule mod_delay.c&gt;</span><br><span class="line">DelayEngine on</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_ctrls.c&gt;</span><br><span class="line">ControlsEngine        off</span><br><span class="line">ControlsMaxClients    2</span><br><span class="line">ControlsLog           /var/log/proftpd/controls.log</span><br><span class="line">ControlsInterval      5</span><br><span class="line">ControlsSocket        /var/run/proftpd/proftpd.sock</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_ctrls_admin.c&gt;</span><br><span class="line">AdminControlsEngine off</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;~/学生作业&quot; &gt;</span><br><span class="line">Umask 000 # 解决学生作业子目录无法上交的权限问题</span><br><span class="line">&lt;Limit RMD DELE RETR&gt;</span><br><span class="line">DenyGroup student</span><br><span class="line">&lt;/Limit&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;~/资源共享&quot; &gt;</span><br><span class="line">Umask 000 # 解决学生作业子目录无法上交的权限问题</span><br><span class="line">&lt;Limit RMD DELE STOR&gt;</span><br><span class="line">DenyGroup student</span><br><span class="line">&lt;/Limit&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"># Include other custom configuration files</span><br><span class="line">Include /etc/proftpd/conf.d/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WebRTC 学习记录（一）| 从 corc 这个仓库讲起</title>
    <url>/2021/11/14/WebRTC-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89-%E4%BB%8E-corc-%E8%BF%99%E4%B8%AA-%E4%BB%93%E5%BA%93%E8%AE%B2%E8%B5%B7/</url>
    <content><![CDATA[<h2 id="文件传输以及-croc-代码分析"><a href="#文件传输以及-croc-代码分析" class="headerlink" title="文件传输以及 croc 代码分析"></a>文件传输以及 croc 代码分析</h2><p>若是让我们做一个文件传输服务器， 我们应该怎么做？</p>
<h3 id="文件传输的四种网络场景"><a href="#文件传输的四种网络场景" class="headerlink" title="文件传输的四种网络场景"></a>文件传输的四种网络场景</h3><p>我根据终端计算机所在的网络环境(是否有公网IP)划分了常见的4种场景:</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>场景</th>
<th>请求发起方</th>
<th>经过NAT</th>
<th>中继服务器</th>
<th>例子</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><strong>AB处于同一局域网</strong></td>
<td>直接可以互通发起请求</td>
<td>NO</td>
<td>NO</td>
<td>scp\rsync\ftp</td>
<td></td>
</tr>
<tr>
<td><strong>A(B)拥有公网IP</strong></td>
<td>需要B(A)主动发起请求</td>
<td>YES</td>
<td>NO</td>
<td>scp\rsync\ftp</td>
<td></td>
</tr>
<tr>
<td><strong>AB均拥有公网IP</strong></td>
<td>直接可以互通发起请求</td>
<td>NO</td>
<td>NO</td>
<td>scp\rsync\ftp</td>
<td>IPv6其实可以理解为这种情况</td>
</tr>
<tr>
<td><strong>AB处于不同局域网</strong></td>
<td>双方都需要先跟中继服务器 C 建立连接</td>
<td>YES</td>
<td>YES</td>
<td>微信\QQ\钉钉</td>
<td></td>
</tr>
</tbody></table>
<p><strong>总结：一般由没有公网IP的计算机主动发起请求</strong></p>
<p>关键概念(若是不理解，届时我可以画图示意一下， <strong>TODO</strong> ):</p>
<ul>
<li><strong>NAT</strong> : 可以简单理解为 <strong>端口映射</strong> ，会将我们计算机的 iAddr:iPort 映射为 eAddr:ePort。(例如：192.168.1.5:45678→54.8.23.45:678234)</li>
<li><strong>中继服务器(relay server)</strong> : AB计算机都可以访问的一个服务器。常见类型有STUN&#x2F;TURN等。</li>
</ul>
<h3 id="作为服务提供方，在文件传输中我们关注的点是什么？"><a href="#作为服务提供方，在文件传输中我们关注的点是什么？" class="headerlink" title="作为服务提供方，在文件传输中我们关注的点是什么？"></a>作为服务提供方，在文件传输中我们关注的点是什么？</h3><p>在达到“允许<strong>任何两台计算机</strong>传输数据”的需求的前提下：</p>
<ol>
<li><strong>带宽占用</strong> : 我们使用多少流量？我们需要节省网络中的流量。带宽、流量怎么减。作为服务提供方，我们最关注的就是成本，而流量跟带宽就是成本的关键(究竟占多少还有待考究，<strong>TODO</strong>)。</li>
<li><strong>连接占用时长</strong> : 这里指的速度不单单是文件传输的速度，而是你这次连接所占有我的服务器的时长，快吗？越早断开越好。</li>
<li><strong>安全</strong> : 安全的重要性是毋庸置疑的。</li>
<li>断点续传: 这是也一个必备项，但不是我们最关注的。</li>
<li>秒传: 其实这不属于文件传输的范畴，这更多是属于文件存储服务的范畴。</li>
</ol>
<h3 id="让我展示一下使用croc的例子"><a href="#让我展示一下使用croc的例子" class="headerlink" title="让我展示一下使用croc的例子"></a>让我展示一下使用croc的例子</h3><p><img src="https://raw.githubusercontent.com/schollz/croc/master/src/install/customization.gif" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/21011c3a-27e8-46cf-872c-d3c60b35a146/Untitled.png"></p>
<p>[1](这种 gif 的方案？ **TODO**)</p>
<h3 id="croc-功能实现-发送方功能实现"><a href="#croc-功能实现-发送方功能实现" class="headerlink" title="croc 功能实现: 发送方功能实现"></a><code>croc</code> 功能实现: 发送方功能实现</h3><p>抛开上面的成本、速度以及安全先不谈，我们先保证它能够符合我们的使用场景（见3.1）。中继服务器如何工作？以及它如何切换传输方案？</p>
<ul>
<li><p><strong>主流程</strong> :</p>
<ol>
<li><p>A在局域网中广播信息，同时AC建立连接</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from src/croc/croc.go#L358</span></span><br><span class="line"><span class="comment">// Send will send the specified file</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Send</span><span class="params">(options TransferOptions)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    err = c.sendCollectFiles(options)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... handle default args</span></span><br><span class="line">    <span class="keyword">if</span> !c.Options.DisableLocal &#123;</span><br><span class="line">    <span class="comment">//... broadcast on local network</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !c.Options.OnlyLocal &#123;</span><br><span class="line">        <span class="comment">// connect to relay server</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>局域网广播</strong> 部分:</p>
<ol>
<li><p>建立本地中继服务器，同时在 IPv6 以及 IPv4 网段进行广播</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from src/croc/croc.go#381</span></span><br><span class="line">c.setupLocalRelay()</span><br><span class="line"><span class="comment">// broadcast on ipv4</span></span><br><span class="line"><span class="keyword">go</span> c.broadcastOnLocalNetwork(<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// broadcast on ipv6</span></span><br><span class="line"><span class="keyword">go</span> c.broadcastOnLocalNetwork(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">go</span> c.transferOverLocalRelay(options, errchan)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>transferOverLocalRelay实现 ：与中继服务器交换密钥建立连接，并监听中继服务器信息，若收到 <code>handshake</code> 则成功建立连接，开始发送文件。</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">conn, banner, ipaddr, err := tcp.ConnectToTCPServer(<span class="string">&quot;localhost:&quot;</span>+c.Options.RelayPorts[<span class="number">0</span>], c.Options.RelayPassword, c.Options.SharedSecret[:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    data, _ := conn.Receive()</span><br><span class="line">    <span class="keyword">if</span> bytes.Equal(data, []<span class="keyword">byte</span>(<span class="string">&quot;handshake&quot;</span>)) &#123;</span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> bytes.Equal(data, []<span class="keyword">byte</span>&#123;<span class="number">1</span>&#125;) &#123;</span><br><span class="line">     log.Debug(<span class="string">&quot;got ping&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> log.Debugf(<span class="string">&quot;instead of handshake got: %s&quot;</span>, data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">c.conn[<span class="number">0</span>] = conn</span><br><span class="line">log.Debug(<span class="string">&quot;exchanged header message&quot;</span>)</span><br><span class="line">c.Options.RelayAddress = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">c.Options.RelayPorts = strings.Split(banner, <span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> c.Options.NoMultiplexing &#123;</span><br><span class="line">    log.Debug(<span class="string">&quot;no multiplexing&quot;</span>)</span><br><span class="line">    c.Options.RelayPorts = []<span class="keyword">string</span>&#123;c.Options.RelayPorts[<span class="number">0</span>]&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.ExternalIP = ipaddr</span><br><span class="line">errchan &lt;- c.transfer(options)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>AC服务器通信</strong> 部分:</p>
<ol>
<li><p>与中继服务器交换密钥建立连接, 并通过中继服务器获取到自己的路由器的NAT所映射的该服务器的公网IP<code>ipaddr</code>:</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, address := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;c.Options.RelayAddress6, c.Options.RelayAddress&#125; &#123;</span><br><span class="line">    <span class="comment">// ... handle error</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect to relay server</span></span><br><span class="line">    conn, banner, ipaddr, err = tcp.ConnectToTCPServer(address, c.Options.RelayPassword, c.Options.SharedSecret[:<span class="number">3</span>], durations[i])</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"> c.Options.RelayAddress = address</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听中继服务器消息，若收到 <code>ips?</code> 则将本地IP发送至中继服务器, 若收到 <code>handshake</code> 则成功建立连接，开始发送文件。</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    data, errConn := conn.Receive() <span class="comment">//... handle error</span></span><br><span class="line">    <span class="keyword">if</span> bytes.Equal(data, []<span class="keyword">byte</span>(<span class="string">&quot;ips?&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// recipient wants to try to connect to local ips</span></span><br><span class="line">        <span class="keyword">var</span> ips []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// only get local ips if the local is enabled</span></span><br><span class="line">        <span class="keyword">if</span> !c.Options.DisableLocal &#123;</span><br><span class="line">            <span class="comment">// get list of local ips</span></span><br><span class="line">            ips, err = utils.GetLocalIPs() <span class="comment">//... handle error</span></span><br><span class="line">            <span class="comment">// prepend the port that is being listened to</span></span><br><span class="line">            ips = <span class="built_in">append</span>([]<span class="keyword">string</span>&#123;c.Options.RelayPorts[<span class="number">0</span>]&#125;, ips...)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bips, _ := json.Marshal(ips)</span><br><span class="line">        <span class="keyword">if</span> err := conn.Send(bips); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Errorf(<span class="string">&quot;error sending: %v&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> bytes.Equal(data, []<span class="keyword">byte</span>(<span class="string">&quot;handshake&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// else ... Determine if the connection is maintained or failed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.conn[<span class="number">0</span>] = conn</span><br><span class="line">c.Options.RelayPorts = strings.Split(banner, <span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> c.Options.NoMultiplexing &#123;</span><br><span class="line">    log.Debug(<span class="string">&quot;no multiplexing&quot;</span>)</span><br><span class="line">    c.Options.RelayPorts = []<span class="keyword">string</span>&#123;c.Options.RelayPorts[<span class="number">0</span>]&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.ExternalIP = ipaddr</span><br><span class="line">log.Debug(<span class="string">&quot;exchanged header message&quot;</span>)</span><br><span class="line">errchan &lt;- c.transfer(options)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="croc功能实现-接收方功能实现"><a href="#croc功能实现-接收方功能实现" class="headerlink" title="croc功能实现: 接收方功能实现"></a><code>croc</code>功能实现: 接收方功能实现</h3><ul>
<li><p>第二步:B与C建立连接，通过密钥找到A服务器的信息。<br>同时: B尝试在局域网中寻找A服务器的信息</p>
</li>
<li><p><strong>主流程</strong> :</p>
<ol>
<li><p>总的来说就是找中继服务器的IP，究竟是用局域网的，还是用公网上的, <strong>优先局域网</strong>，然后发送 <code>handshake</code> 建立连接，接受文件。</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/croc/croc.go#L497</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Receive</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// recipient will look for peers first</span></span><br><span class="line">    <span class="comment">// and continue if it doesn&#x27;t find any within 100 ms</span></span><br><span class="line">    <span class="comment">// ...handle default args</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !c.Options.DisableLocal &amp;&amp; !isIPset &#123;</span><br><span class="line">        <span class="comment">//... discover from local network</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect to relay server</span></span><br><span class="line">    c.conn[<span class="number">0</span>], banner, ipaddr, err = tcp.ConnectToTCPServer(address, c.Options.RelayPassword, c.Options.SharedSecret[:<span class="number">3</span>], durations[i])</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">   c.Options.RelayAddress = address</span><br><span class="line">   <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !usingLocal &amp;&amp; !c.Options.DisableLocal &amp;&amp; !isIPset &#123;</span><br><span class="line">   <span class="comment">// ask the sender for their local ips and port</span></span><br><span class="line">   <span class="comment">// and try to connect to them</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err := c.conn[<span class="number">0</span>].Send([]<span class="keyword">byte</span>(<span class="string">&quot;handshake&quot;</span>))</span><br><span class="line">    <span class="comment">//... handle error</span></span><br><span class="line">    err = c.transfer(TransferOptions&#123;&#125;)</span><br><span class="line">    <span class="comment">//... handle error</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>局域网发现</strong> 部分:</p>
<ol>
<li><p>在局域网内通过抓包尝试获取发送端服务器IP</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/croc/croc.go#L522</span></span><br><span class="line"><span class="comment">// attempt to discover peers</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wgDiscovery.Done()</span><br><span class="line">    ipv4discoveries, err1 := peerdiscovery.Discover(peerdiscovery.Settings&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err1 == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(ipv4discoveries) &gt; <span class="number">0</span> &#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> discoveries = <span class="built_in">append</span>(discoveries, ipv4discoveries...)</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// ...IPv6 same as above</span></span><br><span class="line">wgDiscovery.Wait()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>若是局域网发现成功，则将 usingLocal 设置为 true，就不使用公网的中继服务器了</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(discoveries) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    log.Debugf(<span class="string">&quot;all discoveries: %+v&quot;</span>, discoveries)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(discoveries); i++ &#123;</span><br><span class="line">     log.Debugf(<span class="string">&quot;discovery %d has payload: %+v&quot;</span>, i, discoveries[i])</span><br><span class="line">     <span class="keyword">if</span> !bytes.HasPrefix(discoveries[i].Payload, []<span class="keyword">byte</span>(<span class="string">&quot;croc&quot;</span>)) &#123;</span><br><span class="line">        log.Debug(<span class="string">&quot;skipping discovery&quot;</span>)</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line"> &#125;</span><br><span class="line"> log.Debug(<span class="string">&quot;switching to local&quot;</span>)</span><br><span class="line"> portToUse := <span class="keyword">string</span>(bytes.TrimPrefix(discoveries[<span class="number">0</span>].Payload, []<span class="keyword">byte</span>(<span class="string">&quot;croc&quot;</span>)))</span><br><span class="line"> <span class="keyword">if</span> portToUse == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">       portToUse = <span class="string">&quot;9009&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> address := net.JoinHostPort(discoveries[<span class="number">0</span>].Address, portToUse)</span><br><span class="line"> <span class="keyword">if</span> tcp.PingServer(address) == <span class="literal">nil</span> &#123;</span><br><span class="line">     log.Debugf(<span class="string">&quot;succesfully pinged &#x27;%s&#x27;&quot;</span>, address)</span><br><span class="line">     c.Options.RelayAddress = address</span><br><span class="line">     c.ExternalIPConnected = c.Options.RelayAddress</span><br><span class="line">     c.Options.RelayAddress6 = <span class="string">&quot;&quot;</span></span><br><span class="line">     usingLocal = <span class="literal">true</span></span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>BC服务器通信</strong> 部分:</p>
<ol>
<li><p>询问A服务器IP</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ask the sender for their local ips and port</span></span><br><span class="line"><span class="comment">// and try to connect to them</span></span><br><span class="line">c.conn[<span class="number">0</span>].Send([]<span class="keyword">byte</span>(<span class="string">&quot;ips?&quot;</span>))</span><br><span class="line">data, err = c.conn[<span class="number">0</span>].Receive()</span><br><span class="line"><span class="comment">//...get ips</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ips) &gt; <span class="number">1</span> &#123;</span><br><span class="line">    port := ips[<span class="number">0</span>]</span><br><span class="line">    ips = ips[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">for</span> _, ip := <span class="keyword">range</span> ips &#123;</span><br><span class="line">     ipv4Addr, ipv4Net, errNet := net.ParseCIDR(fmt.Sprintf(<span class="string">&quot;%s/24&quot;</span>, ip))</span><br><span class="line">   log.Debugf(<span class="string">&quot;ipv4Add4: %+v, ipv4Net: %+v, err: %+v&quot;</span>, ipv4Addr, ipv4Net, errNet)</span><br><span class="line">   localIps, _ := utils.GetLocalIPs()</span><br><span class="line">   haveLocalIP := <span class="literal">false</span></span><br><span class="line">   <span class="keyword">for</span> _, localIP := <span class="keyword">range</span> localIps &#123;</span><br><span class="line">       localIPparsed := net.ParseIP(localIP)</span><br><span class="line">       <span class="keyword">if</span> ipv4Net.Contains(localIPparsed) &#123;</span><br><span class="line">        haveLocalIP = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> !haveLocalIP &#123;</span><br><span class="line">     log.Debugf(<span class="string">&quot;%s is not a local IP, skipping&quot;</span>, ip)</span><br><span class="line">     <span class="keyword">continue</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> serverTry := fmt.Sprintf(<span class="string">&quot;%s:%s&quot;</span>, ip, port)</span><br><span class="line"> conn, banner2, externalIP, errConn := tcp.ConnectToTCPServer(serverTry, c.Options.RelayPassword, c.Options.SharedSecret[:<span class="number">3</span>], <span class="number">250</span>*time.Millisecond)</span><br><span class="line"> <span class="keyword">if</span> errConn != <span class="literal">nil</span> &#123;</span><br><span class="line">     log.Debugf(<span class="string">&quot;could not connect to &quot;</span> + serverTry)</span><br><span class="line">     <span class="keyword">continue</span></span><br><span class="line"> &#125;</span><br><span class="line"> log.Debugf(<span class="string">&quot;local connection established to %s&quot;</span>, serverTry)</span><br><span class="line"> log.Debugf(<span class="string">&quot;banner: %s&quot;</span>, banner2)</span><br><span class="line"> <span class="comment">// reset to the local port</span></span><br><span class="line"> banner = banner2</span><br><span class="line"> c.Options.RelayAddress = serverTry</span><br><span class="line"> c.ExternalIP = externalIP</span><br><span class="line"> c.conn[<span class="number">0</span>].Close()</span><br><span class="line"> c.conn[<span class="number">0</span>] = <span class="literal">nil</span></span><br><span class="line"> c.conn[<span class="number">0</span>] = conn</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="croc-功能实现-小总结"><a href="#croc-功能实现-小总结" class="headerlink" title="croc 功能实现: 小总结"></a><code>croc</code> 功能实现: 小总结</h3><ul>
<li><p>它使用的默认的中继服务器。 <strong>而在局域网可用的情况下，用的是发送方自己开启的中继服务器。</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--relay值中继的地址（默认：<span class="string">&quot;142.93.177.120:9009&quot;</span>） [<span class="variable">$CROC_RELAY</span>]</span><br><span class="line">--relay6值中继的IPv6地址（默认为：<span class="string">&quot;[2604:a880:800:c1::14c:1]:9009&quot;</span>） [<span class="variable">$CROC_RELAY6</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>croc</code> 降低带宽占用</strong> : 识别内网以及IPv6, 在B获取到A的信息之后，若AB是在同一个局域网或者是用IPv6地址，则AB直接建立文件传输连接而不经过C，反则需要经过C中转。</p>
<ul>
<li><strong>优先内网</strong> : 支持局域网发现，符合网络条件是可以不经过的中转的<br><a href="https://github.com/schollz/croc/blob/d922808fd8bfc97571bdc4ddd6d115d979bc9ba7/src/croc/croc.go#L302">https://github.com/schollz/croc/blob/d922808fd8bfc97571bdc4ddd6d115d979bc9ba7/src/croc/croc.go#L302</a><a href="https://github.com/schollz/croc/blob/d922808fd8bfc97571bdc4ddd6d115d979bc9ba7/src/croc/croc.go#L497">https://github.com/schollz/croc/blob/d922808fd8bfc97571bdc4ddd6d115d979bc9ba7/src/croc/croc.go#L497</a></li>
<li><strong>为什么要优先IPv6?</strong>: IPv4 在大多数情况下需要使用 NAT 转换，在 <code>croc</code> 的设计上是需要使用中转服务器做流量转发的。所以它需要避开IPv4。(至于IPv6的覆盖率，我在后续章节会提到 #I40ONU)</li>
</ul>
</li>
<li><p><strong><code>croc</code> 提升速度</strong> : 如何实现全双工的实时通信层</p>
<ul>
<li><strong>传输文件的常见方式是首先将数据上传到服务器，然后，一旦上传，就将链接分享给去下载的人。</strong> 这种方法很简单，但速度很慢–文件的传输速度是上传和下载速度的谐波平均值的一半，这使得它比直接上传或下载都要慢。(例如，如果你以5MB&#x2F;s的速度上传文件，然后在完成上传后，以8MB&#x2F;s的速度下载，那么有效的传输速率是1&#x2F;2 * 2&#x2F;(1&#x2F;5+1&#x2F;8) &#x3D; 3.1MB&#x2F;s - 这比任何一种都慢。)</li>
<li><strong>更好的方法是使用在两台计算机之间建立一个全双工的实时通信层</strong> ，使 “上传” 和 “下载” 在两台计算机之间同时发生。这有效地提高了传输率，因为它不是连续的，只受限于两种传输模式（上传或下载）中较慢的一种。关键是一边在上传的同时，另外一边可以下载。[2]</li>
</ul>
</li>
<li><p><strong><code>croc</code> 保证安全</strong> : 提供<strong>端到端加密</strong>（使用PAKE，我还没看懂, TODO）</p>
</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>[1] croc 仓库链接: <a href="https://github.com/schollz/croc">https://github.com/schollz/croc</a></li>
<li>[2] croc 设计思路: <a href="https://schollz.com/blog/croc6/">https://schollz.com/blog/croc6/</a></li>
<li>croc 项目的灵感来源: <a href="https://github.com/magic-wormhole/magic-wormhole">https://github.com/magic-wormhole/magic-wormhole</a></li>
</ul>
]]></content>
      <tags>
        <tag>WebRTC</tag>
        <tag>学习记录</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>WebRTC 学习记录（二）| WebRTC 如何建立连接</title>
    <url>/2021/11/15/WebRTC-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89-WebRTC-%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>WebRTC 是一个宝库，他在数据传输方面也是做到极致了。</p>
<h2 id="为什么是WebRTC？需要解决的问题是什么？我们关注的是什么？"><a href="#为什么是WebRTC？需要解决的问题是什么？我们关注的是什么？" class="headerlink" title="为什么是WebRTC？需要解决的问题是什么？我们关注的是什么？"></a>为什么是WebRTC？需要解决的问题是什么？我们关注的是什么？</h2><p>在了解了 croc 的情况下，我们这边看一下该类服务还能够优化到什么地步。</p>
<ol>
<li>我们面对到的一个事实是“Relay 服务器实在太耗流量了！”</li>
<li>我们这里先引入一个知识：”NAT 是可以穿透的”。</li>
<li>TURN是STUN协议的中转扩展，croc工具自己有中转功能，没有去实现类似STUN的功能。其实 croc 那边也尝试过，但其实到现在都还没支持。[3]<br> <a href="https://imgtu.com/i/IgGpCT"><img src="https://z3.ax1x.com/2021/11/15/IgGpCT.md.png" alt="IgGpCT.md.png"></a></li>
</ol>
<span id="more"></span>

<h2 id="什么是ICE-Candidate-Interactive-Connectivity-Establishment-Candidate-，以及候选者的类型"><a href="#什么是ICE-Candidate-Interactive-Connectivity-Establishment-Candidate-，以及候选者的类型" class="headerlink" title="什么是ICE Candidate (Interactive Connectivity Establishment Candidate)，以及候选者的类型"></a>什么是ICE Candidate (Interactive Connectivity Establishment Candidate)，以及候选者的类型</h2><p> <strong>ICE是交互式连接建立的意思</strong>，它是一种用于NAT（网络地址转换器）的技术，用于建立VOIP、点对点、即时通信和其他类型的交互式媒体的通信。通常情况下，ICE Candidate 的信息是关于数据将被交换的IP地址和端口。</p>
<p>端到端创建连接的关键是Candidate的收集。 ICE Candidate 表示 WebRTC 与远端通信时使用的协议、IP 地址和端口，一般由以下字段组成[4]：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  IP: xxx.xxx.xxx.xxx,      <span class="comment">// 本地 IP 地址</span></span><br><span class="line">  port: number,             <span class="comment">// 本地端口号</span></span><br><span class="line">  type: host/srflx/relay,   <span class="comment">// 候选者类型，包括 host、srflx 和 relay</span></span><br><span class="line">  priority: number,         <span class="comment">// 优先级</span></span><br><span class="line">  protocol: UDP/TCP,        <span class="comment">// 传输协议</span></span><br><span class="line">  usernameFragment: string. <span class="comment">// 访问服务的用户名</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WebRTC将Candidates分为三种类型。</p>
<ul>
<li><strong>host 类型 (Host Candidate)</strong>: 即本地内网的IP和端口。IPv6也是属于这一种。这个地址来源于本地的物理网卡或逻辑网卡上的地址，对于具有公网地址或者同一内网的端可以用。host 类型的 Candidate 是最容易收集的。</li>
<li><strong>srflx 类型 (Server Reflexive Candidate)</strong>: 这是本地机器上NAT映射后的外部网络的IP和端口。是通过信令方式向 STUN 服务器发送 binding request 找到NAT映射后的地址。</li>
<li><strong>relay 类型 (Relayed Candidate)</strong>: 即中继服务器的IP和端口。这个地址是端发送 Allocate 请求到 TURN 服务器 ，由 TURN server 用于中继的地址和端口</li>
</ul>
<p>host 类型优先级最高，srflx 次之，relay 最低</p>
<blockquote>
<p>补充:<br>    1. 其实还有一个 prflx 类型的 Candidate，也是NAT映射后的外部网络的IP和端口，不过获得的方式稍有不同。 [5]<br>    2. 也有 tcp 专门的 Candidate Type [6]</p>
</blockquote>
<h2 id="4-3-STUN-x2F-TURN和信令服务器之间的区别"><a href="#4-3-STUN-x2F-TURN和信令服务器之间的区别" class="headerlink" title="4.3 STUN&#x2F;TURN和信令服务器之间的区别"></a>4.3 STUN&#x2F;TURN和信令服务器之间的区别</h2><p>WebRTC 中我们会遇到三种类型的服务器，分别是：STUN服务器、TURN服务器和信令服务器 [7]</p>
<p><strong>STUN服务器</strong> :</p>
<ul>
<li><strong>用于帮助通信双方发现有关其公网 IP 的信息并打开防火墙端口</strong>。这要解决的主要问题是，很多设备都在小型专用网络中的 NAT 路由器后面；NAT 基本上允许传出请求及其响应，但会阻止任何其他“未经请求的”传入请求。</li>
<li><strong>STUN 服务器充当向其发出请求的临时中间人，它在 NAT 设备上打开一个端口以允许响应返回</strong>，这意味着现在有一个已知的开放端口可供其他对等方使用。这就被称为NAT打洞技术。</li>
<li><strong>是否能打洞成功需要看NAT的类型</strong>。(关于NAT类型的讨论，详情见下一章：#I40ONU)</li>
</ul>
<p><strong>TURN服务器</strong> :</p>
<ul>
<li><strong>TURN 服务器是公共可访问位置的中继，以防无法进行 P2P 连接。</strong> 仍然存在打孔不成功的情况，例如由于更严格的防火墙。在这些情况下，两个对等方根本无法直接进行P2P通信。</li>
<li><strong>它们的所有流量都通过 TURN 服务器进行中继(非常占用带宽)</strong> 。</li>
<li><strong>一般是通信双方都可以不受限制地连接的第三方服务器</strong>，并且只是将数据从一个对等点转发到另一个。TURN 服务器的一种流行实现是coTURN。</li>
</ul>
<p><strong>信令服务器</strong> :</p>
<ul>
<li>WebRTC 规范对信令服务器没有任何说明，因为每个应用程序的信令机制都是非常独特的，并且可以采用多种不同的形式。</li>
</ul>
<p>我们可以简单理解为：<strong>STUN 是 NAT 打洞的，而 TURN 是做流量转发的，TURN 这种流量会经过relay服务器</strong></p>
<blockquote>
<p>这里需要说明一点，relay 服务是通过 TURN 协议实现的。所以我们经常说的 relay 服务器或 TURN 服务器它们是同一个意思，都是指中继服务器。上一章的 croc 的中继服务器其实就相当于这里的TURN服务器。</p>
</blockquote>
<h2 id="整个WebTRTC建立连接的流程的复杂图示"><a href="#整个WebTRTC建立连接的流程的复杂图示" class="headerlink" title="整个WebTRTC建立连接的流程的复杂图示"></a>整个WebTRTC建立连接的流程的复杂图示</h2><p>概念讲完了，我们上图:[1]</p>
<p><a href="https://imgtu.com/i/IgGAbR"><img src="https://z3.ax1x.com/2021/11/15/IgGAbR.png" alt="IgGAbR.png"></a></p>
<p>ICE Candidate???</p>
<blockquote>
<p>补充:<br>    - Offer: 在双方通讯时，呼叫方发送的 SDP 消息称为 Offer。<br>    - Answer: 在双方通讯时，被呼叫方发送的 SDP 消息称为 Answer。</p>
</blockquote>
<h2 id="TURN的使用频率是多少，其用途是什么"><a href="#TURN的使用频率是多少，其用途是什么" class="headerlink" title="TURN的使用频率是多少，其用途是什么"></a>TURN的使用频率是多少，其用途是什么</h2><p>我就这个问题在 Twitter 上问过 WebRTC 的 golang 社区 Pion [1]。总的来说就是 <strong>需要考虑各种因素，你要监控你使用场景的流量</strong> ：</p>
<ul>
<li>不同的 NAT 类型的覆盖率。</li>
<li>IPv6 的普及率。</li>
<li>地区差异（运营商选择的路由器）。</li>
<li>具体业务场景，是否只有数据或者是媒体和数据。</li>
<li>服务器还是浏览器客户端。</li>
</ul>
<p>但是，说这么多都没有，你需要部署一个 TURN 和并监控它的流量。。。</p>
<blockquote>
<p>网上流传的一个说法是: <em>“80% to 90% of devices are able to connect over WebRTC without TURN servers”</em>，我找了半天硬是没有找到出处或者对应的论文。。。</p>
</blockquote>
<h2 id="我应该做什么来建立-WebRTC-服务？-TODO"><a href="#我应该做什么来建立-WebRTC-服务？-TODO" class="headerlink" title="我应该做什么来建立 WebRTC 服务？(TODO)"></a>我应该做什么来建立 WebRTC 服务？(TODO)</h2><p>见 golang 以及 typescript</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>[1] MDN Web Docs: <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Connectivity#the_entire_exchange_in_a_complicated_diagram">WebRTC connectivity 流程图</a></li>
<li>[2] Twitter回复内容：<a href="https://twitter.com/niracler/status/1413123595157446657">https://twitter.com/niracler/status/1413123595157446657</a></li>
<li>[3] croc 作者在尝试引入 WebRTC 的情况下的: <a href="https://github.com/schollz/croc/issues/108#issuecomment-689715146">测试以及回复</a></li>
<li>[4] 极客时间:从0打造音视频系统的教程: <a href="https://time.geekbang.org/column/article/112325">09 | 让我们揭开WebRTC建立连接的神秘面纱</a></li>
<li>Hacker News 上对于 WebRTC 的讨论: <a href="https://news.ycombinator.com/item?id=25933016">WebRTC is now a W3C and IETF standard (web.dev)</a></li>
<li>[5] MDN Web Docs: <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/type#syntax">RTCIceCandidate.type</a></li>
<li>[6] MDN Web Docs: <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/tcpType">RTCIceCandidate.tcpType</a></li>
<li>[7] STUN&#x2F;TURN和信令服务器之间的区别来源: <a href="https://stackoverflow.com/questions/54388401/difference-between-stun-turncoturn-servers-and-signaling-servers-written-with">Difference between STUN&#x2F;TURN(coTURN) servers and Signaling servers (written with socket.io&#x2F;websocket) in WebRTC?</a></li>
</ul>
]]></content>
      <tags>
        <tag>WebRTC</tag>
        <tag>学习记录</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 关闭防火墙</title>
    <url>/2019/05/11/centos7-%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<h2 id="centos7-关闭防火墙"><a href="#centos7-关闭防火墙" class="headerlink" title="centos7 关闭防火墙"></a>centos7 关闭防火墙</h2><p>关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$systemctl</span> stop firewalld.service</span><br></pre></td></tr></table></figure>

<p>禁止开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$systemctl</span> <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.js学习(一)</title>
    <url>/2019/03/25/vue-js%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="vue-exercise"><a href="#vue-exercise" class="headerlink" title="vue-exercise"></a>vue-exercise</h1><p>不定期的vue学习动态<br>第一天</p>
<hr>
<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>关于一个<a href="day01/01.html">最小的vue项目的结构</a></p>
<ol>
<li><p>导入vue</p>
</li>
<li><p>创建vue实例</p>
</li>
<li><p>使用插值表达式调用数据</p>
</li>
</ol>
<span id="more"></span>

<h3 id="vue基础及事件修饰符"><a href="#vue基础及事件修饰符" class="headerlink" title="vue基础及事件修饰符"></a>vue基础及事件修饰符</h3><ol>
<li>使用v-cloak可以解决闪烁问题，或者使用v-text也可以</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p v-cloak&gt; &#123;&#123; msg &#125;&#125; &lt;/p&gt;</span><br><span class="line">&lt;h4 v-text=&#x27;msg&#x27;&gt;&lt;/h4&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>如何定义一个基本的Vue代码结构</p>
</li>
<li><p>插值表达式 和 v-text 是用来数据的绑定的</p>
</li>
<li><p>v-html</p>
</li>
<li><p>v-bind  Vue提供的属性绑定机制  缩写是:</p>
</li>
<li><p>v-on    Vue提供的事件绑定机制  缩写是@</p>
</li>
</ol>
<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p><a href="day01/04.%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6.html">代码范例</a></p>
<ol>
<li><p>.stop 阻止冒泡</p>
</li>
<li><p>.prevent 阻止默认事件</p>
</li>
<li><p>.capture 添加事件侦听器时使用事件捕获模式</p>
</li>
<li><p>.self 只当事件在该元素本身(比如不是子元素)触发式触发回调</p>
</li>
<li><p>.once 事件只触发一次</p>
</li>
</ol>
<h3 id="跑马灯"><a href="#跑马灯" class="headerlink" title="跑马灯"></a>跑马灯</h3><p><a href="day01/03.%E8%B7%91%E9%A9%AC%E7%81%AF.html">代码范例</a></p>
<p>步骤:</p>
<ol>
<li>弄一个时间</li>
<li>截取字符串</li>
<li>定时循环截取</li>
</ol>
<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p><a href="day01/05.v-model.html">代码范例</a></p>
<ol>
<li><p>v-bind 只能实现数据的单向绑定,而v-model能够实现数据双向绑定</p>
</li>
<li><p>v-model只能运用在表单元素中</p>
</li>
</ol>
<h3 id="简易计算器"><a href="#简易计算器" class="headerlink" title="简易计算器"></a>简易计算器</h3><p><a href="day01/05.v-model.html">代码范例</a></p>
<ol>
<li><p>HTML代码结构  </p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;n1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;opt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;+&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;-&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;*&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;n2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;=&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;calc&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>vue实例结构</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        n1:0,</span><br><span class="line">        n2:0,</span><br><span class="line">        result:0,</span><br><span class="line">        opt: &quot;-&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        calc() &#123;</span><br><span class="line">            switch (this.opt) &#123;</span><br><span class="line">                case &#x27;+&#x27;:</span><br><span class="line">                    this.result = parseInt(this.n1) + parseInt(this.n2);</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;-&#x27;:</span><br><span class="line">                    this.result = parseInt(this.n1) - parseInt(this.n2);</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;*&#x27;:</span><br><span class="line">                    this.result = parseInt(this.n1) * parseInt(this.n2);</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;/&#x27;:</span><br><span class="line">                    this.result = parseInt(this.n1) /  parseInt(this.n2);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="vue里面使用样式"><a href="#vue里面使用样式" class="headerlink" title="vue里面使用样式"></a>vue里面使用样式</h3><ol>
<li><p>通过属性绑定为元素设置class类样式</p>
</li>
<li><p>通过通过属性绑定为元素绑定style行内样式</p>
</li>
</ol>
<h3 id="vue指令v-for"><a href="#vue指令v-for" class="headerlink" title="vue指令v-for"></a>vue指令v-for</h3><ol>
<li>v-for循环普通数组</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p v-for=&quot;(item , i) in list&quot;&gt;索引值: &#123;&#123;i&#125;&#125; ,  内容: &#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            list:[1,2,3,4,5,6]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>v-for循环对象数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p v-for=&quot;(user , i) in list&quot;&gt;Id: &#123;&#123; user.id &#125;&#125;, 姓名: &#123;&#123; user.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            list:[</span><br><span class="line">                &#123; id: 1, name: &#x27;ls1&#x27; &#125;,</span><br><span class="line">                &#123; id: 2, name: &#x27;ls2&#x27; &#125;,</span><br><span class="line">                &#123; id: 3, name: &#x27;ls3&#x27; &#125;,</span><br><span class="line">                &#123; id: 4, name: &#x27;ls4&#x27; &#125;,</span><br><span class="line">                &#123; id: 5, name: &#x27;ls5&#x27; &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>v-for循环对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p v-for=&quot;(val, key, i) in user&quot;&gt;值是: &#123;&#123; val &#125;&#125;, 键是: &#123;&#123; key &#125;&#125;, 索引是: &#123;&#123;i&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            user: &#123;</span><br><span class="line">                id: 5,</span><br><span class="line">                name: &quot;hui&quot;,</span><br><span class="line">                gender: &quot;male&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>v-for迭代数字</p>
</li>
</ol>
<p>注意:是从1开始的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p v-for=&quot;count in 10000&quot;&gt;我们来迭代数字吧: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue指令之v-if和v-show"><a href="#vue指令之v-if和v-show" class="headerlink" title="vue指令之v-if和v-show"></a>vue指令之v-if和v-show</h3><p>一般来说,v-if有更高的切换消耗而v-show有更高的初始渲染消耗.因此,如果需要频繁切换,应使用v-show, 而运行时不大可能改变的,用v-if更好</p>
<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul>
<li><a href="https://www.bilibili.com/video/av36650577/?p=1">最全的vue.js视频【黑马程序员】</a></li>
<li><a href="https://stackoverflow.com/questions/46429727/bootstrap-panel-not-working/46429803">bootstrap-panel-not-working</a></li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>《软技能:代码之外的生存指南》读后感(上)</title>
    <url>/2019/06/13/%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD-%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F-%E4%B8%8A/</url>
    <content><![CDATA[<p>本文是我看《软技能:代码之外的生存指南》的读后感。书中写了好多程序之外的生存攻略，还是</p>
<h3 id="段子"><a href="#段子" class="headerlink" title="段子"></a>段子</h3><blockquote>
<p>确保写出的代码不至于让你的后继维护者恨不得驾起他们的小汽车从你身上碾压过。。。</p>
</blockquote>
<p>看这段的时候简直是太真实了，我之前看别人代码的时候就有这种冲动。当然，更多的时候是别人对我有这种冲动。。。</p>
<hr>
<blockquote>
<p>你要传达的不仅是这款软件的价值是什么，还有它与别的成千上万款软件开发人员提供的服务有何不同。</p>
</blockquote>
<p>吸引人的，总是那些你有而别人没有的东西</p>
<hr>
<span id="more"></span>

<blockquote>
<p>我们总是认为严谨的推理足以使他人接受你的思维方式。而事情的真相往往是：尽管我们为自己的智慧感到骄傲，但我们依然是情感动物。我们就像那些穿着西装、打着领带、四处游逛的小孩，假装自己已经长大，其实任何轻微的伤害都能够让我们嚎啕大哭，或者大发雷霆， 我们只是学会了如何控制和隐藏这些情绪。</p>
</blockquote>
<p>经常会有这样的事情，你虽然说的很有道理，但是我很不爽，我不听。</p>
<hr>
<blockquote>
<p>与雇佣技术高超但需要生拉硬拽才能干活的人相比，我宁愿雇佣这样的开发人员：知道的东西可以少一些，但是明确知道要做什么，以及怎么去做。从某种程度上，在你可控的范围内，面试的时候你要集中精力证明自己就是无需督促也能自动自发做好事情的员工。</p>
</blockquote>
<p>生拉硬扯才能干活的人么？其实我之前也觉得我带的团队中的队员很多都是这样的人。但其实不是的，我身边的人都很优秀，尤其是我们团队中的人更是如此。只是因为没有工资，工作的方向又跟他们学习的方向不太一致，不过更多的还是我分配的任务不够明确。</p>
<hr>
<blockquote>
<p>金钱总是追随着责任。有任何机会承担更多</p>
</blockquote>
<p>我总是在逃避做决策，因为做决策的人需要为自己的决策负责。而为什么会逃避责任呢？我觉得是因为我害怕失败。我总是在想“要是这个决策是错误的怎么办？”。但其实深想一层，决策错误又如何？我并不会实际上失去什么，这反而能使我变得更坚强（厚脸皮）。而且在不断总结错误的过程中，我就可以慢慢地成长为别人无法替代的人。</p>
<hr>
<blockquote>
<p>每当我开始新工作的时候，我所做的第一件事就是记日志，记录我每天都把时间花在哪儿了，完成了哪些工作？我会将这些信息汇总成周报总结，在每个周五发送给我的经理。我能理解，知晓自己直接下属在做什么对于管理者来说至关重要，所以我会通过发送周工作总结的方式让他们的工作更轻松。</p>
</blockquote>
<p>是的，我不好意思让我的队友每周写一份总结报告。当然他们也是有定期给我发一些工作进度的，这大概就是靠谱的人的特点吧。</p>
<hr>
<blockquote>
<p>真正的专业人士对自己的工作的所有方面都设定高品质标准</p>
</blockquote>
<p>我也是这样认为的，优秀的人各方面都很优秀。我周边一些学习好的人，他们玩游戏都很好。因为他们有一种“优秀的人的自觉”，总是对自己各方面都要求比较高。</p>
<hr>
<blockquote>
<p>随着时间的流逝，热情往往会变得捉摸不定以至于消失殆尽</p>
</blockquote>
<p>所以这就是我开了无数个坑而又不填的理由？不过我每一次开坑的时候都会认为“这就是我的真爱”。</p>
<hr>
<h3 id="这本书给我的任务"><a href="#这本书给我的任务" class="headerlink" title="这本书给我的任务"></a>这本书给我的任务</h3><ol>
<li><p>即使你现在不需要努力找工作，也要整理一份清单，列出你想去工作的公司，以及你认识的这些公司的人</p>
</li>
<li><p>想办法认识你想去的公司的里面的人</p>
</li>
<li><p>列出你能想到的所有软件开发的专业领域。从广义的范畴将它们逐一细化，看你能细化到多具体。</p>
</li>
<li><p>去主流的招聘网站看看自己的专业领域市场行情如何</p>
</li>
<li><p>你都有哪些习惯？观察自己的一天，尝试找出尽可能多的习惯。将你的习惯分为好习惯和坏习惯，指定一份好习惯养成计划</p>
</li>
</ol>
<h3 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h3><ol>
<li>还是有很多不符合国情的地方。例如里面描述的债券市场的运行机制</li>
</ol>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>不通用的 Python 程序员练级攻略</title>
    <url>/2019/03/14/%E4%B8%8D%E9%80%9A%E7%94%A8%E7%9A%84Python%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<blockquote>
<p>本文章记录的是笔者在立志成为 python 程序员的目标制定及技术点亮过程，主要有我看过的觉得可以的资源，以及我自己的总结，<br>还夹带着一些无聊的日常</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/4781155-2c23e3e36cbf3c27.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="技术栈。jpg"></p>
<p>保持更新的技术栈<a href="https://www.processon.com/view/link/5c04f065e4b0059238d440d1">思维导图</a></p>
<span id="more"></span>

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰的 python</a><br>  可能是最好的 python 中文教程</li>
</ul>
<h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul>
<li><a href="https://www.jianshu.com/p/0deb70e6f395">npm 换源</a></li>
</ul>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul>
<li><a href="https://code.ziqiangxuetang.com/django/django-tutorial.html">Django 基础教程 by<br>  自强学堂</a><br>  第一次接触可以看这个</li>
<li><a href="https://www.bilibili.com/video/av40066981?from=search&seid=5778159097686358187">Python 前后端分离开发 Vue+Django REST<br>  framework 实战</a></li>
</ul>
<h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><ul>
<li>[Python 3 网络爬虫开发实战<br>  , 崔庆才著』(<a href="https://pan.baidu.com/s/1dxLM6hDhLQ4yrR0iRcID2Q">https://pan.baidu.com/s/1dxLM6hDhLQ4yrR0iRcID2Q</a>)<br>  关于爬虫的资料跟书籍首推 崔庆才的爬虫书，总的来说，我感觉有点像官方文档</li>
<li><a href="https://www.bilibili.com/video/av37497888">崔庆才 python3 爬虫入门到精通</a><br>  b 站视频</li>
</ul>
<h3 id="前端分析"><a href="#前端分析" class="headerlink" title="前端分析"></a>前端分析</h3><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><blockquote>
<p>目前使用过的爬虫框架只有 scrapy</p>
</blockquote>
<ul>
<li><a href="https://blog.michaelyin.info/scrapy-tutorial-9-how-use-scrapy-item/">How To Use Scrapy<br>Item</a><br>使用 SQLAlchemy 优雅地解决 scrapy 连接 mysql 数据库的问题</li>
</ul>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h3 id="动态页面爬取"><a href="#动态页面爬取" class="headerlink" title="动态页面爬取"></a>动态页面爬取</h3><h3 id="APP-爬取"><a href="#APP-爬取" class="headerlink" title="APP 爬取"></a>APP 爬取</h3><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h3 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h3><h3 id="小灵感"><a href="#小灵感" class="headerlink" title="小灵感"></a>小灵感</h3><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h2 id="数据挖掘-amp-机器学习"><a href="#数据挖掘-amp-机器学习" class="headerlink" title="数据挖掘&amp;机器学习"></a>数据挖掘&amp;机器学习</h2><h3 id="有监督"><a href="#有监督" class="headerlink" title="有监督"></a>有监督</h3><h3 id="无监督"><a href="#无监督" class="headerlink" title="无监督"></a>无监督</h3><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><h3 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h3><ul>
<li><a href="https://www.dataquest.io/blog/large_files/pandas-cheat-sheet.pdf">pandas 速查表</a><br>  当然要学过的才会看、</li>
<li><a href="https://www.jianshu.com/p/04d180d90a3f">《利用 Python 进行数据分析·第 2 版》</a><br>  pandas 库的作者写的，你说好不好？</li>
<li>[Sklearn 与 TensorFlow<br>  机器学习实用指南』(<a href="https://github.com/apachecn/hands-on-ml-zh">https://github.com/apachecn/hands-on-ml-zh</a>)</li>
</ul>
<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><ul>
<li><a href="https://www.jianshu.com/p/e543dc63454f">python networkx<br>  包绘制复杂网络关系图</a></li>
</ul>
<h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><h3 id="负载"><a href="#负载" class="headerlink" title="负载"></a>负载</h3><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><a href="https://blog.csdn.net/panfengyun12345/article/details/16878873">virsh 的使用与实例步骤安装虚拟机</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> libvirtd</span><br><span class="line">systemctl start libvirtd</span><br><span class="line"></span><br><span class="line">yum install qemu-kvm libvirt virt-install ebtables bridge-utils</span><br><span class="line"></span><br><span class="line">scp -r root@172.28.7.39:/root/create_br0.sh create_br0.sh</span><br><span class="line"></span><br><span class="line">virt-install --virt-type kvm --name CentOS-7-x86_64-C00 --ram 4096 \</span><br><span class="line">    --disk path=/home/raw/CentOS-7-x86_64-C00.raw,device=disk,bus=virtio \</span><br><span class="line">    --network bridge:br0 --graphics vnc,listen=0.0.0.0,port=5900 --noautoconsole \</span><br><span class="line">    --network bridge=br0,model=virtio  --boot hd</span><br><span class="line"></span><br><span class="line">virt-install --virt-type kvm --name CentOS-7-x86_64-C00 --vcpus=4 --ram 4096 \</span><br><span class="line">    --os-type linux --os-variant=rhl7 \</span><br><span class="line">    --disk path=/home/raw/CentOS-7-x86_64-C00.raw,device=disk,bus=virtio \</span><br><span class="line">    --network bridge:br0,model=virtio --graphics vnc,listen=0.0.0.0,port=6900 \</span><br><span class="line">    --noautoconsole --boot hd</span><br><span class="line"></span><br><span class="line">virt-clone -n CentOS-7-x86_64-C01 -o CentOS-7-x86_64-C00 -f /home/raw/CentOS-7-x86_64-C01.raw</span><br></pre></td></tr></table></figure>

<h3 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h3><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul>
<li><a href="https://legacy.gitbook.com/book/philipzheng/docker_practice/details">Docker 從入門到實踐</a></li>
<li><a href="https://legacy.gitbook.com/book/joshhu/docker_theory_install/details">Docker 原理圖解及全環境安裝</a></li>
<li><a href="https://blog.csdn.net/mungo/article/details/54632686">自己学 Docker:10.Docker.v1.12 升级到 v1.13.0 正式版</a><br>  关于 docker 的版本升级可以看这里</li>
<li><a href="https://stackoverflow.com/questions/46004648/how-to-setup-mysql-with-utf-8-using-docker-compose">优雅地解决 docker 容器中 mysql 的编码问题</a></li>
<li><a href="https://blog.csdn.net/xu470438000/article/details/50512442">使用 docker 搭建 hadoop 分布式集群</a>  </li>
<li><a href="https://www.jianshu.com/p/38c9e98ec481">CentOS 更换阿里云 YUM 源</a>   </li>
<li><a href="https://github.com/big-data-europe/docker-hadoop">docker-hadoop</a>  </li>
<li><a href="https://blog.csdn.net/yjk13703623757/article/details/78943345">debian 系 linux，更换 apt-get 官方源为国内源</a>  </li>
<li><a href="https://www.howtoing.com/how-to-install-java-with-apt-get-on-debian-8">如何使用 Apt-Get 在 Debian 8 上安装 Java</a>  </li>
<li><a href="https://www.jianshu.com/p/1cf26c0c9e9b">debian8 无痛安装 JDK8</a></li>
<li><a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz">hadoop 安装</a></li>
<li><a href="https://www.cnblogs.com/fanghao/p/8542170.html">HBase Python API</a></li>
<li><a href="https://hacpai.com/article/1508232710946">基于 docker 搭建 hadoop 跨主机集群</a></li>
<li><a href="https://segmentfault.com/a/1190000012063374">Docker 常用命令</a></li>
<li><a href="https://www.jianshu.com/p/df744c4e375e">使用 Docker Swarm 模式搭建 Swarm 集群</a></li>
<li><a href="https://blog.csdn.net/u013948858/article/details/78429954">非 root 用户加入 docker 用户组省去 sudo</a> 之后要重启</li>
<li><a href="https://www.runoob.com/docker/centos-docker-install.html">CentOS Docker 安装</a></li>
</ul>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="编辑器-amp-IDEs"><a href="#编辑器-amp-IDEs" class="headerlink" title="编辑器 &amp;IDEs"></a>编辑器 &amp;IDEs</h3><ul>
<li><a href="https://www.jetbrains.com/pycharm/">pycharm</a> python 最强大的 IDE</li>
<li><a href="https://atom.io/">atom</a> 我写 markdown 文档就是用这个</li>
<li><a href="https://blog.fundebug.com/2018/07/24/vs-extensions/">30 个极大提高开发效率的 Visual Studio Code 插件</a></li>
<li><a href="https://www.zhihu.com/question/40640654">Visual Studio Code 有哪些你常用的插件？</a></li>
</ul>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git 教程 - 廖雪峰的官方网站</a>\</li>
<li><a href="https://www.cnblogs.com/schaepher/p/4933873.html">GitHub 团队项目合作流程</a></li>
<li><a href="https://stackoverflow.com/questions/11497457/git-clone-without-git-directory">Git 克隆时不带。git 文件夹</a></li>
</ul>
<h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><ul>
<li><a href="https://www.processon.com/">processon</a><br>我是挺喜欢这个在线画图网站的，就是有时候有 bug</li>
<li><a href="https://github.com/96chh/Upgrade-ProcessOn">Upgrade-ProcessOn</a> 增加<br>ProcessOn 的免费文件数（逃)</li>
</ul>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><blockquote>
<p>因为笔者开发时使用的是 linux 操作系统的 manjaro 发行版，其中踩过无数的坑，<br>也做过一些笔记</p>
</blockquote>
<h3 id="linux-那些坑"><a href="#linux-那些坑" class="headerlink" title="linux 那些坑"></a>linux 那些坑</h3><ul>
<li><a href="https://www.jianshu.com/p/6e9eb98c0494">Manjaro linux 安装笔记</a><br>无数次重装系统后我都是对着着文档安装软件的，当年帮我装这系统的人写的</li>
<li><a href="manjaro/Manjaro_install.txt">本人的安装 manjaro 常用软件的文档</a></li>
<li><a href="https://mtaoist.xyz/2018/03/19/Bumblebee/">Manjaro Linux 配置 Intel 与 Nvidia 双显卡切换</a><br>因为显卡问题而无法进入系统时，也可以用这里面的方法解决</li>
<li><a href="https://blog.csdn.net/Tangcuyuha/article/details/80298500">给本子安装 manjaro 出现无法关机的解决办法</a><br>当时也是因为显卡问题</li>
<li><a href="https://forum.manjaro.org/t/no-wired-network-realtek-rtl8111-8168-8411/22501">No wired network (Realtek RTL8111&#x2F;8168&#x2F;8411)</a><br>以太网卡找不到的问题</li>
</ul>
<h3 id="操作系统笔记"><a href="#操作系统笔记" class="headerlink" title="操作系统笔记"></a>操作系统笔记</h3><ul>
<li><a href="computer_system/">操作系统常见概念</a></li>
</ul>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ul>
<li><a href="">mysql</a></li>
<li><a href="">mongodb</a></li>
</ul>
<h3 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h3><ul>
<li><a href="https://www.jianshu.com/p/1e402922ee32">Markdown—— 入门指南</a></li>
<li><a href="https://www.jianshu.com/p/4721ddd27027">实用帖 | 如何为 Markdown 文件自动生成目录？</a></li>
<li><a href="https://pandoc.org/MANUAL.html">Pandoc</a> 感觉我会喜欢上这个工具的</li>
<li><a href="https://stackoverflow.com/questions/39956497/pandoc-convert-docx-to-markdown-with-embedded-images">pandoc word to markdown with images</a></li>
</ul>
<h2 id="程序人生"><a href="#程序人生" class="headerlink" title="程序人生"></a>程序人生</h2><h3 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h3><blockquote>
<p>我认为， 我们要时刻知道自己在干什么， 并定时地审视自己 -</p>
</blockquote>
<ul>
<li><a href="https://niracler.github.io/">niracler 的博客</a></li>
</ul>
<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><ul>
<li><p><a href="https://www.jianshu.com/p/a39573555039">使用 hexo+github 免费搭建个人博客网站超详细教程</a></p>
</li>
<li><p><a href="https://github.com/nodejh/nodejh.github.io/issues/37">使用 Hexo 创建项目文档网站</a></p>
</li>
<li><p><a href="https://jinzequn.github.io/2018/01/24/github-hexo/">blog+github 备份和恢复</a></p>
</li>
<li><p><a href="http://www.mdslq.cn/archives/f186e832.html">Hexo 博客 Next 主题打开过慢的解决办法</a></p>
</li>
</ul>
<h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ul>
<li><a href="https://github.com/kenwoodjw/python_interview_question">关于 python 的面试题</a></li>
</ul>
<h2 id="提高效率的软件推荐"><a href="#提高效率的软件推荐" class="headerlink" title="提高效率的软件推荐"></a>提高效率的软件推荐</h2><h3 id="v2ray"><a href="#v2ray" class="headerlink" title="v2ray"></a>v2ray</h3><ul>
<li><a href="http://einverne.github.io/post/2018/01/v2ray.html#linux">v2ray</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="economics-notes/">西方经济学复习笔记</a></li>
</ul>
<h2 id="本项目参考内容"><a href="#本项目参考内容" class="headerlink" title="本项目参考内容"></a>本项目参考内容</h2><ul>
<li><a href="https://www.zhihu.com/question/28799035">整个 IT 行业的技术栈是怎样的？</a></li>
<li><a href="https://github.com/ethanww/dive-into-python">python 程序员之路</a></li>
<li><a href="https://github.com/Snailclimb/JavaGuide">【Java 学习 + 面试指南】</a><br>  一份涵盖大部分 Java 程序员所需要掌握的核心知识。\</li>
<li><a href="https://www.fullstackpython.com/table-of-contents.html">fullstackpython</a><br>  我看了这个，差点都不想继续写了、</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>不通用的docker常用命令汇总</title>
    <url>/2019/03/22/%E4%B8%8D%E9%80%9A%E7%94%A8%E7%9A%84docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>最全面的介绍在<a href="https://docs.docker.com/">docker官方文档</a></p>
<h3 id="root权限"><a href="#root权限" class="headerlink" title="root权限"></a>root权限</h3><blockquote>
<p>注意：docker命令的使用大多需要权限， 所以先使用root用户</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> su</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="删除所有容器与镜像"><a href="#删除所有容器与镜像" class="headerlink" title="删除所有容器与镜像"></a>删除所有容器与镜像</h3><p>列出所有容器ID,查看所有运行或者不运行容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> ps -aq</span><br></pre></td></tr></table></figure>

<p>停止 docker ps -aq 所列出的容器, (才能够删除其中的images)  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> stop $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p>删除所有容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p>查看当前有些什么镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> images</span><br></pre></td></tr></table></figure>

<p>删除全部镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> rmi $(docker images -q)</span><br></pre></td></tr></table></figure>

<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>通过image的id来指定删除谁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> rmi &lt;image id&gt;</span><br></pre></td></tr></table></figure>

<p>想要删除untagged images，也就是那些id为的image的话可以用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> rmi $(docker images | grep <span class="string">&quot;^&lt;none&gt;&quot;</span> | awk <span class="string">&quot;&#123;print <span class="variable">$3</span>&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>强制删除全部image的话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure>

<p>删除所有不使用的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> image prune -f -a</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除所有停止的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> container prune</span><br></pre></td></tr></table></figure>

<h3 id="删除卷"><a href="#删除卷" class="headerlink" title="删除卷"></a>删除卷</h3><p>删除没有用到的卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> volume prune</span><br></pre></td></tr></table></figure>

<h3 id="容器与宿主机之间的文件传输"><a href="#容器与宿主机之间的文件传输" class="headerlink" title="容器与宿主机之间的文件传输"></a>容器与宿主机之间的文件传输</h3><p>从容器到宿主机复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> cp tomcat：/webapps/js/text.js /home/admin</span><br><span class="line"><span class="variable">$docker</span> cp 容器名:  容器路径       宿主机路径</span><br></pre></td></tr></table></figure>

<p>从宿主机到容器复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> cp /home/admin/text.js tomcat：/webapps/js</span><br><span class="line"><span class="variable">$docker</span> cp 宿主路径中文件      容器名  容器路径</span><br></pre></td></tr></table></figure>

<h3 id="停止、启动、杀死、重启一个容器"><a href="#停止、启动、杀死、重启一个容器" class="headerlink" title="停止、启动、杀死、重启一个容器"></a>停止、启动、杀死、重启一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> stop Name或者ID  </span><br><span class="line"><span class="variable">$docker</span> start Name或者ID  </span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">kill</span> Name或者ID  </span><br><span class="line"><span class="variable">$docker</span> restart name或者ID</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><blockquote>
<p>我认为进入容器是一种不优雅的做法，因为我认为进入容器要做的事情应该在Dockerfile里面</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> <span class="built_in">exec</span> -it  容器名或ID /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li>docker exec ：在运行的容器中执行命令</li>
<li>-d :分离模式: 在后台运行</li>
<li>-i :即使没有附加也保持STDIN（标准输入） 打开,以交互模式运行容器，通常与 -t 同时使用；</li>
<li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
</ul>
<h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p>查看容器日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> logs &lt;id/container_name&gt;</span><br></pre></td></tr></table></figure>

<p>实时查看日志输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> logs -f &lt;id/container_name&gt; (类似 tail -f) (带上时间戳-t）</span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/qq_32447301/article/details/79387649">Docker删除容器与镜像</a>  </li>
<li><a href="http://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是整洁的代码</title>
    <url>/2019/03/09/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B4%E6%B4%81%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="什么是整洁的代码"><a href="#什么是整洁的代码" class="headerlink" title="什么是整洁的代码?"></a>什么是整洁的代码?</h2><p>在软件工程这样一个庞大而多样化的领域中，持续阅读对于构件基础知识和探索分支知识至关重要。与任何行业一样，软件开发有一些必读书籍，而《代码整洁之道》就是其中之一。这本书常年出现在Google的“顶级软件工程书籍”搜索结果中， 并且在工程界广为人知。</p>
<p>这里有一些我从中学习到的知识，与大家分享一下。</p>
<span id="more"></span>

<hr>
<h3 id="对这本书的介绍"><a href="#对这本书的介绍" class="headerlink" title="对这本书的介绍"></a>对这本书的介绍</h3><p><img src="/images/Screenshot_20190307_203505.png"></p>
<p>在很多方面，《代码整洁之道》的结构像是一本代码手册。正如大多数好书一样，是一本非常自以为是的书。</p>
<p>作者马丁在这本书中描述了什么是好的编码以及怎样去重构不好的编码，以告诫那些无法分辨出编码习惯好坏的人。马丁对他的失败持开放态度。多年来阅读糟糕的代码的经历让他有意去帮助其他开发者避免危险。总之，这本书成百上千的建议会使你生产出优质的代码。也就是说，大多数工程师都在努力学习，使他的糟糕的代码变得更好。</p>
<p>但是《代码整洁之道》不仅仅是一个教程。他不仅描述了编写好代码的方式，而且写了为什么要写好代码。不仅仅是事记硬背的规则。我从中读出了一个优秀的程序员的不可侵犯的价值观。下面，我将这概括为三个关键的概念。</p>
<h4 id="1-我们要有工匠精神"><a href="#1-我们要有工匠精神" class="headerlink" title="1. 我们要有工匠精神"></a><strong>1. 我们要有工匠精神</strong></h4><p>很少会有那种从始到终都不被修改的完美代码(当然，“完美的代码”这样的说法是错误的，没有什么事物是完美的)。尽管如此，编写出尽可能最好的代码是软件工程师的首要任务。有的时候，这意味着我们要在项目进度、客户需求、管理要求、疲劳这几方面进行平衡。</p>
<p>底线：“工作”的代码并不总是“完成”。如果编码人员的工作是生产解决问题的产品，那么解决问题的方法是否重要？ 是。 从长远来看，软件做得很好，每个人都受益，包括客户，用户，公司和编码员。代码混乱，匆忙或“足够好”的代码，这是着眼于短期回报的体现。</p>
<blockquote>
<p>即使是优秀整洁的代码，在一段时间过后也会显得糟糕不堪。而且会比你预想中的要坏。</p>
</blockquote>
<p>马丁认为，编写整洁的代码的关键是高质量的输入（周全，可维护，灵活的代码），可以产生高质量的输出（长期业务收益）。</p>
<h4 id="2-你今天的努力可以减轻日后的负担"><a href="#2-你今天的努力可以减轻日后的负担" class="headerlink" title="2. 你今天的努力可以减轻日后的负担"></a><strong>2. 你今天的努力可以减轻日后的负担</strong></h4><p>我们所有人都经历过使用低质量产品所带来的失望。想象一下，​​在洗衣机中几分钟就会磨损边缘的新衬衫，或者是在你的孩子将它从包装盒中取出后立即打破的塑料玩具。制作精良的代码也是这样，它在边缘处的碎片速度比您预期的要快得多。(所以我们需要边界值测试)</p>
<p>你可以试着跟一些质量很好的东西进行比较。有一双鞋我每天都穿，并且穿了十年，这几天终于破了。这双鞋比其他鞋子贵一点，但它的质量是不可否认的，从长远来看，我省钱了。当时间终于把这些鞋扔出去时，我又买了一双相同的对，因为我知道这双鞋又会陪伴我十年。</p>
<p>同样的原则适用于代码。高质量的输入不仅可以产生更持久的输出，还可以节省资金并建立客户忠诚度。精心重构和测试您的代码可能需要更长的时间，但技术债务和可维护性的节省非常值得额外的努力。</p>
<h4 id="3-你的代码不只是你自己的"><a href="#3-你的代码不只是你自己的" class="headerlink" title="3. 你的代码不只是你自己的"></a><strong>3. 你的代码不只是你自己的</strong></h4><p>以自己的工作为荣，这很重要。 认识到你编写的代码不是你自己的代码同样重要。</p>
<blockquote>
<p>过于聪明的技巧，黑客和程序手的技巧只对作者有趣。</p>
</blockquote>
<p>这可能看起来有点悖论 - 毕竟，编写干净的代码需要您与其质量相媲美。 但好的代码并不是真的，因为它的目的是供他人使用：你的队友，你的客户，甚至你未来的自我。 当一些未来的项目维护者（甚至可能是你自己）无法理解为什么你用你的方式写东西时会发生什么？ 毫无疑问，他们必须花费宝贵的时间和精力来解读你为他们留下的谜题。</p>
<hr>
<h3 id="什么是整洁的代码？"><a href="#什么是整洁的代码？" class="headerlink" title="什么是整洁的代码？"></a>什么是整洁的代码？</h3><p>每个人都有他(她)独自的如何编写整洁的代码的列表。事实上，马丁的书中有各种各样的软件名人给出的整洁的代码的定义集合。根据我在本书中学到的内容，我的定义如下：</p>
<ol>
<li><p>整洁的代码是简单的。在算法或系统级复杂性方面可能并不简单，但在实现方面肯定很简单。 过于聪明的技巧，黑客和程序手的技巧只对作者有趣，并削弱了代码的长期价值。 对于冗长的代码来说也是如此，需要永远才能达到目的。</p>
</li>
<li><p>整洁的代码是可读性强的。如果程序中使用的命名约定，间距，结构和流程不是为读者而设计的，那么该读者几乎肯定无法理解原作者的意图。 关于如何编写可读代码的约定可能看似教条或缺乏表达性，但它们有助于使代码公共而不是晦涩难懂的。</p>
</li>
<li><p>整洁的代码是体贴的。没有尽力告知未来读者的代码是不尊重他们时间的代码。 清洁代码的编写应该假设未来的消费者是聪明的，有思想的专业人士（像你一样），它应该不遗余力地帮助他们。</p>
</li>
<li><p>简洁的代码是经过测的。没有人能够在第一次就写出没有BUG的代码。即使假如能够做到，没人能保证这完美的代码在之后不会出错。写出整洁的代码代表着写出经过测试的代码。这样，未来的用户可以确信他们正在和有效的软件进行交互。此外，在进行修改时，他们还会有一个现成的测试组件，以确保程序没有问题。</p>
</li>
<li><p>持续践行写出整洁的代码。编写整洁的代码需要良好的肌肉记忆，就像玩乐器，踢球或煎蛋一样。学习编写整洁代码的最佳方法。更重要的是，坚持做下去。当你在家里从事个人项目时，即使没人会看你的代码，你也要用整洁的代码来做。</p>
</li>
<li><p>整洁的代码是被无情地重构出来的。清洁代码应该处于不断的重构状态。而你需要有一个很好的测试套件来备份你的代码，你可以随心所欲地重构它，从不担心破损。</p>
</li>
<li><p>整洁的代码是SOLID。整洁的代码同时也是整洁的设计，遵循SOLID原则是确保你的代码具有灵活性、可维护性、和持久性的方法。</p>
</li>
</ol>
<blockquote>
<p>在 程序设计领域， SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）是由罗伯特·C·马丁在21世纪早期引入的记忆术首字母缩略字，指代了面向对象编程和面向对象设计的五个基本原则。当这些原则被一起应用时，它们使得一个程序员开发一个容易进行软件维护和扩展的系统变得更加可能。 SOLID所包含的原则是通过引发编程者进行软件源代码的代码重构进行软件的代码异味清扫，从而使得软件清晰可读以及可扩展时可以应用的指南。SOLID被典型的应用在测试驱动开发上，并且是敏捷开发以及自适应软件开发的基本原则的重要组成部分。</p>
</blockquote>
<p>如果我们将马丁的书作为圣经，那么“整洁”的属性可以成倍增加。但仔细阅读《代码整洁之道》后，这个清单是一个很好的起点。坚持这些原则需要不断关注细节，并愿意承认你昨天所写的内容今天仍然可以改进，即使这段代码运行的很好得很好。</p>
<hr>
<p>尽管《代码整洁之道》包含了大量有用的规则和最佳实践，但它对读者所蕴含的心态可能更有用，我们要有工匠精神，你今天的努力可以减轻日后的负担，你的代码不只是你自己的。编码员阅读的越多，世界代码就越整洁，我们的所有工作都会变得更容易。</p>
<h2 id="译者的话"><a href="#译者的话" class="headerlink" title="译者的话"></a>译者的话</h2><p>之前翻译的那几篇太多链接了，无法发到微信公众号等平台，然后就找了一篇没什么链接的文章。我翻译了大概四五天，每天一个小时。英语不好实在是。。。下次不敢再翻译文字这么多的文章了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://medium.com/s/story/reflections-on-clean-code-8c9b683277ca">What Is Clean Code?</a></p>
<h2 id="每日一图"><a href="#每日一图" class="headerlink" title="每日一图"></a>每日一图</h2><p><img src="/images/photo_2019-03-09_10-10-45.jpg"></p>
<p>George Bellows “Giant Sky” 1913</p>
]]></content>
      <tags>
        <tag>优雅</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 docker 快速部署 Redis</title>
    <url>/2019/05/11/%E4%BD%BF%E7%94%A8-docker-%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2-Redis/</url>
    <content><![CDATA[<h2 id="正常的使用-docker-命令部署的方法"><a href="#正常的使用-docker-命令部署的方法" class="headerlink" title="正常的使用 docker 命令部署的方法"></a>正常的使用 docker 命令部署的方法</h2><p>因为分布式爬虫需要用到 redis ， 所以我就试着搭建一个 redis 用于学习学习</p>
<h3 id="最简单的启动方法"><a href="#最简单的启动方法" class="headerlink" title="最简单的启动方法"></a>最简单的启动方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> run --name my-redis -d redis</span><br></pre></td></tr></table></figure>

<ul>
<li>-d 是让容器在后台启动  </li>
<li>–name my-redis 为这容器命名</li>
<li>redis 镜像名</li>
</ul>
<span id="more"></span>

<h3 id="以持久化方式启动"><a href="#以持久化方式启动" class="headerlink" title="以持久化方式启动"></a>以持久化方式启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> run --name my-redis -v ./data:/data -d redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure>

<ul>
<li>-v .&#x2F;data:&#x2F;data 将持久化的数据映射出容器外</li>
<li>redis-server –appendonly yes 容器的执行命令，这里就是 redis 的持久化启动命令</li>
</ul>
<h3 id="映射-redis-的-6379-端口"><a href="#映射-redis-的-6379-端口" class="headerlink" title="映射 redis 的 6379 端口"></a>映射 redis 的 6379 端口</h3><p>要是不映射出来的话，只能在 docker 容器内访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> run --name my-redis -p 6379:6379 -v $(<span class="built_in">pwd</span>)/data:/data -d redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure>



<h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><blockquote>
<p>注意，客户端也要安装 redis 才能使用 redis-cli 命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$redis</span>-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>

<p>看来我是成功了？？</p>
<p><img src="/images/Screenshot_20190511_152444.png" alt="oo"></p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo + Github Pages搭建个人独立博客</title>
    <url>/2019/03/10/%E4%BD%BF%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>之前在弄这个博客的时候踩了一些坑，也看了一些教程，今天试着总结成一篇文章。整个过程我只是做过四五次，所以有什么问题还请大家指出。</p>
<p>效果<br><a href="https://www.niracler.com/">https://www.niracler.com</a></p>
<blockquote>
<p>注意： 我这里是在linux系统上搭建的，所以win上搭建会有点不一样，不过大致都差不多。</p>
</blockquote>
<span id="more"></span>

<h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="什么是-Github-Pages"><a href="#什么是-Github-Pages" class="headerlink" title="什么是 Github Pages?"></a>什么是 Github Pages?</h3><p>Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。Github Pages 支持 自动利用 Jekyll 生成站点，也同样支持纯 HTML 文档，将你的 Jekyll 站 点托管在 Github Pages 上是一个不错的选择。</p>
<h3 id="安装相关工具"><a href="#安装相关工具" class="headerlink" title="安装相关工具"></a>安装相关工具</h3><h4 id="安装Node-js以及Git"><a href="#安装Node-js以及Git" class="headerlink" title="安装Node.js以及Git"></a>安装Node.js以及Git</h4><p>首先，你要先确保自己的系统中已经安装了下面这些应用程序，Hexo是基于Node.js的，而Git则是用来上传文件到github上的工具：</p>
<ul>
<li>Node.js</li>
<li>Git</li>
</ul>
<p>检验是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p><img src="/images/Screenshot_20190310_165122.png"></p>
<h4 id="换源，使用cnpm源"><a href="#换源，使用cnpm源" class="headerlink" title="换源，使用cnpm源"></a>换源，使用cnpm源</h4><p>因为在国内直接用npm实在是太慢了，所以我选择使用淘宝的源，而用cnpm命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org   </span><br></pre></td></tr></table></figure>

<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h3><h4 id="创建并进入blog文件夹"><a href="#创建并进入blog文件夹" class="headerlink" title="创建并进入blog文件夹"></a>创建并进入blog文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>

<h4 id="初始化hexo基础配置文件"><a href="#初始化hexo基础配置文件" class="headerlink" title="初始化hexo基础配置文件"></a>初始化hexo基础配置文件</h4><blockquote>
<p>初始化时间可能会比较长。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>目录结构<br><img src="/images/Screenshot_20190310_170440.png"></p>
<h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h4 id="加载hexo基础html、css、js等文件。"><a href="#加载hexo基础html、css、js等文件。" class="headerlink" title="加载hexo基础html、css、js等文件。"></a>加载hexo基础html、css、js等文件。</h4><p>在这完成后等于已经在本地创建了一个网页，想查看的话，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/images/Screenshot_20190310_170719.png"></p>
<p>然后相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。</p>
<p><img src="/images/Screenshot_20190310_170838.png"></p>
<h3 id="在github上创建并设置远程库"><a href="#在github上创建并设置远程库" class="headerlink" title="在github上创建并设置远程库"></a>在github上创建并设置远程库</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>名字必须是 用户名.github.io,这里是因为我已经有这仓库了</p>
<p><img src="/images/Screenshot_20190310_193709.png"></p>
<h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>我们总共有两个分支，master和hexo。之所以要有这两个分支，是为了在电脑出问题的时候或者换新的电脑以后才能快速的恢复blog环境。hexo分支存储的是该项目，而master分支存储的是hexo生成的静态文件。</p>
<p><img src="/images/Screenshot_20190310_193901.png"></p>
<h4 id="设置hexo为默认分支"><a href="#设置hexo为默认分支" class="headerlink" title="设置hexo为默认分支"></a>设置hexo为默认分支</h4><p><img src="/images/Screenshot_20190310_193917.png"></p>
<h4 id="将项目克隆到本地"><a href="#将项目克隆到本地" class="headerlink" title="将项目克隆到本地"></a>将项目克隆到本地</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/(用户名)/(仓库名).git:克隆到本地</span><br></pre></td></tr></table></figure>

<h4 id="将文件复制到blog文件夹中"><a href="#将文件复制到blog文件夹中" class="headerlink" title="将文件复制到blog文件夹中"></a>将文件复制到blog文件夹中</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/(用户名)/(仓库名).git</span><br><span class="line">$ cp -r (仓库名)/.git blog/.git</span><br></pre></td></tr></table></figure>

<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>可以到下面这个网站看看有什么喜欢的主题,然后安装。</p>
<p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>在项目的_config.yml中配置自己的主题</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>现在打开<a href="http://localhost:4000/">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。当然，这是我经过配置后的主题。</p>
<p><img src="/images/Screenshot_20190310_202804.png"></p>
<h3 id="发布hexo到github-page"><a href="#发布hexo到github-page" class="headerlink" title="发布hexo到github page"></a>发布hexo到github page</h3><h4 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h4><p>在项目的_config.yml中配置自己的远程仓库地址</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Niracler/niracler.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h4 id="提交项目，部署"><a href="#提交项目，部署" class="headerlink" title="提交项目，部署"></a>提交项目，部署</h4><p>安装部署工具（方便以后更新）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>这里有几个坑需要注意一下：</p>
<blockquote>
<p>1、所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。<br>2、language是设置语言。zh-CN是中文。  </p>
</blockquote>
<h4 id="生成静态文件并上传到github仓库"><a href="#生成静态文件并上传到github仓库" class="headerlink" title="生成静态文件并上传到github仓库"></a>生成静态文件并上传到github仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d <span class="comment">#等于一次性执行了，清空、刷新、部署三个命令</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于日常修改博客的时候，应该首先用 <code>git add . </code> , <code>git commit -m “…”</code> , <code>git push origin hexo</code>　将内容保存至github中，然后才用 <code>hexo g -d</code> 部署博客</p>
<h4 id="Hexo常用的几个命令："><a href="#Hexo常用的几个命令：" class="headerlink" title="Hexo常用的几个命令："></a>Hexo常用的几个命令：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate <span class="comment">#(hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹  </span></span><br><span class="line">$ hexo server <span class="comment">#(hexo s) 启动本地web服务，用于博客的预览  </span></span><br><span class="line">$ hexo deploy <span class="comment">#(hexo d) 部署播客到远端（比如github, heroku等平台）  </span></span><br></pre></td></tr></table></figure>

<h4 id="另外还有其他几个常用命令："><a href="#另外还有其他几个常用命令：" class="headerlink" title="另外还有其他几个常用命令："></a>另外还有其他几个常用命令：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">$ hexo new draft <span class="string">&quot;postName&quot;</span> <span class="comment">#新建草稿</span></span><br><span class="line">$ hexo publish <span class="string">&quot;postName&quot;</span> <span class="comment">#发布草稿</span></span><br></pre></td></tr></table></figure>

<h4 id="常用简写"><a href="#常用简写" class="headerlink" title="常用简写"></a>常用简写</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo n == hexo new</span><br><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<h4 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g <span class="comment">#生成部署</span></span><br><span class="line">$ hexo s -g <span class="comment">#生成预览</span></span><br></pre></td></tr></table></figure>

<h3 id="这仅仅是一个开始"><a href="#这仅仅是一个开始" class="headerlink" title="这仅仅是一个开始"></a>这仅仅是一个开始</h3><p>虽然我上面已经说了这么多了，但这只是一个开始，你还要选好主题，还有对主题进行无数的优化，还要用自己的域名什么的。我就不写了，直接在下面给这些链接你们去看吧。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.jianshu.com/p/a39573555039">使用hexo+github免费搭建个人博客网站超详细教程</a></li>
<li><a href="https://github.com/nodejh/nodejh.github.io/issues/37">使用 Hexo 创建项目文档网站</a></li>
<li><a href="https://jinzequn.github.io/2018/01/24/github-hexo/">blog+github备份和恢复</a></li>
<li><a href="http://www.mdslq.cn/archives/f186e832.html">Hexo博客Next主题打开过慢的解决办法</a></li>
<li><a href="https://www.jianshu.com/p/59e8d170346d">使用hexo+github搭建个人博客遇到过哪些坑</a></li>
<li><a href="https://www.jianshu.com/p/0deb70e6f395">npm换源</a></li>
<li><a href="http://www.cubemister.com/Blog/2016/10/04/Hexo-%E7%BC%96%E5%86%99%E5%92%8C%E5%8F%91%E5%B8%83%E8%8D%89%E7%A8%BF/">Hexo - 编写和发布草稿</a></li>
<li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html">hexo的next主题个性化教程:打造炫酷网站</a></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker搭建hadoop伪分布式</title>
    <url>/2019/03/29/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAhadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F/</url>
    <content><![CDATA[<p>这篇文章应该算是我大数据系列的第一篇文章吧,路漫漫其修远兮，我本来不想这么快就往大数据方向前进的，只是这边项目需要，不得不学。本文章对新手极不友好。前置技能有很多，你总得安装个docker吧,还要了解Docker常用命令, 以及Dockerfile，docker-compose的使用。我的<a href="https://www.niracler.com/2019/03/14/%E4%B8%8D%E9%80%9A%E7%94%A8%E7%9A%84Python%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5/">不通用的Python程序员练级攻略</a>里有相应的学习资料。而该项目的地址是 <a href="https://github.com/Niracler/bigdata-exercise">https://github.com/Niracler/bigdata-exercise</a></p>
<p>这篇文章主要讲的是使用docker搭建hadoop伪分布式的细节，假如觉得麻烦的话，有更简便的方法。我这里先说为敬,或者你们可以先试试成功的喜悦。</p>
<p>将这个项目克隆下来，我的Dockerfile都是基于<a href="https://github.com/big-data-europe/docker-hadoop">这个项目</a>改写的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/Niracler/bigdata-exercise.git</span><br><span class="line"><span class="variable">$cd</span> bigdata-exercise/docker-hadoop/</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> su</span><br><span class="line"><span class="variable">$docker</span>-compose -f docker-compose-local.yml up -d</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:50070/">http://localhost:50070/</a> 效果</p>
<p><img src="/images/Screenshot_20190329_103435.png"></p>
<p>进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> <span class="built_in">exec</span> -it namenode bash</span><br></pre></td></tr></table></figure>

<p>上传文件测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$touch</span> <span class="built_in">test</span></span><br><span class="line"><span class="variable">$hdfs</span> dfs -put <span class="built_in">test</span>  /</span><br><span class="line"><span class="variable">$hdfs</span> dfs -ls /</span><br></pre></td></tr></table></figure>

<p><img src="/images/Screenshot_20190410_104008.png"></p>
<p>然后？就没有然后了，下面是dockerfile等文件的细节</p>
<span id="more"></span>
<hr>
<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>你要先在该目录结构下</p>
<p><img src="/images/Screenshot_20190329_080604.png"></p>
<h3 id="构建hadoop-base镜像"><a href="#构建hadoop-base镜像" class="headerlink" title="构建hadoop-base镜像"></a>构建hadoop-base镜像</h3><p>hadoop-base的Dockerfile，之后具体的Dockerfile都是基于该Dockerfile,该Dockerfile的主要工作是下载jdk与hadoop</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8</span><br><span class="line">MAINTAINER Niracler &lt;niracler@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并安装hadoop http://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz</span></span><br><span class="line">ENV HADOOP_VERSION 2.7.7</span><br><span class="line">ENV HADOOP_URL http://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-<span class="variable">$HADOOP_VERSION</span>/hadoop-<span class="variable">$HADOOP_VERSION</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压，放到指定位置，并删除</span></span><br><span class="line">RUN <span class="built_in">set</span> -x \</span><br><span class="line">    &amp;&amp; curl -fSL <span class="string">&quot;<span class="variable">$HADOOP_URL</span>&quot;</span> -o /tmp/hadoop.tar.gz \</span><br><span class="line">    &amp;&amp; tar -xvf /tmp/hadoop.tar.gz -C /opt/ \</span><br><span class="line">    &amp;&amp; rm /tmp/hadoop.tar.gz*</span><br><span class="line"></span><br><span class="line">RUN ln -s /opt/hadoop-<span class="variable">$HADOOP_VERSION</span>/etc/hadoop /etc/hadoop</span><br><span class="line">RUN cp /etc/hadoop/mapred-site.xml.template /etc/hadoop/mapred-site.xml</span><br><span class="line">RUN mkdir /opt/hadoop-<span class="variable">$HADOOP_VERSION</span>/logs</span><br><span class="line"></span><br><span class="line">RUN mkdir /hadoop-data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV HADOOP_PREFIX=/opt/hadoop-<span class="variable">$HADOOP_VERSION</span></span><br><span class="line">ENV HADOOP_CONF_DIR=/etc/hadoop</span><br><span class="line">ENV MULTIHOMED_NETWORK=1</span><br><span class="line"></span><br><span class="line">ENV USER=root</span><br><span class="line">ENV PATH <span class="variable">$HADOOP_PREFIX</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加启动文件</span></span><br><span class="line">ADD entrypoint.sh /entrypoint.sh</span><br><span class="line">RUN chmod a+x /entrypoint.sh</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;/entrypoint.sh&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>启动文件entrypoint.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set some sensible defaults</span></span><br><span class="line"><span class="built_in">export</span> CORE_CONF_fs_defaultFS=<span class="variable">$&#123;CORE_CONF_fs_defaultFS:-hdfs://`hostname -f`:8020&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">addProperty</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> path=<span class="variable">$1</span></span><br><span class="line">  <span class="built_in">local</span> name=<span class="variable">$2</span></span><br><span class="line">  <span class="built_in">local</span> value=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">local</span> entry=<span class="string">&quot;&lt;property&gt;&lt;name&gt;<span class="variable">$name</span>&lt;/name&gt;&lt;value&gt;<span class="variable">$&#123;value&#125;</span>&lt;/value&gt;&lt;/property&gt;&quot;</span></span><br><span class="line">  <span class="built_in">local</span> escapedEntry=$(<span class="built_in">echo</span> <span class="variable">$entry</span> | sed <span class="string">&#x27;s/\//\\\//g&#x27;</span>)</span><br><span class="line">  sed -i <span class="string">&quot;/&lt;\/configuration&gt;/ s/.*/<span class="variable">$&#123;escapedEntry&#125;</span>\n&amp;/&quot;</span> <span class="variable">$path</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">configure</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> path=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> module=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">local</span> envPrefix=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> var</span><br><span class="line">    <span class="built_in">local</span> value</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Configuring <span class="variable">$module</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> `printenv | perl -sne <span class="string">&#x27;print &quot;$1 &quot; if m/^$&#123;envPrefix&#125;_(.+?)=.*/&#x27;</span> -- -envPrefix=<span class="variable">$envPrefix</span>`; <span class="keyword">do</span></span><br><span class="line">        name=`<span class="built_in">echo</span> <span class="variable">$&#123;c&#125;</span> | perl -pe <span class="string">&#x27;s/___/-/g; s/__/@/g; s/_/./g; s/@/_/g;&#x27;</span>`</span><br><span class="line">        var=<span class="string">&quot;<span class="variable">$&#123;envPrefix&#125;</span>_<span class="variable">$&#123;c&#125;</span>&quot;</span></span><br><span class="line">        value=<span class="variable">$&#123;!var&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; - Setting <span class="variable">$name</span>=<span class="variable">$value</span>&quot;</span></span><br><span class="line">        addProperty /etc/hadoop/<span class="variable">$module</span>-site.xml <span class="variable">$name</span> <span class="string">&quot;<span class="variable">$value</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configure /etc/hadoop/core-site.xml core CORE_CONF</span><br><span class="line">configure /etc/hadoop/hdfs-site.xml hdfs HDFS_CONF</span><br><span class="line">configure /etc/hadoop/yarn-site.xml yarn YARN_CONF</span><br><span class="line">configure /etc/hadoop/httpfs-site.xml httpfs HTTPFS_CONF</span><br><span class="line">configure /etc/hadoop/kms-site.xml kms KMS_CONF</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$MULTIHOMED_NETWORK</span>&quot;</span> = <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Configuring for multihomed network&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HDFS</span></span><br><span class="line">    addProperty /etc/hadoop/hdfs-site.xml dfs.namenode.rpc-bind-host 0.0.0.0</span><br><span class="line">    addProperty /etc/hadoop/hdfs-site.xml dfs.namenode.servicerpc-bind-host 0.0.0.0</span><br><span class="line">    addProperty /etc/hadoop/hdfs-site.xml dfs.namenode.http-bind-host 0.0.0.0</span><br><span class="line">    addProperty /etc/hadoop/hdfs-site.xml dfs.namenode.https-bind-host 0.0.0.0</span><br><span class="line">    addProperty /etc/hadoop/hdfs-site.xml dfs.client.use.datanode.hostname <span class="literal">true</span></span><br><span class="line">    addProperty /etc/hadoop/hdfs-site.xml dfs.datanode.use.datanode.hostname <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># YARN</span></span><br><span class="line">    addProperty /etc/hadoop/yarn-site.xml yarn.resourcemanager.bind-host 0.0.0.0</span><br><span class="line">    addProperty /etc/hadoop/yarn-site.xml yarn.nodemanager.bind-host 0.0.0.0</span><br><span class="line">    addProperty /etc/hadoop/yarn-site.xml yarn.nodemanager.bind-host 0.0.0.0</span><br><span class="line">    addProperty /etc/hadoop/yarn-site.xml yarn.timeline-service.bind-host 0.0.0.0</span><br><span class="line"></span><br><span class="line">    <span class="comment"># MAPRED</span></span><br><span class="line">    addProperty /etc/hadoop/mapred-site.xml yarn.nodemanager.bind-host 0.0.0.0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$GANGLIA_HOST</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    mv /etc/hadoop/hadoop-metrics.properties /etc/hadoop/hadoop-metrics.properties.orig</span><br><span class="line">    mv /etc/hadoop/hadoop-metrics2.properties /etc/hadoop/hadoop-metrics2.properties.orig</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> module <span class="keyword">in</span> mapred jvm rpc ugi; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.class=org.apache.hadoop.metrics.ganglia.GangliaContext31&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.period=10&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.servers=<span class="variable">$GANGLIA_HOST</span>:8649&quot;</span></span><br><span class="line">    <span class="keyword">done</span> &gt; /etc/hadoop/hadoop-metrics.properties</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> module <span class="keyword">in</span> namenode datanode resourcemanager nodemanager mrappmaster jobhistoryserver; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.sink.ganglia.class=org.apache.hadoop.metrics2.sink.ganglia.GangliaSink31&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.sink.ganglia.period=10&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.sink.ganglia.supportsparse=true&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.sink.ganglia.slope=jvm.metrics.gcCount=zero,jvm.metrics.memHeapUsedM=both&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.sink.ganglia.dmax=jvm.metrics.threadsBlocked=70,jvm.metrics.memHeapUsedM=40&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$module</span>.sink.ganglia.servers=<span class="variable">$GANGLIA_HOST</span>:8649&quot;</span></span><br><span class="line">    <span class="keyword">done</span> &gt; /etc/hadoop/hadoop-metrics2.properties</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$@</span></span><br></pre></td></tr></table></figure>

<p>构建hadoop-base镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> build -t=<span class="string">&quot;hadoop-base&quot;</span> ./base</span><br></pre></td></tr></table></figure>

<h3 id="构建hadoop-namenode"><a href="#构建hadoop-namenode" class="headerlink" title="构建hadoop-namenode"></a>构建hadoop-namenode</h3><p>hadoop-namenode的Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM hadoop-base</span><br><span class="line">MAINTAINER niracler &lt;niracler@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">HEALTHCHECK CMD curl -f http://localhost:50070/ || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line">ENV HDFS_CONF_dfs_namenode_name_dir=file:///hadoop/dfs/name</span><br><span class="line">RUN mkdir -p /hadoop/dfs/name</span><br><span class="line">VOLUME /hadoop/dfs/name</span><br><span class="line"></span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod a+x /run.sh</span><br><span class="line"></span><br><span class="line">EXPOSE 50070</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/run.sh&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>启动文件run.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">namedir=`<span class="built_in">echo</span> <span class="variable">$HDFS_CONF_dfs_namenode_name_dir</span> | perl -pe <span class="string">&#x27;s#file://##&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$namedir</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Namenode name directory not found: <span class="variable">$namedir</span>&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$CLUSTER_NAME</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Cluster name not specified&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;`ls -A <span class="variable">$namedir</span>`&quot;</span> == <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Formatting namenode name directory: <span class="variable">$namedir</span>&quot;</span></span><br><span class="line">  <span class="variable">$HADOOP_PREFIX</span>/bin/hdfs --config <span class="variable">$HADOOP_CONF_DIR</span> namenode -format <span class="variable">$CLUSTER_NAME</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$HADOOP_PREFIX</span>/bin/hdfs --config <span class="variable">$HADOOP_CONF_DIR</span> namenode</span><br></pre></td></tr></table></figure>

<p>构建hadoop-namenode镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> build -t=<span class="string">&quot;hadoop-namenode&quot;</span> ./namenode</span><br></pre></td></tr></table></figure>

<h3 id="构建hadoop-datanode"><a href="#构建hadoop-datanode" class="headerlink" title="构建hadoop-datanode"></a>构建hadoop-datanode</h3><p>hadoop-datanode的Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM hadoop-base</span><br><span class="line">MAINTAINER niracler &lt;niracler@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">HEALTHCHECK CMD curl -f http://localhost:50075/ || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line">ENV HDFS_CONF_dfs_datanode_data_dir=file:///hadoop/dfs/data</span><br><span class="line">RUN mkdir -p /hadoop/dfs/data</span><br><span class="line">VOLUME /hadoop/dfs/data</span><br><span class="line"></span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod a+x /run.sh</span><br><span class="line"></span><br><span class="line">EXPOSE 50075</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/run.sh&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>启动文件run.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">datadir=`<span class="built_in">echo</span> <span class="variable">$HDFS_CONF_dfs_datanode_data_dir</span> | perl -pe <span class="string">&#x27;s#file://##&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$datadir</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Datanode data directory not found: <span class="variable">$datadir</span>&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$HADOOP_PREFIX</span>/bin/hdfs --config <span class="variable">$HADOOP_CONF_DIR</span> datanode</span><br></pre></td></tr></table></figure>

<p>构建hadoop-datanode镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> build -t=<span class="string">&quot;hadoop-datanode&quot;</span> ./datanode</span><br></pre></td></tr></table></figure>

<h3 id="构建hadoop-nodemanager"><a href="#构建hadoop-nodemanager" class="headerlink" title="构建hadoop-nodemanager"></a>构建hadoop-nodemanager</h3><p>hadoop-nodemanager的Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM hadoop-base</span><br><span class="line">MAINTAINER Niracler &lt;niracler@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">HEALTHCHECK CMD curl -f http://localhost:8042/ || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod a+x /run.sh</span><br><span class="line"></span><br><span class="line">EXPOSE 8042</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/run.sh&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>启动文件run.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$HADOOP_PREFIX</span>/bin/yarn --config <span class="variable">$HADOOP_CONF_DIR</span> nodemanager</span><br></pre></td></tr></table></figure>

<p>构建hadoop-nodemanager</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> build -t=<span class="string">&quot;hadoop-nodemanager&quot;</span> ./nodemanager</span><br></pre></td></tr></table></figure>

<h3 id="构建hadoop-resourcemanager"><a href="#构建hadoop-resourcemanager" class="headerlink" title="构建hadoop-resourcemanager"></a>构建hadoop-resourcemanager</h3><p>hadoop-resourcemanager的Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM hadoop-base</span><br><span class="line">MAINTAINER niracler &lt;niracler@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">HEALTHCHECK CMD curl -f http://localhost:8088/ || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod a+x /run.sh</span><br><span class="line"></span><br><span class="line">EXPOSE 8088</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/run.sh&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>启动文件run.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$HADOOP_PREFIX</span>/bin/yarn --config <span class="variable">$HADOOP_CONF_DIR</span> resourcemanager</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> build -t=<span class="string">&quot;hadoop-resourcemanager&quot;</span> ./resourcemanager</span><br></pre></td></tr></table></figure>

<h3 id="构建hadoop-historyserver"><a href="#构建hadoop-historyserver" class="headerlink" title="构建hadoop-historyserver"></a>构建hadoop-historyserver</h3><p>hadoop-historyserver的Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM hadoop-base</span><br><span class="line">MAINTAINER niracler &lt;niracler@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">HEALTHCHECK CMD curl -f http://localhost:8188/ || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line">ENV YARN_CONF_yarn_timeline___service_leveldb___timeline___store_path=/hadoop/yarn/timeline</span><br><span class="line">RUN mkdir -p /hadoop/yarn/timeline</span><br><span class="line">VOLUME /hadoop/yarn/timeline</span><br><span class="line"></span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod a+x /run.sh</span><br><span class="line"></span><br><span class="line">EXPOSE 8188</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/run.sh&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>启动文件run.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$HADOOP_PREFIX</span>/bin/yarn --config <span class="variable">$HADOOP_CONF_DIR</span> historyserver</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> build -t=<span class="string">&quot;hadoop-historyserver&quot;</span> ./historyserver</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CORE_CONF_fs_defaultFS=hdfs://namenode:8020</span><br><span class="line">CORE_CONF_hadoop_http_staticuser_user=root</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_hosts=*</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_groups=*</span><br><span class="line"></span><br><span class="line">HDFS_CONF_dfs_webhdfs_enabled=true</span><br><span class="line">HDFS_CONF_dfs_permissions_enabled=false</span><br><span class="line"></span><br><span class="line">YARN_CONF_yarn_log___aggregation___enable=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_recovery_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_store_class=org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore</span><br><span class="line">YARN_CONF_yarn_resourcemanager_fs_state___store_uri=/rmstate</span><br><span class="line">YARN_CONF_yarn_nodemanager_remote___app___log___dir=/app-logs</span><br><span class="line">YARN_CONF_yarn_log_server_url=http://historyserver:8188/applicationhistory/logs/</span><br><span class="line">YARN_CONF_yarn_timeline___service_enabled=true</span><br><span class="line">YARN_CONF_yarn_timeline___service_generic___application___history_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_system___metrics___publisher_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_hostname=resourcemanager</span><br><span class="line">YARN_CONF_yarn_timeline___service_hostname=historyserver</span><br><span class="line">YARN_CONF_yarn_resourcemanager_address=resourcemanager:8032</span><br><span class="line">YARN_CONF_yarn_resourcemanager_scheduler_address=resourcemanager:8030</span><br><span class="line">YARN_CONF_yarn_resourcemanager_resource___tracker_address=resourcemanager:8031</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>这里使用docker-compose,docker-compose-loc.yml内容如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namenode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hadoop-namenode</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">namenode</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/namenode:/hadoop/dfs/name</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CLUSTER_NAME=test</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;50070:50070&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resourcemanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hadoop-resourcemanager</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">resourcemanager</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">resourcemanager</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">historyserver:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hadoop-historyserver</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">historyserver</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">historyserver</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/historyserver:/hadoop/yarn/timeline</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nodemanager1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hadoop-nodemanager</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">nodemanager1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nodemanager1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;resourcemanager&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;resourcemanager&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datanode1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hadoop-datanode</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">datanode1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">datanode1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/datanode1:/hadoop/dfs/data</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datanode2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hadoop-datanode</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">datanode2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">datanode2</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/datanode2:/hadoop/dfs/data</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datanode3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hadoop-datanode</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">datanode3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">datanode3</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/datanode3:/hadoop/dfs/data</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span>-compose -f docker-compose-local.yml up -d</span><br></pre></td></tr></table></figure>

<h3 id="访问-http-localhost-50070-效果"><a href="#访问-http-localhost-50070-效果" class="headerlink" title="访问 http://localhost:50070/ 效果"></a>访问 <a href="http://localhost:50070/">http://localhost:50070/</a> 效果</h3><p><img src="/images/Screenshot_20190329_100435.png"></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/xu470438000/article/details/50512442">使用docker搭建hadoop分布式集群</a>  </li>
<li><a href="https://www.jianshu.com/p/38c9e98ec481">CentOS更换阿里云YUM源</a>   </li>
<li><a href="https://github.com/big-data-europe/docker-hadoop">docker-hadoop</a>  </li>
<li><a href="https://blog.csdn.net/yjk13703623757/article/details/78943345">debian系linux，更换apt-get官方源为国内源</a>  </li>
<li><a href="https://www.howtoing.com/how-to-install-java-with-apt-get-on-debian-8">如何使用Apt-Get在Debian 8上安装Java</a>  </li>
<li><a href="https://www.jianshu.com/p/1cf26c0c9e9b">debian8无痛安装JDK8</a></li>
<li><a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz">hadoop安装</a></li>
<li><a href="https://www.cnblogs.com/fanghao/p/8542170.html">HBase Python API</a></li>
<li><a href="https://hacpai.com/article/1508232710946">基于 docker 搭建 hadoop 跨主机集群</a></li>
<li><a href="https://segmentfault.com/a/1190000012063374">Docker常用命令</a></li>
<li><a href="https://www.jianshu.com/p/df744c4e375e">使用Docker Swarm模式搭建Swarm集群</a></li>
<li><a href="https://stackoverflow.com/questions/36015864/hadoop-be-replicated-to-0-nodes-instead-of-minreplication-1-there-are-1/36310025">Hadoop: …be replicated to 0 nodes instead of minReplication (&#x3D;1). There are 1 datanode(s) running and no node(s) are excluded in this operation</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>关于python的播客推荐</title>
    <url>/2019/03/04/%E5%85%B3%E4%BA%8EPython%E7%9A%84%E6%92%AD%E5%AE%A2%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h1 id="最好的Python播客"><a href="#最好的Python播客" class="headerlink" title="最好的Python播客"></a>最好的Python播客</h1><blockquote>
<p>请注意， 是播客而不是博客</p>
</blockquote>
<p>该文章包括活跃的Python相关和软件工程相关的高质量播客介绍。</p>
<span id="more"></span>

<h2 id="Python相关的播客"><a href="#Python相关的播客" class="headerlink" title="Python相关的播客"></a>Python相关的播客</h2><p>这些播客大多都是Python开发人员，他们聊的内容大多都是我们领域一些很重要的话题。这里的大多数播客都有一个很长的系列。虽然有一些内容已经是好几年前的，不过对现在的开发也很有参考价值。</p>
<ul>
<li><p><a href="https://talkpython.fm/">Talk Python to Me</a> 专注于编写Python的人员和组织，每一集都会有不同的嘉宾来谈论他的工作</p>
</li>
<li><p><a href="http://podcastinit.com/">Podcast.<strong>init</strong></a> 提供有关Python的故事，以及“与那些让它变得更棒的人们的访谈”</p>
</li>
<li><p><a href="https://pythonbytes.fm/">Python Bytes</a> 是来自“Talk Python to Me”和“Test and Code Podcast”创作者的新播客。</p>
</li>
<li><p><a href="http://pythontesting.net/test-podcast/">Test and Code Podcast</a>  侧重于测试和相关主题，如模拟和代码度量</p>
</li>
<li><p>Philip Guo教授有一个名为<a href="http://pgbovine.net/PG-Podcast.htm">PG Podcast</a>的视频播客，通常是关于Python主题的。 所有剧集都列在单独的页面上。</p>
</li>
<li><p><a href="https://www.kennethreitz.org/import-this/">Import This</a> 是来自Kenneth Reitz和Alex Gaynor的偶尔播客，对有影响力的Python社区成员进行了非常深入的采访。</p>
</li>
</ul>
<h2 id="最喜欢的播客剧集"><a href="#最喜欢的播客剧集" class="headerlink" title="最喜欢的播客剧集"></a>最喜欢的播客剧集</h2><p>下面这些是我在听各大播客系列的过程中，我最喜欢的部分，你也可以听一下，顺带了解各个系列的播客的风格有什么区别。</p>
<p>以下是我们在下一节中深入研究整个播客建议之前从各种Python播客中收集的最喜欢的剧集列表。深入了解这些剧集，以了解播客演示中的各种个性和风格。</p>
<ul>
<li><p><a href="https://talkpython.fm/episodes/show/5/sqlalchemy-and-data-access-in-python">SQLAlchemy and data access in Python</a>  这一集采访了SQLAlchemy的创作者，让我理解了对象关系映射库SQLAlchemy如何演变。节目主持人Michael Kennedy根据他对SQLAlchemy的深入研究和先前使用情况提出了很多问题。</p>
</li>
<li><p><a href="https://talkpython.fm/episodes/show/100/python-past-present-and-future-with-guido-van-rossum">Python past, present, and future with Guido van Rossum</a> 涵盖了Python的历史，Guido创造语言的动机，并通过近三十年的发布来引导它。有趣的事实：当播客主持人迈克尔·肯尼迪问我应该谈什么话题时，关于Python是否是开源的问题促成了它的成功。</p>
</li>
<li><p><a href="https://talkpython.fm/episodes/show/26/deploying-python-web-applications-updated">Deploying Python Web Applications</a>剧透警报：这是我在Talk Python上的一集，解释了Python Web应用程序部署的工作原理。</p>
</li>
<li><p>Python Bytes在第39集中广泛讨论了 <a href="https://www.fullstackpython.com/object-relational-mappers-orms.html">object-relational mappers (ORMs)</a> ，其中很多讨论基于Full Stack Python ORM页面。谢谢大家，很高兴听到关于哪些有用，哪些对你的解释不起作用的反馈！</p>
</li>
<li><p>The <a href="https://talkpython.fm/episodes/show/16/python-at-netflix">Python at Netflix</a> 对我来说，通过带宽以及Python如何适应他们的多语言组织，在最大的互联网站点内提供了一个很棒的视图。</p>
</li>
<li><p>另一个很棒的Talk Python to Me剧集， <a href="https://talkpython.fm/episodes/show/120/python-in-finance">Python in Finance</a>，解释了Python如何在广泛的金融行业中用于股票交易，定量分析和数据分析。</p>
</li>
</ul>
<h2 id="一般软件开发的播客"><a href="#一般软件开发的播客" class="headerlink" title="一般软件开发的播客"></a>一般软件开发的播客</h2><p>这些播客并非特定于Python，而是涵盖相关的软件工程主题，并且通常包含Python主题的剧集。至少，通过倾听和学习，您将成为更好的通用软件开发人员。</p>
<ul>
<li><p><a href="https://softwareengineeringdaily.com/">Software Engineering Daily</a> 每天都会与一个不同的开发人员在一系列相关的开发主题上进行播客。</p>
</li>
<li><p><a href="https://www.allthingsgit.com/">All things Git</a> 讨论使用和构建Git的内容。</p>
</li>
<li><p><a href="https://www.codenewbie.org/podcast">CodeNewbie</a> 采访了早期软件开发历程中的开发人员，以了解他们编程原因及其工作原理。还有经验丰富的开发人员建立知名项目的采访。</p>
</li>
<li><p><a href="http://developeronfire.com/">Developer on Fire</a> 采访程序员，建筑师和测试人员，讲述他们成功，失败和卓越的故事。</p>
</li>
<li><p><a href="https://www.redhat.com/en/command-line-heroes">Command_line Heroes</a> 涵盖操作系统级主题以及DevOps。</p>
</li>
<li><p><a href="http://embedded.fm/">Embedded.fm</a> 进入嵌入式系统和硬件黑客攻击。</p>
</li>
<li><p><a href="https://changelog.com/">The Changelog</a>是关于一般软件开发事宜的每周播客。</p>
</li>
<li><p><a href="http://www.fullstackradio.com/">Full Stack Radio</a>。与Full Stack Python无关，但另一个要检查！</p>
</li>
<li><p><a href="http://exponent.fm/">Exponent</a> 不是一个软件开发播客，但它以深入的方式涵盖了企业战略和技术的交叉，使我能够更好地理解企业在构建和发布软件时所做出的决策。我听每一集（以1.5倍的速度），非常值得花费45到60分钟听Ben Thompson和James Allworth深入了解每周话题。</p>
</li>
<li><p><a href="https://joecolantonio.com/testtalks/">Test Talks</a> 每周检查一次软件测试主题，通常是一位专注于被检查区域的特邀嘉宾。</p>
</li>
<li><p><a href="http://www.thecloudcast.net/">The Cloudcast</a> 专注于云计算和DevOps相关主题的播客</p>
</li>
</ul>
<h2 id="数据科学以及数据分析相关的播客"><a href="#数据科学以及数据分析相关的播客" class="headerlink" title="数据科学以及数据分析相关的播客"></a>数据科学以及数据分析相关的播客</h2><p>数据科学社区不仅使用Python作为其核心编程语言，而且在几乎每个执行数据分析的组织中都发挥着重要作用。 以下播客广泛涵盖数据科学，并且具体到相应工具的使用。</p>
<ul>
<li><p><a href="https://www.datacamp.com/community/podcast">DataFramed</a> 是一个数据科学博客，涵盖的内容包括数据科学相关Python库的使用</p>
</li>
<li><p><a href="https://www.dataskeptic.com/">Data Skeptic</a> 涵盖数据科学，统计，机器学习，人工智能，以及“科学怀疑论”等内容</p>
</li>
<li><p><a href="http://datastori.es/">Data stories</a> 是一个关于数据可视化的播客</p>
</li>
<li><p><a href="http://partiallyderivative.com/">Partially Derivative</a> 是一个机器学习，人工智能和数据社区的播客。 他们在2017年末完成了他们的最后一集，但剧集列表包含大量现有内容。</p>
</li>
</ul>
<h2 id="译者的话"><a href="#译者的话" class="headerlink" title="译者的话"></a>译者的话</h2><p>因为我通常会在路上听音频，我昨天翻译目录的时候偶然发现这个播客的列表， 然后我今天就饶有兴趣地来翻译了(虽然只是google translate)。不过仅仅是用Google翻译的话， 实在是什么都学不了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.fullstackpython.com/best-python-podcasts.html">Best Python Podcasts</a> 原文</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>翻译</tag>
        <tag>fullstackpython</tag>
      </tags>
  </entry>
  <entry>
    <title>原来这才是科幻</title>
    <url>/2019/03/02/%E5%8E%9F%E6%9D%A5%E8%BF%99%E6%89%8D%E6%98%AF%E7%A7%91%E5%B9%BB/</url>
    <content><![CDATA[<h2 id="原来这才是科幻"><a href="#原来这才是科幻" class="headerlink" title="原来这才是科幻"></a>原来这才是科幻</h2><blockquote>
<p>几经波折， 我算是将《三体》三部曲看完了， 这篇文章是我对《三体》的狗屁不通的读后感</p>
</blockquote>
<p>世界这么大，而我却天天在对着鸡毛蒜皮的事情斤斤计较。</p>
<h3 id="我为什么想看《三体》这本书？"><a href="#我为什么想看《三体》这本书？" class="headerlink" title="我为什么想看《三体》这本书？"></a>我为什么想看《三体》这本书？</h3><p>我第一次认识《三体》这本书应该算是很久之前了，大概是五六年前。那时候有一个书商来我们高中卖书，而我那时候也挺喜欢买书的，是的，我喜欢买书的时候的那种购物的快感。而我的一个高中同学又恰好喜欢看书，然后他就向我推荐了《三体》，他算是我认识的人里面最喜欢看书的了，各种作品都看，不过更倾向于看悬疑以及侦探类的小说。说实在的，我确实不是一个喜欢看书的人，我只是喜欢看书给我带来的提高逼格的感觉， 以及我看的大多都是接近于爽文一类的。</p>
<p>于是，在我那同学的带动下，我也买了一套《三体》。而我真正意义上去看这套书，是我大三的这个寒假。大概一年前吧，我在《得到》上看到这本书的怀沙的解读，于是我就听了一下。怀沙解读的很好，将《三体》归结为十五个思想实验，但那时候我是没有看过《三体》的，所以很快就忘了。我仅仅记得第二部里面的黑暗森林法则。让我真正看完这部作品的原因有很多，而真正让我深入去看的契机是，这个寒假陪我父母去看了《流浪地球》。</p>
<span id="more"></span>

<h3 id="我心目中认为的科幻"><a href="#我心目中认为的科幻" class="headerlink" title="我心目中认为的科幻"></a>我心目中认为的科幻</h3><p>我是真的被《流浪地球》震撼到了，里面从“太阳急速衰老膨胀”这样一个小小的基点，而想象到了将地球推出太阳系的宏伟而壮观的景象。我不由得赞叹了一句“原来我一直没有看过科幻作品，无论是电影还是小说”。这确实算的上是中国科幻产业的里程碑吧。</p>
<p>基于一个与现实不一样的基础，然后进行理性推演，然后再得出的故事发展。这是我看完《流浪地球》这电影后得出来的自己对科幻的理解。</p>
<h3 id="我需要介绍一下《三体》这本书么？"><a href="#我需要介绍一下《三体》这本书么？" class="headerlink" title="我需要介绍一下《三体》这本书么？"></a>我需要介绍一下《三体》这本书么？</h3><p>我第一本《地球往事》看的是实体书，因为我家里就有。第二本是在kindle看的，因为我寒假的时候买了一台kindle，为了尝鲜。而第三本是在微信阅读上看的。我之前听过怀沙的解读，算是已经被剧透了，所以我看这本书的过程中，我的心理波动异常地少。</p>
<p>人的一生是如此之短， 而我们又是如此之渺小。 这算是我看完《死神永生》的最深刻的感想。</p>
<p>我总是很喜欢看故事，尤其是那些我永远也无法触及的故事更为让我神往，或许这就是我如此喜欢看动漫的原因吧。每每我看完了一部作品，作品中人物的故事，便成为了我的故事。但其实不是这样的，这只是一种错觉，错以为我们能够对作品里面的人物感同身受，感同身受的前提是有极为相似的过去，显然，更多的时候我是无法对作品中的人物做到感同身受的。</p>
<h3 id="没写过读后感的人其实很难写好读后感"><a href="#没写过读后感的人其实很难写好读后感" class="headerlink" title="没写过读后感的人其实很难写好读后感"></a>没写过读后感的人其实很难写好读后感</h3><p>是的， 我这篇文章大多只是我与三体这本书的流水账的故事。而且看上去显然没有写完， 总感觉无论怎样写，都写不出《三体》带给我的震撼感。</p>
]]></content>
      <tags>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>摘抄加感想是阅读的好方法</title>
    <url>/2019/03/16/%E6%91%98%E6%8A%84%E5%8A%A0%E6%84%9F%E6%83%B3%E6%98%AF%E9%98%85%E8%AF%BB%E7%9A%84%E5%A5%BD%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>看了《如何有效阅读一本书》后，感觉我多年以来看的书都浪费了<br>经过总结,这本书的重点讲述的阅读方法就是摘抄加感想</p>
</blockquote>
<p><img src="/images/Screenshot_20190315_214135.png"></p>
<span id="more"></span>

<h2 id="摘抄加感想"><a href="#摘抄加感想" class="headerlink" title="摘抄加感想"></a>摘抄加感想</h2><blockquote>
<p>“无论在手机里保存多少本书，书里的内容都不会被保存在脑子里。用这本书的关键词来比喻的话，就是这些内容既不能融入你的身心，也不能变成你无形的财富。与之相反，尽管抄完全书也不一定会记住全部内容，但某段文章、某个词、作者的语气和思想等等， 都会随着抄写时的身体感觉被深深地刻印在头脑和身体中”</p>
</blockquote>
<p>像是我这种有资源收集癖的人，总是喜欢以量来取胜，却不重其质。我电脑有无数的学习书籍但基本一本都没看过，我网盘有无数的电影，而我只看过寥寥几部，我steam有60个游戏，而在线的时间超过一个小时的游戏却只有那么三四个。确实，认真地阅读一本书，哪怕是笨拙地阅读一本书，也会比囫囵吞枣地阅读20本书要好。</p>
<hr>
<blockquote>
<p>“具体来讲，就是将想读的书和读过的书都记在同一个笔记本里，不设分册。”</p>
</blockquote>
<p>我竟然也摸索到这种做法了，我现在无论是上什么课，都是带同一本笔记本。不过我还有一些是没有做好的，像是我的github项目分的太乱了，我今天整理的时候都晕了。</p>
<hr>
<blockquote>
<p>“通过记录掌握选书主动权”<br>“制作购书清单的第二个理由就是，它能帮自己找到真正想读的书。”<br>“仔细想想，我们之所以会买那些根本不读的书，根本原因就是冲动购买。总是想着这本书或许有用”</p>
</blockquote>
<p>我看前面的时候，我还在好奇“这本书为什么总是在强调我们应该如何购书？”。</p>
<p>怎么说呢，对于我来说，我的问题是我买回来的书太多了，而真正看了的又很少。我是一个“买书如山倒，读书如抽丝”的人。应该作者强调的是我们应该先买哪一本书，哪一些书是值得买，哪一些书是不值得买的吧？</p>
<p>而现在看到这段我才发现，原来是我 <strong>“没有找到选书的主动权”</strong> 。现在想来，生活也是如此，什么都喜欢也就相当于什么都不喜欢。就像我们看动画，有的人说这一部好看，然后我们就去看这一部了，然后又有人说那一部好看，然后我们又去看那一部了，但其实我们没有足够的精力去做那些 <strong>“别人说是应该做的事情”</strong> 。也不是说我们不应该去听别人的意见，而是应该先验证一下自己的行为是否真的有问题，是否别人的意见会使你有决定性的改变，没有问题没有决定性的改变的话，就继续先做好自己想做以及正在做的事情。在此之后，才将别人的意见纳入考虑范围中。</p>
<p>“你看，那边的女生太漂亮了。”<br>“哦，是很漂亮，但我的心现在已经住不下第二个了。”  </p>
<hr>
<blockquote>
<p>“好奇心固然很重要，但如果不随时记录下来，也只会是一个漫不经心的小想法。瞬间的思考就像沸水里的气泡，只会出现一瞬间如果马上把想法记下来，就算字迹再潦草，也比什么都不记好的多。以后看到这段笔记，可以从这个小小的想法展开思考，说不定能得到一个绝妙的创意。”</p>
</blockquote>
<p>这个我也深有体会。灵感总是像一场梦，睡醒了，也就什么都忘了。我补充一句，灵感的爆发总是在比较闲而心情比较舒畅的时候。焦虑的时候大脑总是在思考正在焦虑的事情，而忙的时候，大脑总是在思考正在忙的事情。不过我认为太闲也是不会有灵感的，因为太闲的时候连思考都不会思考了。灵感总是在忙碌过后，心情舒畅的时候迸发出来。</p>
<hr>
<blockquote>
<p>“一切都应该以‘能坚持下去’为先”</p>
</blockquote>
<p>好吧，这就是我每天只做一点点的理由，但也不能太少哦。</p>
<hr>
<blockquote>
<p>“当你决定以写读书笔记为前提去买书、读书的时候，对读书的认识也会发生巨大的转变。”</p>
</blockquote>
<p>我之前总是买一堆书而又不读，总是以为我买了这本书就一定回去看。但其实才不是这样的，我家有很大一部分的书都在积尘。现在想来，我买书这个行为，可能只是一种单纯的消费欲望。恩，就是冲动消费。</p>
<hr>
<blockquote>
<p>“在记录感想时，不要想一些揣测或者外来的想法，而是要写写自己的心声，也就是感受和想法，这样会让读书笔记更有内涵。”</p>
</blockquote>
<p>好吧，我就是那种没有内涵的人，我之前写读后感的时候，很多都是引用别人的感想。不过在用了这本书的在摘抄后写感想的方法，我倒是能写出挺多内容的。</p>
<hr>
<blockquote>
<p>“等一下，不写上这个人是哪里厉害，为什么厉害的话，下次再读到这句就会看不懂吧？”</p>
</blockquote>
<p>是的是的，说话不能过于笼统，太过概括性的话说了感觉等于没说。我就是这样只会说“很厉害”的人。。。</p>
<hr>
<blockquote>
<p>“需要注意的是，千万不要为了坚持写读书笔记而走形式主义。不管采用什么方式，都要脚踏实地地写笔记，并真正理解书的内容。”</p>
</blockquote>
<p>前几天有个同学看见我微信推文曾经发过一百多篇表示有点惊讶。其实我也是挺惊讶的，不过细看那一百多篇，现在看来，其质量实在是惨不忍睹，也可能是时间长了之后，我能更客观地看待我之前所写的文章吧。我那时候为了能够每天写出一篇微信推文，确实渐渐地走上了形式主义的道路上了。我现在为了把控文章质量，宁愿一周少写几篇。</p>
<hr>
<blockquote>
<p>“摘抄和评论交替进行，是为了在摘抄之后，趁着印象还鲜明写下自己的感想。要是等摘抄完所有文章再去从头开始按顺序写评论，一定会忘记之前看文章时的感想。就像每做完一道数学题都要马上对答案一样，自己的思考也要立即落实到纸上。”</p>
</blockquote>
<p>我认为 <strong>摘抄加感想</strong> 是这本书中让我收益最多的方法。现在想来，像是以前， <strong>“我看完一本书然后盖上，来写”</strong> ， 这简直就是荒唐，内容我都忘得七七八八了，我还感想个*。</p>
<hr>
<blockquote>
<p>“只摘抄对自己来说很重要的文章。因为即使是客观上很重要，而眼前的信息无法与自己正在感性层面上产生共鸣，那再读多少次也不会有感想。”</p>
</blockquote>
<p>这就是我不应该抄目录的原因。</p>
<hr>
<blockquote>
<p>“为了向对方传达自己想说的内容，我们会自觉地将原来杂论无章的想法组织起来，然后才能通顺地说出来或写出来。由此可见，向别人表达自己的想法可算是最常见的思想输出。哪怕是你自认为非常了解的事情，一旦需要像别人说明或写下来，还是会出现很多模糊不清的内容。正因为这样，演讲和写作都需要经过全面的准备才能开始。”</p>
</blockquote>
<blockquote>
<p>“人并不是因为无所不知而去发表演讲或出书，而是通过演讲和出书让自己达到了新的高度，成为某一领域内的专家。”</p>
</blockquote>
<p>所以我觉得写博客以及写文档是一个较好的内容输出的途径，我也是为了让自己能够 <strong>“真正明白某一件事情”</strong> ，而试着跟同学们讨论。但同时又很害怕自己会在表达的时候有什么差错。我们写的博客，要写成除了博主其他人都能容易理解才行。我写的博客经常就是只有我自己一个人能看懂。。。</p>
<hr>
<h2 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h2><ol>
<li><p>没有经过加工的想法很快就会消失。我总是缺乏对我看过的作品的深入思考，我是否应该在看小说的时候，问一下“这个角色为什么会有这种行为？”。</p>
</li>
<li><p>原来，读书过程中是不需要做笔记的，尽管读下去就好，但是需要做一下标注，当你看完的时候要回过头来做笔记。</p>
</li>
<li><p>这本书的年代是有点久远了，起码是十年前的那种水平。因为书中基本只是讲实体书该怎么读，而今天电子书已经普遍盛行了。我的话，我基本上现在只会看电子书了。就像微信阅读什么的，我就挺喜欢，因为在上面我可以跟各个喜好同一本书的人进行交流。</p>
</li>
<li><p>对美的东西的欣赏需要全神贯注。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我认为这本书是有重点的，重点就是 <strong>摘抄加感想</strong> 。而且一本书至少要读两次，第一次标记自己认为的有感觉的段落，第二次就是对这些标记的段落进行摘抄，而在摘抄的过程中对所摘抄的段落进行评论，也就是写感想。然后这样就会异常的印象深刻而且也会有独到的想法了。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络|概述</title>
    <url>/2019/03/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<blockquote>
<p>学校内容这一系列,我主要是用来整理学校学习的笔记的，大概会更新到学期末，然后才会推送到其他平台</p>
</blockquote>
<h2 id="重要内容"><a href="#重要内容" class="headerlink" title="重要内容"></a>重要内容</h2><h3 id="因特网的边缘部分和核心部分的作用"><a href="#因特网的边缘部分和核心部分的作用" class="headerlink" title="因特网的边缘部分和核心部分的作用"></a>因特网的边缘部分和核心部分的作用</h3><p>边缘部分： 有所有连接在互联网上的主机组成。这部分是用户直接使用的，用来通信(传送数据、音频或视频)和资源共享。</p>
<p>核心部分： 有大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的。</p>
<span id="more"></span>

<h3 id="分组交换的概念"><a href="#分组交换的概念" class="headerlink" title="分组交换的概念"></a>分组交换的概念</h3><blockquote>
<p>我认为分组交换一定要与电路交换、报文交换等作对比才能凸显其特点的</p>
</blockquote>
<p>电路交换：整个报文的比特流连续地从源点直达到终点，好像在一个管道中传输。</p>
<p>报文交换：整个报文先传输到相邻结点，全部存储下来后查找转发表，转发到下一个结点。</p>
<p>分组交换：单个分组(这只是整个报文)传送到相邻结点，存储下来后查找转发表，转发到下一个结点。</p>
<h3 id="计算机网络的一些性能指标"><a href="#计算机网络的一些性能指标" class="headerlink" title="计算机网络的一些性能指标"></a>计算机网络的一些性能指标</h3><ol>
<li><p>速率：数据传输的速率</p>
</li>
<li><p>带宽：单位时间内网络中的某信道所能通过的“最高数据率”</p>
</li>
<li><p>时延：分为四种时延，发送时延、传播时延、处理时延、排队时延<br>  发送时延：主机或路由器发送数据帧所需要的时间<br>  传播时延：电磁波在信道中传播一定的距离所花费的时间<br>  处理时延：主机或路由器在收到分组时要花费一定的时间进行处理。<br>  排队时延：分组在进入路由器后要先在输入队列中排队等待处理  </p>
</li>
<li><p>时延带宽积 &#x3D; 传播时延 * 带宽</p>
</li>
<li><p>吞吐量：单位时间内通过某个网络（或信道、接口）的实际的数据量。</p>
</li>
<li><p>往返时间RTT：网络传输往返一次所需要的时间</p>
</li>
<li><p>利用率：分为信道利用率和网络利用率</p>
</li>
</ol>
<h3 id="计算机网络分层次的体系结构"><a href="#计算机网络分层次的体系结构" class="headerlink" title="计算机网络分层次的体系结构"></a>计算机网络分层次的体系结构</h3><p>应用层：通过应用进程间的交互来完成特定的网络应用</p>
<p>传输层：负责向两台主机中进程之间的通信提供通用的数据传输服务</p>
<p>网络层：负责为分组交换网上</p>
<p>链路层：凸出数据部分，上交给网络层</p>
<p>物理层：物理层的任务就是透明地传送比特流（注意：传递信息的物理媒体，如双绞线、同轴电缆、光缆等，实在物理层的下面，当做第0层）物理层还需要确定连接电缆插头的定义及连接法。</p>
<h3 id="协议与服务的概念"><a href="#协议与服务的概念" class="headerlink" title="协议与服务的概念"></a>协议与服务的概念</h3><p>  协议是水平的，而服务是垂直的</p>
<h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><h3 id="计算机网络可以向用户提供哪些服务？"><a href="#计算机网络可以向用户提供哪些服务？" class="headerlink" title="计算机网络可以向用户提供哪些服务？"></a>计算机网络可以向用户提供哪些服务？</h3><p>连通性和共享性</p>
<h3 id="简述分组交换的要点"><a href="#简述分组交换的要点" class="headerlink" title="简述分组交换的要点"></a>简述分组交换的要点</h3><ol>
<li>报文分组，加首部</li>
<li>经路由器存储转发</li>
<li>在目的地合并</li>
</ol>
<h3 id="试从多个方面比较电路交换、报文交换和分组交换的优缺点？"><a href="#试从多个方面比较电路交换、报文交换和分组交换的优缺点？" class="headerlink" title="试从多个方面比较电路交换、报文交换和分组交换的优缺点？"></a>试从多个方面比较电路交换、报文交换和分组交换的优缺点？</h3><ul>
<li>电路交换：端对端通信质量因约定了通信资源而获得了可靠保障，对连续大量数据效率高</li>
<li>报文交换：无需预约传输带宽，动态逐段利用传输带宽，对突发性数据通信效率高</li>
<li>分组交换：具有报文交换之高效、迅速的要点，且各分组小，路由灵活，网络生存性能好</li>
</ul>
<h3 id="为什么说因特网是自印刷术以来人类通信方面最大的变革？"><a href="#为什么说因特网是自印刷术以来人类通信方面最大的变革？" class="headerlink" title="为什么说因特网是自印刷术以来人类通信方面最大的变革？"></a>为什么说因特网是自印刷术以来人类通信方面最大的变革？</h3><p>融合其他通信网络，在信息化过程中起核心作用，提供最好的连通性和信息共享，第一次提供了各种媒体形式的实时交互能力</p>
<h3 id="因特网的发展大致分为哪几个阶段？请指出这三个阶段的主要特点"><a href="#因特网的发展大致分为哪几个阶段？请指出这三个阶段的主要特点" class="headerlink" title="因特网的发展大致分为哪几个阶段？请指出这三个阶段的主要特点"></a>因特网的发展大致分为哪几个阶段？请指出这三个阶段的主要特点</h3><ul>
<li>从单个网络APPANET向互联网发展</li>
<li>TCP&#x2F;IP协议的初步成型</li>
<li>建成三级结构的Internet</li>
<li>分为主干网、地区网和校园网</li>
<li>形成多层次ISP结构的Internet</li>
<li>ISP首次出现</li>
</ul>
<h3 id="简述因特网标准制定的几个阶段？"><a href="#简述因特网标准制定的几个阶段？" class="headerlink" title="简述因特网标准制定的几个阶段？"></a>简述因特网标准制定的几个阶段？</h3><ol>
<li>因特网草案(Inter Draft)–在这个阶段还不是RFC文档</li>
<li>建议标准(Proposed Standard)–从这个阶段开始就成为RFC文档</li>
<li>标准草案(Draft Standard)</li>
<li>因特网标准(Internet Standard)</li>
</ol>
<h3 id="小写和大写开头的英文名-internet-和-Internet-在意思上有何重要区别"><a href="#小写和大写开头的英文名-internet-和-Internet-在意思上有何重要区别" class="headerlink" title="小写和大写开头的英文名 internet 和 Internet 在意思上有何重要区别?"></a>小写和大写开头的英文名 internet 和 Internet 在意思上有何重要区别?</h3><ol>
<li>internet(互联网或互连网):通用名词,它泛指由多个计算机网络互连而成的网络, 协议无特指</li>
<li>Internet(因特网):专用名词,特指采用TCP&#x2F;IP协议的互联网络.</li>
<li>区别:后者实际上是前者的双向应用</li>
</ol>
<h3 id="计算机网路都有哪些类型-各种类型的网络都有哪些特点"><a href="#计算机网路都有哪些类型-各种类型的网络都有哪些特点" class="headerlink" title="计算机网路都有哪些类型?各种类型的网络都有哪些特点?"></a>计算机网路都有哪些类型?各种类型的网络都有哪些特点?</h3><p>按范围:</p>
<ol>
<li>广域网WAN:远程,高速,是Internet的核心网</li>
<li>城域网:城市范围,链接多个局域网</li>
<li>局域网:校园,企业,机关,社区</li>
<li>个域网PAN:个人电子设备</li>
</ol>
<p>按用户:</p>
<ol>
<li>公用网:面向公共营运</li>
<li>专用网:面向特定机构</li>
</ol>
<h3 id="计算机网络中的主干网和本地接入网的主要区别是什么"><a href="#计算机网络中的主干网和本地接入网的主要区别是什么" class="headerlink" title="计算机网络中的主干网和本地接入网的主要区别是什么?"></a>计算机网络中的主干网和本地接入网的主要区别是什么?</h3><p>主干网:提供远程覆盖\高速传输\和路由器最优化通信<br>本地接入网:主要支持用户的接入本地,实现散户接入,速率低</p>
<h3 id="试在下列条件下比较电路交换和分组交换"><a href="#试在下列条件下比较电路交换和分组交换" class="headerlink" title="试在下列条件下比较电路交换和分组交换"></a>试在下列条件下比较电路交换和分组交换</h3><p>要传输的报文共x(bit)。从源点到终点共经过k段链路，每段链路的传播时延为d(s)，数据率为b(b&#x2F;s)。在电路交换时电路的建立时间为s(s)。在分组交换时分组长度为p(bit),且各结点的排队时间可忽略不计。<strong>问在什么情况下,分组交换的时延比电路交换的要小?</strong>  </p>
<p>答：线路交换时延：kd+x&#x2F;b+s,  分组交换时延：kd+(x&#x2F;p)*(p&#x2F;b)+ (k-1)*(p&#x2F;b)，其中(k-1)*(p&#x2F;b)表示K段传输中，有(k-1)次的储存转发延迟，当s&gt;(k-1)*(p&#x2F;b)时，电路交换的时延比分组交换的时延大，当x&gt;&gt;p,相反。</p>
<h3 id="若打算使总的时延为最小，问分组的数据部分长度p应取为多大？"><a href="#若打算使总的时延为最小，问分组的数据部分长度p应取为多大？" class="headerlink" title="若打算使总的时延为最小，问分组的数据部分长度p应取为多大？"></a>若打算使总的时延为最小，问分组的数据部分长度p应取为多大？</h3><p>在上题的分组交换网中，设报文长度和分组长度分别为x和(p+h)(bit),其中p为分组的数据部分的长度，而h为每个分组所带的控制信息固定长度，与p的大小无关。通信的两端共经过k段链路。链路的数据率为b(b&#x2F;s)，但传播时延和结点的排队时间均可忽略不计。若打算使总的时延为最小，问分组的数据部分长度p应取为多大？</p>
<p>答：总时延D表达式，分组交换时延为：D&#x3D; kd+(x&#x2F;p)*((p+h)&#x2F;b)+ (k-1)*(p+h)&#x2F;b  D对p求导后，令其值等于0，求得p&#x3D;[(xh)&#x2F;(k-1)]^0.5</p>
<h3 id="因特网的两大组成部分-边缘部分与核心部分-的特点是什么？它们的工作方式各有什么特点？"><a href="#因特网的两大组成部分-边缘部分与核心部分-的特点是什么？它们的工作方式各有什么特点？" class="headerlink" title="因特网的两大组成部分(边缘部分与核心部分)的特点是什么？它们的工作方式各有什么特点？"></a>因特网的两大组成部分(边缘部分与核心部分)的特点是什么？它们的工作方式各有什么特点？</h3><ul>
<li>边缘部分：由各主机构成，用户直接进行信息处理和信息共享。低速连入核心网</li>
<li>核心部分：有各路由器连网，负责为边缘部分提供高速远程分组交换</li>
</ul>
<h3 id="客户服务器与对等通信方式的主要区别是什么？有没有相同的地方？"><a href="#客户服务器与对等通信方式的主要区别是什么？有没有相同的地方？" class="headerlink" title="客户服务器与对等通信方式的主要区别是什么？有没有相同的地方？"></a>客户服务器与对等通信方式的主要区别是什么？有没有相同的地方？</h3><p>前者严格区分服务与被服务者，后者无此区别。后者实际上是前者的双向应用</p>
<h3 id="计算机网络有哪些常用的性能指标？"><a href="#计算机网络有哪些常用的性能指标？" class="headerlink" title="计算机网络有哪些常用的性能指标？"></a>计算机网络有哪些常用的性能指标？</h3><p>速率、带宽、吞吐量、时延、时延带宽积， 往返时间RTT、利用率</p>
<h3 id="假定网络利用率达到了90-，-试估计一下现在的网络时延是它的最小值的多少倍？"><a href="#假定网络利用率达到了90-，-试估计一下现在的网络时延是它的最小值的多少倍？" class="headerlink" title="假定网络利用率达到了90%， 试估计一下现在的网络时延是它的最小值的多少倍？"></a>假定网络利用率达到了90%， 试估计一下现在的网络时延是它的最小值的多少倍？</h3><p>设网络利用率为U，网络时延为D，网络时延最小值为D0U&#x3D;90%；D&#x3D;D0&#x2F;(1-U)—-&gt;D&#x2F; D0&#x3D;10 现在的网络时延是最小值的10倍</p>
<h3 id="计算机通信网有哪些非性能特征？非性能特征与性能特征有什么区别？"><a href="#计算机通信网有哪些非性能特征？非性能特征与性能特征有什么区别？" class="headerlink" title="计算机通信网有哪些非性能特征？非性能特征与性能特征有什么区别？"></a>计算机通信网有哪些非性能特征？非性能特征与性能特征有什么区别？</h3><ul>
<li>非性能特征：宏观整体评价网络的外在表现。</li>
<li>性能指标：具体定量描述网络的技术性能</li>
</ul>
<h3 id="收发两端之间的传输距离为1000km，信号在媒体上的传播速率为2×108m-x2F-s。试计算以下两种情况的发送时延和传播时延："><a href="#收发两端之间的传输距离为1000km，信号在媒体上的传播速率为2×108m-x2F-s。试计算以下两种情况的发送时延和传播时延：" class="headerlink" title="收发两端之间的传输距离为1000km，信号在媒体上的传播速率为2×108m&#x2F;s。试计算以下两种情况的发送时延和传播时延："></a>收发两端之间的传输距离为1000km，信号在媒体上的传播速率为2×108m&#x2F;s。试计算以下两种情况的发送时延和传播时延：</h3><ol>
<li>数据长度为107bit,数据发送速率为100kb&#x2F;s。</li>
<li>数据长度为103bit,数据发送速率为1Gb&#x2F;s。</li>
</ol>
<p>从上面的计算中可以得到什么样的结论？<br>解：</p>
<ol>
<li>发送时延：ts&#x3D;107&#x2F;105&#x3D;100s传播时延tp&#x3D;106&#x2F;(2×108)&#x3D;0.005s</li>
<li>发送时延：ts &#x3D;103&#x2F;109&#x3D;1µs传播时延：tp&#x3D;106&#x2F;(2×108)&#x3D;0.005s</li>
</ol>
<p>结论：若数据长度大而发送速率低，则在总的时延中，发送时延往往大于传播时延。但若数据长度短而发送速率高，则传播时延就可能是总时延中的主要成分。</p>
<h3 id="假设信号在媒体上的传播速度为2×108m-x2F-s-媒体长度L分别为："><a href="#假设信号在媒体上的传播速度为2×108m-x2F-s-媒体长度L分别为：" class="headerlink" title="假设信号在媒体上的传播速度为2×108m&#x2F;s.媒体长度L分别为："></a>假设信号在媒体上的传播速度为2×108m&#x2F;s.媒体长度L分别为：</h3><ol>
<li>10cm（网络接口卡）</li>
<li>100m（局域网）</li>
<li>100km（城域网）</li>
<li>5000km（广域网）</li>
</ol>
<p>试计算出当数据率为1Mb&#x2F;s和10Gb&#x2F;s时在以上媒体中正在传播的比特数。<br>解：</p>
<ol>
<li>1Mb&#x2F;s:<br>  传播时延&#x3D;0.1&#x2F;(2×108)&#x3D;5×10-10<br>  比特数&#x3D;5×10-10×1×106&#x3D;5×10-4</li>
</ol>
<p>  1Gb&#x2F;s:<br>  比特数&#x3D;5×10-10×1×109&#x3D;5×10-1</p>
<ol>
<li>1Mb&#x2F;s:<br>  传播时延&#x3D;100&#x2F;(2×108)&#x3D;5×10-7<br>  比特数&#x3D;5×10-7×1×106&#x3D;5×10-1</li>
</ol>
<p>  1Gb&#x2F;s:<br>  比特数&#x3D;5×10-7×1×109&#x3D;5×102</p>
<ol>
<li>1Mb&#x2F;s:<br>  传播时延&#x3D;100000&#x2F;(2×108)&#x3D;5×10-4<br>  比特数&#x3D;5×10-4×1×106&#x3D;5×102</li>
</ol>
<p>  1Gb&#x2F;s:<br>  比特数&#x3D;5×10-4×1×109&#x3D;5×105</p>
<ol>
<li>1Mb&#x2F;s:<br>  传播时延&#x3D;5000000&#x2F;(2×108)&#x3D;2.5×10-2<br>  比特数&#x3D;2.5×10-2×1×106&#x3D;5×104</li>
</ol>
<p>  1Gb&#x2F;s:<br>  比特数&#x3D;2.5×10-2×1×109&#x3D;5×107</p>
<h3 id="长度为100字节的应用层数据交给传输层传送，需加上20字节的TCP首部。"><a href="#长度为100字节的应用层数据交给传输层传送，需加上20字节的TCP首部。" class="headerlink" title="长度为100字节的应用层数据交给传输层传送，需加上20字节的TCP首部。"></a>长度为100字节的应用层数据交给传输层传送，需加上20字节的TCP首部。</h3><p>再交给网络层传送，需加上20字节的IP首部。最后交给数据链路层的以太网传送，加上首部和尾部工18字节。试求数据的传输效率。数据的传输效率是指发送的应用层数据除以所发送的总数据（即应用数据加上各种首部和尾部的额外开销）。若应用层数据长度为1000字节，数据的传输效率是多少？</p>
<ol>
<li>100&#x2F;（100+20+20+18）&#x3D;63.3%</li>
<li>1000&#x2F;（1000+20+20+18）&#x3D;94.5%</li>
</ol>
<h3 id="网络体系结构为什么要采用分层次的结构？试举出一些与分层体系结构的思想相似的日常生活"><a href="#网络体系结构为什么要采用分层次的结构？试举出一些与分层体系结构的思想相似的日常生活" class="headerlink" title="网络体系结构为什么要采用分层次的结构？试举出一些与分层体系结构的思想相似的日常生活"></a>网络体系结构为什么要采用分层次的结构？试举出一些与分层体系结构的思想相似的日常生活</h3><p>分层的好处：  </p>
<ol>
<li>各层之间是独立的。某一层可以使用下一层提供的服务而不需要知道服务是如何实现的</li>
<li>灵活性好。当某一层发生变化时，只要其接口关系不变，则这一层以上或以下的各层君不受影响</li>
<li>结构上可分隔开。各层可以采用最适合的技术来实现</li>
<li>易于实现和维护</li>
<li>能促进标准化工作。</li>
</ol>
<p>与分层体系结构的思想相似的日常生活有邮政系统，物流系统</p>
<h3 id="协议与服务有何区别？有何关系？"><a href="#协议与服务有何区别？有何关系？" class="headerlink" title="协议与服务有何区别？有何关系？"></a>协议与服务有何区别？有何关系？</h3><p>网络协议：为进行网络中的数据交换而建立的规则、标准或约定。由以下三个要素组成：</p>
<ol>
<li>语法：即数据与控制信息的结构或格式</li>
<li>语义：即需要发出何种控制信息，完成何种动作以及做出何种响应。</li>
<li>同步：即事件实现顺序的详细说明。协议是控制两个对等实体进行通信的规则的集合。在协议的控制下，两个对等实体间的通信使本层能够向上一层提供服务，而要实现本层协议，还需要使用下面一层提供服务。</li>
</ol>
<p>协议和服务的概念的区分：</p>
<ol>
<li><p>协议的实现保证了能够向上一层提供服务。本层的服务用户只能看见服务而无法看见下面的协议。下面的协议对上面的服务用户是透明的。</p>
</li>
<li><p>协议是“水平的”， 即协议是控制两个对等实体进行通信的规则。但服务是“垂直的”， 即服务是由下层通过层间接口向上层提供的。上层使用所提供的服务必须与下层交换一些命令，这些命令在OSI中称为服务原语。</p>
</li>
</ol>
<h3 id="网络协议的三要素是什么？各有什么含义？"><a href="#网络协议的三要素是什么？各有什么含义？" class="headerlink" title="网络协议的三要素是什么？各有什么含义？"></a>网络协议的三要素是什么？各有什么含义？</h3><p>网络协议：为进行网络中的数据交换而建立的规则、标准或约定</p>
<ol>
<li>语法：即数据与控制信息的结构或格式。</li>
<li>语义：即需要发出何种信息，完成何种动作，做出何种响应。</li>
<li>同步：即事件实现顺序的详细说明。</li>
</ol>
<h3 id="为什么一个网络协议必须把各种不利的情况都考虑到？"><a href="#为什么一个网络协议必须把各种不利的情况都考虑到？" class="headerlink" title="为什么一个网络协议必须把各种不利的情况都考虑到？"></a>为什么一个网络协议必须把各种不利的情况都考虑到？</h3><p>因为网络协议如果不全面考虑不利情况，当情况发生变化时，协议就会保持理想状况，一直等下去！就如同两个朋友在电话中约好。下午三点在公园见面，并且约定不见不散。这个协议就是很不科学的，因为任何一方如果有耽搁了而来不了，就无法通知对方，而另一方就必须一直等下去！所以看一个计算机网络是否正确，不能只看在正常情况下是否正确，而且还必须非常仔细地检查协议能否应对各种异常情况。</p>
<h3 id="论述具有五层协议的网络体系结构的要点，包括各层的主要功能"><a href="#论述具有五层协议的网络体系结构的要点，包括各层的主要功能" class="headerlink" title="论述具有五层协议的网络体系结构的要点，包括各层的主要功能"></a>论述具有五层协议的网络体系结构的要点，包括各层的主要功能</h3><p>综合OSI和TCP&#x2F;IP的优点，采用一种原理体系结构。</p>
<p>各层的主要功能：</p>
<p>物理层：物理层的任务就是透明地传送比特流（注意：传递信息的物理媒体，如双绞线、同轴电缆、光缆等，实在物理层的下面，当做第0层）物理层还需要确定连接电缆插头的定义及连接法。</p>
<p>数据链路层：数据链路层的任务是在两个相邻结点间的线路上无差错地传输以帧（frame）为单位的数据。每一帧包括数据和必要的控制信息。</p>
<p>网络层：网络层的任务就是选择合适的路由，使发送站的传输层所传下来的分组能够正确无误地按照地址找到目的站，并交付给目的站的运输层。</p>
<p>运输层：运输层的任务是向上一层的进行通信的两个进程之间提供一个可靠的端到端服务，使它们看不见传输层一下的数据通信的细节。</p>
<p>应用层：应用层直接为用户的应用进程提供服务</p>
<h3 id="试举出日常生活中有关“透明”这种名词的例子。"><a href="#试举出日常生活中有关“透明”这种名词的例子。" class="headerlink" title="试举出日常生活中有关“透明”这种名词的例子。"></a>试举出日常生活中有关“透明”这种名词的例子。</h3><p>电视、计算机视窗操作系统、工农业产品</p>
<h3 id="试解释一下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式"><a href="#试解释一下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式" class="headerlink" title="试解释一下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式"></a>试解释一下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式</h3><ul>
<li><p>协议栈：指计算机网络体系结构采用分层模型后，每层主要功能由对等层协议的运行来实现，因而每一层可用一些主要协议来表征，几个层次画在一起很像一个栈的结构</p>
</li>
<li><p>实体：表示任何可以发送或接收信息的硬件或软件进程。</p>
</li>
<li><p>对等层：在网络体系结构中，通信双方实现同样功能的层</p>
</li>
<li><p>协议数据单元：对等层实体进行信息交换的数据单位</p>
</li>
<li><p>服务访问点：在同一系统中相邻两层的实体进行交互的地方</p>
</li>
<li><p>客户：是服务的请求方</p>
</li>
<li><p>服务器：是服务的提供方</p>
</li>
<li><p>客户-服务器方式所描述的是进程之间服务和被服务的关系。客户与服务器都是指通信中所涉及的两个应用进程。</p>
</li>
</ul>
<h3 id="试解释-everything-over-IP-和-IP-over-everything-的含义"><a href="#试解释-everything-over-IP-和-IP-over-everything-的含义" class="headerlink" title="试解释 everything over IP 和 IP over everything 的含义"></a>试解释 everything over IP 和 IP over everything 的含义</h3><p>TCP&#x2F;IP协议可以为各式各样的应用提供服务 （所谓的everything over ip）<br>允许IP协议在各式各样的网络构成的互联网上运行（所谓的ip over everything）</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>学校内容</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络|物理层</title>
    <url>/2019/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/</url>
    <content><![CDATA[<h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><h3 id="物理层要解决哪些问题？物理层的主要特点是什么？"><a href="#物理层要解决哪些问题？物理层的主要特点是什么？" class="headerlink" title="物理层要解决哪些问题？物理层的主要特点是什么？"></a>物理层要解决哪些问题？物理层的主要特点是什么？</h3><p>物理层要解决的主要问题：</p>
<ol>
<li>物理层要尽可能地屏蔽掉物理设备和传输媒体，通信手段的不同，使数据链路层感觉不到这些差异，只考虑完成本层的协议和服务</li>
<li>给其服务用户(数据链路层)在一条物理的传输媒体上传输和接收比特流(一般为串行按顺序传输的比特流)的能力，为此，物理层应该解决物理连接的建立、维持和释放的问题。</li>
<li>在两个相邻系统之间唯一地标识数据电路</li>
</ol>
<span id="more"></span>

<p>物理层的主要特点：</p>
<ol>
<li>由于在OSI之前，许多物理规程或协议已经制定出来了，而且在数据通信领域中，这些物理规程已经被许多商业化的设备所采用，加之，物理层协议涉及的范围广泛，所以至今没有按OSI的抽象模型制定一套新的物理层协议，而是沿用已存在的物理规程，将物理层确定为描述与传输接口的机械，电气，功能和规程特性</li>
<li>由于物理连接的方式很多，传输媒体的种类也很多，因此具体的物理协议相当复杂。</li>
</ol>
<h3 id="规程和协议有什么区别？"><a href="#规程和协议有什么区别？" class="headerlink" title="规程和协议有什么区别？"></a>规程和协议有什么区别？</h3><p>规程指物理层协议</p>
<h3 id="试给出数据通信系统的模型并说明其主要组成构建的作用"><a href="#试给出数据通信系统的模型并说明其主要组成构建的作用" class="headerlink" title="试给出数据通信系统的模型并说明其主要组成构建的作用"></a>试给出数据通信系统的模型并说明其主要组成构建的作用</h3><ul>
<li>源点：源点设备产生要传输的数据。源点又称为源站</li>
<li>发送器：通常源点生成的数据要通过发送器编码后才能在传输系统中进行传输</li>
<li>接收器：接收传输系统传输过来的信号，并将其转换为能够被目的设备处理的信息</li>
<li>终点：终点设备从接收器</li>
</ul>
<h3 id="试解释以下名词：数据，信号，模拟数据，模拟信号，基带信号，带通信号，数字数据，数字信号，码元，单工通信，半双工通信，串行传输，并行传输"><a href="#试解释以下名词：数据，信号，模拟数据，模拟信号，基带信号，带通信号，数字数据，数字信号，码元，单工通信，半双工通信，串行传输，并行传输" class="headerlink" title="试解释以下名词：数据，信号，模拟数据，模拟信号，基带信号，带通信号，数字数据，数字信号，码元，单工通信，半双工通信，串行传输，并行传输"></a>试解释以下名词：数据，信号，模拟数据，模拟信号，基带信号，带通信号，数字数据，数字信号，码元，单工通信，半双工通信，串行传输，并行传输</h3><ul>
<li>数据：运送信息的实体</li>
<li>信号：数据的电气的或电磁的表现</li>
<li>模拟数据：运送信息的模拟信号</li>
<li>模拟信号：连续变化的信号</li>
<li>数字信号：取值为有限的几个离散值的信号</li>
<li>数字数据：取值为不连续数值的数据</li>
<li>码元：在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形</li>
</ul>
<hr>
<p><strong>重点</strong>内容</p>
<ul>
<li><strong>单工通信</strong>：即只有一个方向的通信而没有反方向的交互</li>
<li><strong>半双工通信</strong>：即通信和双方都可以发送信息，但不能双方同时发送</li>
<li><strong>全双工通信</strong>：即通信的双方可以同时发送和接收信息</li>
</ul>
<hr>
<ul>
<li>基带信号（即基本频带信号）：来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号</li>
<li>带通信号：把基带信号进过载波调制后，将信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道）</li>
</ul>
<h3 id="物理层的接口有哪几个方面的特征？各包含些什么内容？"><a href="#物理层的接口有哪几个方面的特征？各包含些什么内容？" class="headerlink" title="物理层的接口有哪几个方面的特征？各包含些什么内容？"></a>物理层的接口有哪几个方面的特征？各包含些什么内容？</h3><ul>
<li>机械特征：指明接口所用的接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等</li>
<li>电气特性：指明在接口电缆的各条线上出现的电压范围</li>
<li>功能特征：指明某条线上出现的某一电平的电压表示何意</li>
<li>规程特性：指明对于不同功能的各种可能事件的出现顺序</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>学校内容</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何经营博客</title>
    <url>/2019/04/08/%E5%A6%82%E4%BD%95%E7%BB%8F%E8%90%A5%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这是一篇类似于笔记和读后感的文章，主要是我之前看的那本《软技能：代码之外的生存指南》的学习笔记中的如何经营博客的部分。在这部分中，我学习到了很多经营博客的小技巧，于是我想分享一下。</p>
<span id="more"></span>

<h3 id="如何经营博客"><a href="#如何经营博客" class="headerlink" title="如何经营博客"></a>如何经营博客</h3><blockquote>
<p>博客更新的频率将决定你的博客成功的速度。我强烈建议每周至少一篇的速度更新博客。以这个频率，你每年就会增加52篇博客</p>
</blockquote>
<blockquote>
<p>每周只发布高质量的内容，随着时间的推移，你的博客的品质会越来越高</p>
</blockquote>
<p>我以前总是幻想着每天能写一篇博客，于是我写出来的文章质量奇差。我的时间尺度看得太短了，看别人都是以年来做单位的，实在是过于急功近利。我现在写博客的的进程大概就是一周一篇，一般先写好草稿在修几次然后再发布。但其实即使是这种速度也不简单了，毕竟一篇优质的技术文章是如此的难能可贵。</p>
<hr>
<h3 id="关于写什么"><a href="#关于写什么" class="headerlink" title="关于写什么"></a>关于写什么</h3><blockquote>
<p>实在没什么写怎么办？解决这个问题的最好方法是提前头脑风暴出各种不同的想法，随时更新可能的博客主题清单，这样你总是保持一堆话题可供选择。</p>
</blockquote>
<p>我有一个笔记本，我所有的笔记，每一个科目的笔记都会在上面，是按照时间线索的顺序写的。怎么说呢，里面总会有很多在我空闲的时候所迸发出来的灵感什么的。但是我觉得呢，灵感这个东西，真的要在自己的大脑放松的时候才能够出来的，例如独自步行的时候、上课走神的时候、再或者没带电脑在图书馆做作业的时候。我在看电脑时，灵感是与我无缘的，因为看电脑时，总会有无数的内容塞满我的大脑，以至于我无法思考其他的事情，灵感就自然出不来了。所以我是否应该对自己约定一个时间，逃离电脑。</p>
<hr>
<blockquote>
<p>不要太担心你的文笔如何，不要太在意别人的想法。有时候你只是要写一篇博客让自己的博客有内容，并不知道这篇博客会是自己点击量最高的文章。我写过不少自己觉得很差的文章，却成为最热门的文章</p>
</blockquote>
<p>不要太在意，其实还是要在意的，尤其是我这种本来就没有什么实力的人，我基本上要使出浑身解数才能将一篇文章写好。确实，太担心文笔如何会让我写作的时候无从下手。一般这个时候，我会先写一次草稿，写草稿时尽量随意些，然后事后要修改两三遍，重阅两三遍才将其发布出来。</p>
<hr>
<blockquote>
<p>想弄清写什么，还有一个技巧，就是与别人就某个话题展开对话，甚至辩论。我经常发现自己写的最好的文章一般是先前曾与别人讨论过的。找一位朋友，就某个话题展开辩论，你就会发现这个话题得写好几页。</p>
</blockquote>
<p>对一件事情的深入思考或了解，往往是源于问题的提出。而我们一般很难对自己所遇到的事情提出问题，因为我们很多时候都是以为自己“已经搞清楚了”。但其实我们还什么都不会。</p>
<hr>
<h3 id="提升访问量"><a href="#提升访问量" class="headerlink" title="提升访问量"></a>提升访问量</h3><blockquote>
<p>我要推荐的第一个策略就是开始评论其他人的博客。找到撰写类似主题博客的开发人员，在他们的博客写下有意义的评论，只要有机会就链接自己的博客上去。</p>
</blockquote>
<p>我以前很少会进行评论，因为我认为评论是一件很麻烦的事情，以至于我现在写评论的水平实在太低了。我给我自己定了个目标，一天至少评论一次。</p>
<hr>
<h3 id="为他人增加价值"><a href="#为他人增加价值" class="headerlink" title="为他人增加价值"></a>为他人增加价值</h3><blockquote>
<p>如果你能帮助足够多的人们得到他们想要的东西，你就会得到自己想要的东西。</p>
</blockquote>
<p>所以我一直很乐于助人？？？</p>
<hr>
<blockquote>
<p>每次当你着手做某件事情的时候，无论是创建博客、截屏视频还是别的活动，你应该从它是如何为他人创造价值的角度来看待它。正如我坐在这里写这本书的时候，我时常在想，我写下的每个字是否能让你获益。我该如任何像你传递这些对你有益的信息？我如何才能为你提供价值？</p>
</blockquote>
<p>我以前写的文章的最大的失败之处就是，我所写的文章大多只是写给自己看的念念碎。只能说的上是日记。</p>
<hr>
<blockquote>
<p>什么样的内容会让你觉得最有价值？有没有那个特别的博客会让你每周都去阅读，或者哪个播客的内容如此有价值让你欲罢不能，以至于一集都不想落下？</p>
</blockquote>
<p>在我看来，能帮助到他人的文章以及能引起他人共鸣的文章是最受欢迎的。当然，能帮助到他人的人以及最能获得他人同理心的人也是最受欢迎的。我一年前写的那篇《Linux上搭建FTP》的文章竟然又被需要了，这可能是我唯一一篇算是能帮助他人解决问题的文章了。这次是一个我们学校的师弟， 时隔一年， 他们也要上这门课了， 他说这篇文章帮了他很大的忙（解决了课程设计？老师又出这个课程设计了）。然后，尴尬的事情发生了。那个师弟在我的那篇文章的基础上又问了我好几个问题， 我一个都答不上来， 真是惭愧。</p>
<p>不过说起写技术文章， 我写技术文章的数量其实是远远小于我写日记什么的数量的。当然， 最大的原因是技术文章写起来有点难， 以及我不太喜欢做实事。但是我不想再这样下去了， 我想写一些真正能够帮助到别人的文章， 同时也可以提升自己的能力。</p>
<hr>
<h3 id="培养你的社交网络"><a href="#培养你的社交网络" class="headerlink" title="培养你的社交网络"></a>培养你的社交网络</h3><blockquote>
<p>记住，如果你对别人感兴趣，他们会对你更感兴趣</p>
</blockquote>
<p>所以说，只想着自己的事情是不行的</p>
<hr>
<blockquote>
<p>你可以将自己社交网络的个人主页的链接放在你的在线介绍、博客文章的结尾或者邮件的签名档中，通过这些方式获得关注。</p>
</blockquote>
<p>链接越是多，在google上的排行就越会靠前。</p>
<hr>
<h3 id="这本书给我的任务"><a href="#这本书给我的任务" class="headerlink" title="这本书给我的任务"></a>这本书给我的任务</h3><ol>
<li><p>你喜欢的开发人员的博客有哪些？看一看你读的这些博客，试着列出这些博客的更新频率和每篇文章的平均长度。</p>
</li>
<li><p>创建一个流动的博客文章主题列表。每当有新想法，就把它添加到这个列表中。在需要写新博文的时候，文章主题就能够信守拈来。</p>
</li>
<li><p>你可以提供给自己的受众或者你的细分市场的最大的价值是什么？你认为怎样的内容对于你的受众群体而言是最有价值的？</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络|网络层</title>
    <url>/2019/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    <content><![CDATA[<h2 id="本章重要内容"><a href="#本章重要内容" class="headerlink" title="本章重要内容"></a>本章重要内容</h2><h3 id="虚拟互连网络的概念"><a href="#虚拟互连网络的概念" class="headerlink" title="虚拟互连网络的概念"></a>虚拟互连网络的概念</h3><p>所谓的互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用IP协议就可以使这些性能各异的网路在网络层上看起来是一个统一的网络。</p>
<h3 id="IP地址与物理地址的关系"><a href="#IP地址与物理地址的关系" class="headerlink" title="IP地址与物理地址的关系"></a>IP地址与物理地址的关系</h3><p>从层次的角度看，物理地址是数据链路层和物理层使用的地址，而IP地址是网络层以上各层使用的地址， 是一种逻辑地址 （称 IP 地址为逻辑地址是因为 IP 地址是用软件实现的）</p>
<p>总之，IP 地址放在 IP 数据报的首部，而硬件地址则放在 MAC 帧的首部。在网络层和网络层以上使用的是IP地址，而数据链路层及以下使用的是硬件地址。当 IP 数据报放入数据链路层的 MAC 帧中以后，整个IP数据报就成为 MAC 帧的数据，因而在数据链路层看不见数据报的IP地址。</p>
<h3 id="传统的分类的-IP-地址（包括子网掩码）和无分类域间路由选择CIDR"><a href="#传统的分类的-IP-地址（包括子网掩码）和无分类域间路由选择CIDR" class="headerlink" title="传统的分类的 IP 地址（包括子网掩码）和无分类域间路由选择CIDR"></a>传统的分类的 IP 地址（包括子网掩码）和无分类域间路由选择CIDR</h3><p>IP数据报的格式</p>
<ul>
<li>版本（4位）：指IP协议的版本</li>
<li>首部长度（4位）：可表示的最大十进制数值是15</li>
<li>区分服务（8位）：这个字段在旧标准中叫做服务类型，但实际上一直没被使用过</li>
<li>总长度（16位）：指首部和数据之和的长度</li>
<li>标识（16位）：IP软件在存储器中维持一个计数器， 每产生一个数据报，计数器就加1，并将此值附给标识字段</li>
<li>标志</li>
</ul>
<h3 id="路由选择协议的工作原理"><a href="#路由选择协议的工作原理" class="headerlink" title="路由选择协议的工作原理"></a>路由选择协议的工作原理</h3><span id="more"></span>

<h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><h3 id="网络层向上提供的服务有哪两种？试比较其优缺点"><a href="#网络层向上提供的服务有哪两种？试比较其优缺点" class="headerlink" title="网络层向上提供的服务有哪两种？试比较其优缺点"></a>网络层向上提供的服务有哪两种？试比较其优缺点</h3><p>网络层提供的服务有： “面向连接”虚电路（Virtual Circuit）服务或“无连接”数据报服务。</p>
<p>前者预约了双方通信所需要的一切网络资源。优点是能够提供服务质量的承诺。即所传送的分组不出错、丢失、重复和失序（不安序列到达终点），也保证分组传送的时限。缺点是路由复杂，网络成本高；</p>
<p>后者无网络资源障碍，尽力而为，优缺点与前后</p>
<h3 id="网络互连有何实际意义？进行网络互连时，有哪些共同的问题需要解决？"><a href="#网络互连有何实际意义？进行网络互连时，有哪些共同的问题需要解决？" class="headerlink" title="网络互连有何实际意义？进行网络互连时，有哪些共同的问题需要解决？"></a>网络互连有何实际意义？进行网络互连时，有哪些共同的问题需要解决？</h3><p>实际意义：网络互连可以扩大用户共享资源范围和更大的通信区域</p>
<p>进行网络互连时，需要解决共同的问题有：</p>
<ol>
<li>不同寻址方案最大分组长度</li>
<li>不同网络接入机制</li>
<li>不同的超时控制</li>
<li>不同的差错恢复方法</li>
<li>不同的状态报告方法</li>
<li>不同的路由选择技术</li>
<li>不同的用户接入控制</li>
<li>不同的服务（面向连接服务和无连接服务）</li>
<li>不同管理与控制方式</li>
</ol>
<h3 id="作为中间设备，转发器、网桥、路由器和网关有何区别？"><a href="#作为中间设备，转发器、网桥、路由器和网关有何区别？" class="headerlink" title="作为中间设备，转发器、网桥、路由器和网关有何区别？"></a>作为中间设备，转发器、网桥、路由器和网关有何区别？</h3><p>中间设备又称为中间系统或中继（relay）系统。</p>
<ul>
<li>物理层中继系统：转发器（repeater）</li>
<li>数据链路层层中继系统：网桥或桥接器（bridge）</li>
<li>网络层中继系统：路由器（router）</li>
<li>网桥和路由器的混合物：桥路器（brouter）</li>
<li>网络层以上的中继系统：网关（gateway）</li>
</ul>
<h3 id="试简单说明下列协议的作用：IP，-ARP，-RARP，-ICMP"><a href="#试简单说明下列协议的作用：IP，-ARP，-RARP，-ICMP" class="headerlink" title="试简单说明下列协议的作用：IP， ARP， RARP， ICMP"></a>试简单说明下列协议的作用：IP， ARP， RARP， ICMP</h3><ul>
<li>IP 协议：实现网络互连，使参与互联的性能各异的网络从用户看起来好像是一个统一的网络。网络协议 IP 是 TCP&#x2F;TP 体系中最主要的协议之一， 与 IP 协议配套使用的还有四个协议：</li>
<li>ARP 协议：是解决同一个局域网上的主机或路由器的 IP 地址和硬件地址的映射问题</li>
<li>RARP ： 是解决同一个局域网上的主机或路由器的硬件地址和 IP 地址的映射问题</li>
<li>ICMP ： 提供差错报告和询问报文， 以提高 IP 数据交付成功的机会</li>
<li>因特网组管理协议 IGMP ： 用于探寻、转发本局域网内的组成员关系</li>
</ul>
<h3 id="IP-地址分为几类？各如何表示？IP-地址的主要特点是什么？"><a href="#IP-地址分为几类？各如何表示？IP-地址的主要特点是什么？" class="headerlink" title="IP 地址分为几类？各如何表示？IP 地址的主要特点是什么？"></a>IP 地址分为几类？各如何表示？IP 地址的主要特点是什么？</h3><p>分为ABCDE五类</p>
<p>每一类地址都由两个固定长度的字段组成，其中一个字段是网络号 net-id, 它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号 host-id， 他标志该主机（或路由器）。各类地址的网络号字段 net-id 分别为1，2，3，0，0 字节；主机号字段 host-id分别为3字节、2字节、1字节、4字节、4字节。</p>
<p>特点：</p>
<ol>
<li><p>IP 地址是一种分等级的地址结构。分两个等级的好处是：第一， IP 地址管理机构在分配 IP 地址时只分配网络号， 而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</p>
</li>
<li><p>实际上 IP 地址是标识一个主机（或路由器）和一条链路的接口。当一个主机同时连接在两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为多归属主机（multihomed host）。由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另外一个网络）， 因此一个路由器至少应当有两个不同的 IP 地址。</p>
</li>
<li><p>用转发器或网桥连接起来的若干个局域网仍为一个网络，因此这些局域网都具有同样的网络号 net-id</p>
</li>
<li><p>所有分配到网络号 net-id 的网络， 范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</p>
</li>
</ol>
<h2 id="曾考过的重点"><a href="#曾考过的重点" class="headerlink" title="曾考过的重点"></a>曾考过的重点</h2><h3 id="物理地址与-IP-地址"><a href="#物理地址与-IP-地址" class="headerlink" title="物理地址与 IP 地址"></a>物理地址与 IP 地址</h3><ul>
<li>物理地址（硬件地址）：是数据链路层及物理层使用的地址。</li>
<li>IP 地址：是网络层和以上各层使用的地址，是一种逻辑地址（用软件实现）</li>
</ul>
<p>在数据链路层看不见数据报的 IP 地址</p>
<h3 id="关于-CIDR"><a href="#关于-CIDR" class="headerlink" title="关于 CIDR"></a>关于 CIDR</h3><p>CIDR 的三十二位地址掩码（或子网掩码）由一串1和一串0组成，而1的个数就是前缀的长度。只要把只要把 IP 地址和地址掩码逐位进行“逻辑与（AND）”运算，就很容易得出网络地址。A类地址的默认地址掩码是255.0.0.0， B类地址的默认地址掩码是255.255.0.0， C类地址的默认地址掩码是255.255.255.0</p>
<h3 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h3><p>路由选择协议分为两大类：内部网关协议、外部网关协议</p>
<ul>
<li>内部网关协议：自治系统内部的路由选择协议</li>
<li>外部网关协议：自治系统之间的路由选择协议</li>
</ul>
<h3 id="内部网关协议-RIP"><a href="#内部网关协议-RIP" class="headerlink" title="内部网关协议 RIP"></a>内部网关协议 RIP</h3><p>工作原理： 距离向量算法</p>
<p>特点：</p>
<ol>
<li>仅和相连路由器交换信息</li>
<li>路由器交换的信息是本路由器所知道的全部信息，即自己现在的路由表</li>
<li>按固定的时间间隔交换路由信息</li>
<li><strong>好消息传播的快，而坏消息传播的慢</strong></li>
<li>实现简单，开销少</li>
</ol>
<p>路由表：</p>
<table>
<thead>
<tr>
<th align="center">目的网络</th>
<th align="center">距离</th>
<th align="center">下一跳路由器</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Net2</td>
<td align="center">3</td>
<td align="center">R4</td>
</tr>
<tr>
<td align="center">Net3</td>
<td align="center">4</td>
<td align="center">R5</td>
</tr>
<tr>
<td align="center">Net1</td>
<td align="center">5</td>
<td align="center">直接交付</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
<h3 id="内部网关协议-OSPF"><a href="#内部网关协议-OSPF" class="headerlink" title="内部网关协议 OSPF"></a>内部网关协议 OSPF</h3><p>OSPF 的名字是开放最短路径优先。OSPF 运用的是链路状态协议，与 RIP 的距离向量协议是不同的。 与 RIP 相比 OSPF 有三个不同的地方：</p>
<ol>
<li>想本自治系统中的所有路由器发送消息。这里使用的是泛红法</li>
<li>发送的信息是与本路由器相连的所有路由器的链路状态。</li>
<li>只有当链路状态发生改变时，路由器才向所有路由器用泛洪法发送此消息</li>
</ol>
<h3 id="外部网关协议-BGP"><a href="#外部网关协议-BGP" class="headerlink" title="外部网关协议 BGP"></a>外部网关协议 BGP</h3><p>内部网关协议主要是设法使数据报在一个 AS 中尽可能有效地从源站传送到目的站。在一个AS内部也不需要考虑其他方面的策略。然而BGP使用的环境缺不同。这主要是因为以下两个原因：</p>
<ol>
<li>互联网的规模太大，使得自治系统AS之间路由选择非常困难</li>
<li>自治系统AS之间的路由选择必须考虑有关策略</li>
</ol>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>学校内容</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题|Python基础(一)</title>
    <url>/2019/10/13/%E9%9D%A2%E8%AF%95%E9%A2%98-Python%E5%9F%BA%E7%A1%80-%E4%B8%80/</url>
    <content><![CDATA[<h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><h3 id="1-为什么学习Python"><a href="#1-为什么学习Python" class="headerlink" title="1 为什么学习Python"></a>1 为什么学习Python</h3><p>那是一个很长的故事。本来我也只是想将Python作为第二语言的。自从我买了个阿里云服务器之后，就洪水泛滥，一发不可收拾了。</p>
<h3 id="2-通过什么途径学习Python"><a href="#2-通过什么途径学习Python" class="headerlink" title="2 通过什么途径学习Python"></a>2 通过什么途径学习Python</h3><p>我是自学的，上网找教程自学的，不过每一个教程我都只是看了一部分，基本上都没有看完。大一下学期的时候看的是小甲鱼的Python教程，大二上学期的时候，看的是一篇使用django搭建个人博客的博客，以及一个叫自强学堂的网站，大二下学期看的是北京理工大学的爬虫基础教程，大三上学期是学习机器学习的相关算法这段时间看视频看得比较少，学校课程也比较重，大三下学期强化了pandas等数据处理的库，以及sklean等机器学习的相关库，然后大三的暑假开始尝试使用上面说到的这些技术栈来做我自己的毕业设计。其实我一开始是没有想着只从事Python方面的学习的，只是各种阴差阳错。</p>
<h3 id="3-公司线上和开发环境使用的什么系统"><a href="#3-公司线上和开发环境使用的什么系统" class="headerlink" title="3 公司线上和开发环境使用的什么系统"></a>3 公司线上和开发环境使用的什么系统</h3><p>我们学校这边办公室的开发环境与服务器的线上环境用的都是Linux，开发环境用的是Manjaro的发行版，而服务器用的是Centos的发行版。使用Win也是完全没有问题的。</p>
<span id="more"></span>

<h3 id="4-Python-和-Java-PHP-C-C-C-等其他语言的对比"><a href="#4-Python-和-Java-PHP-C-C-C-等其他语言的对比" class="headerlink" title="4 Python 和 Java PHP C C# C++ 等其他语言的对比"></a>4 Python 和 Java PHP C C# C++ 等其他语言的对比</h3><p><del>总的来说,Python 会使用起来比较简单吧，但是性能会比上面所说的那些语言要低。是一种灵活性非常高的语言。Python是一种解释型的语言，而其他几种都是编译型的语言，写好代码之后需要经过编译才能运行。当然，Python好像也是可以编译的。</del></p>
<p>Python 与 PHP 属于解释型语言,运行的时候是一行一行解释并运行。而C,Java,C#,C++ 都是编译型语言,需要经过编译才能运行.</p>
<p>与Java相比：在很多方面，Python比Java要简单，比如Java中所有变量必须声明才能使用，而Python不需要声明，用少量代码就可以构建出很多功能;(高效的高级数据结构)</p>
<p>与PHP相比：Python标准包直接提供了工具，并且相对于PHP代码更容易维护</p>
<p>与C相比：</p>
<p>Python这门语言是由C开发而来。在使用方面，Python的类库齐全并且使用简洁,如果要实现同样的功能,Python 10行代码可以解决,C可能就需要100行甚至更多。在速度方面，Python的运行速度相较与C,绝逼是慢了。但是具体相比较而言慢多少我是没有比较过的。</p>
<p>Python特点以及优势：</p>
<ol>
<li>语法简洁优美</li>
<li>功能强大,开发效率高</li>
<li>标准库与第三方库都非常强大</li>
<li>应用领域也非常广</li>
<li>可移植性，可扩展性，可嵌入性</li>
</ol>
<h3 id="5-Python解释器种类及其特点"><a href="#5-Python解释器种类及其特点" class="headerlink" title="5 Python解释器种类及其特点"></a>5 Python解释器种类及其特点</h3><p>CPython是官方版本的解释器，使用C语言开发，所以叫CPython。在命令行下运行Python就是启动CPython解释器，是使用最广的Python解释器。</p>
<p>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能是和CPython是完全一样的。CPython用&gt;&gt;作为提示符，而IPython使用In[序号]:作为提示符。</p>
<p>PyPy是由Python写的解释器,它的执行速度是最快。PyPy采用JIT技术,对Python代码进行动态编译(注意不是解释),绝大部分Python代码都可以在PyPy下运行,但是PyPy和CPython有一些是不同的,这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。</p>
<p>Jython是运行在Java平台上的Python解释器,可以直接把Python代码编译成Java字节码执行。</p>
<p>IronPython和Jython类似,只不过IronPython是运行在.Net平台上的Python解释器,可以直接把Python代码编译成.Net的字节码。</p>
<p>小结:<br>Python的解释器很多,但使用最广泛的还是CPython。如果要和Java或.Net平台交互,最好的办法不是用Jython或IronPython,而是通过网络调用来交互,确保各程序之间的独立性。</p>
<h3 id="6-位和字节的关系"><a href="#6-位和字节的关系" class="headerlink" title="6 位和字节的关系"></a>6 位和字节的关系</h3><p>8字节等于1位。</p>
<p>数据传输是以字节为单位，而数据传输大多是以位为单位。一个位就代表一个0或1，是构成存储器的最小单位。而2每8位组成一个字节，字节是最小一级的信息单位。</p>
<h3 id="7-b-B-KB-MB-GB的关系"><a href="#7-b-B-KB-MB-GB的关系" class="headerlink" title="7 b,B,KB,MB,GB的关系"></a>7 b,B,KB,MB,GB的关系</h3><p>1GB &#x3D; 2^10MB &#x3D; 2^20KB &#x3D; 2^30B &#x3D; 8 * 2^30b</p>
<h3 id="8-至少举例5个PEP8规范-越多越好"><a href="#8-至少举例5个PEP8规范-越多越好" class="headerlink" title="8 至少举例5个PEP8规范(越多越好)"></a>8 至少举例5个PEP8规范(越多越好)</h3><ol>
<li>使用四个空格而不是tab进行缩进</li>
<li>每行长度不能超过79</li>
<li>使用空格来间隔函数和类，以及函数内部的大块代码</li>
<li>必要时候，在每一行下写注释</li>
<li>使用文档注释，写出函数注释</li>
<li>在操作符和逗号之后使用空格，但不要在括号内部使用</li>
<li>命名类和函数的时候使用一致的方式，比如使用CamelCase来命名类,使用lower_case_with_underscores来命名函数和方法</li>
<li>在类中总是使用self来作为默认</li>
<li>尽量不要使用魔法方法</li>
<li>默认使用UTF-8,甚至是ASCII作为编码方式</li>
<li>换行可以使用反斜杠，最好使用圆括号</li>
<li>尽量不要使用魔法方法</li>
<li>不要在一句中 import 多个库</li>
<li>函数命名使用全部小写的方式，常量命名使用大写，类属性(方法和变量)使用小写，类的命名首字母大写。</li>
</ol>
<p>关于空格的使用</p>
<ol>
<li>各种右括号前不要加空格</li>
<li>逗号，冒号，分号前不要加空格</li>
<li>函数的左括号前不要加空格</li>
<li>序列的左括号前不要加空格</li>
<li>操作副左右各加一个空格，不要为了对齐增加空格</li>
<li>函数默认参数使用的赋值符左右省略空格</li>
<li>不要将多句语句写在同一行，尽管使用‘;’允许</li>
<li>if&#x2F;for&#x2F;while语句中，即使执行语句只有一行，也必须另起一行</li>
</ol>
<h3 id="9-求结果：-or-and"><a href="#9-求结果：-or-and" class="headerlink" title="9 求结果： or and"></a>9 求结果： or and</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = <span class="number">1</span> <span class="keyword">or</span> <span class="number">3</span></span><br><span class="line">v2 = <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br><span class="line">v3 = <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">v4 = <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">v5 = <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">4</span></span><br><span class="line">v6 = <span class="number">0</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="keyword">and</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(v2) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(v3) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(v4) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(v5) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(v6) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<p>总结:</p>
<ul>
<li>x or y 如果x为真，则值为x，否则为y</li>
<li>x and y 如果x为真，则值为y，否则为x</li>
<li>从右到左</li>
</ul>
<h3 id="10-简述解释型和编译型语言"><a href="#10-简述解释型和编译型语言" class="headerlink" title="10 简述解释型和编译型语言"></a>10 简述解释型和编译型语言</h3><p>解释型语言:是运行的时候一行一行地解释运行。<br>编译型语言:需要写好代码后，先经过编译阶段，然后才能执行。</p>
<h3 id="11-ascii-unicode-utf-8-gbk-的区别"><a href="#11-ascii-unicode-utf-8-gbk-的区别" class="headerlink" title="11 ascii, unicode, utf-8, gbk 的区别"></a>11 ascii, unicode, utf-8, gbk 的区别</h3><p>Python2内容进行编码的默认为ascii，而Python3对内容进行编码的默认为utf-8</p>
<p>ascii 最多只能用八位来表示，即一个字节，所以 ASCII 码最多只能表示256个字符</p>
<p>unicode 万国码，任何一个字符等于两个字节</p>
<p>utf-8 万国码的升级版，一个中文字符等于三个字节，英文是一个字节，欧洲的是两个字节</p>
<p>gbk 国内版本，一个中文字符等于两个字节，英文是一个字节</p>
<p>gbk转utf-8 需要通过媒介 unicode</p>
<h3 id="12-字节码和机器码的区别"><a href="#12-字节码和机器码的区别" class="headerlink" title="12 字节码和机器码的区别"></a>12 字节码和机器码的区别</h3><ul>
<li>机器码是电脑CPU可以直接解读的数据  </li>
<li>字节码是一种中间状态的二进制代码。需要直译器转译之后才能成为机器码</li>
</ul>
<h3 id="13-三元运算符编写格式"><a href="#13-三元运算符编写格式" class="headerlink" title="13 三元运算符编写格式"></a>13 三元运算符编写格式</h3><p>结果1 if 条件 else 结果2<br>如果条件为真,把if前面的值赋值给变量,否则把else后面的值赋值给变量。例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">res = <span class="string">&#x27;gt&#x27;</span> <span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">3</span> <span class="keyword">else</span> <span class="string">&#x27;it&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h3 id="14-列举你了解的所有-Python2-和-Python3-的区别"><a href="#14-列举你了解的所有-Python2-和-Python3-的区别" class="headerlink" title="14 列举你了解的所有 Python2 和 Python3 的区别"></a>14 列举你了解的所有 Python2 和 Python3 的区别</h3><p><del>1. print 是否需要括号</del><br><del>2. 因为我没有使用过Python2,所以这方面我不太了解</del></p>
<ol>
<li>print时，py2可以不需要加括号，而py3必须要加括号</li>
<li>exec语句被py3废弃，统一使用exec函数</li>
<li>py2臃肿，源码重复量大，语法不清晰，掺杂者C，PHP，Java的一些陋习</li>
<li>py2几乎是重构后的源码，规范，清晰，优美</li>
<li>py2要输出中文，需要加 <code># -*- encoding:utf-8 -*-</code>，py3则不需要，可以直接使用</li>
<li>py2使用raw_input,而py3统一使用input函数</li>
<li>file函数统一被py3废弃，统一使用open来处理文件，可以通过io.IOBase检查文件类型</li>
<li>字典变量has_key被Py3废弃，统一使用in关键词</li>
<li>异常 StandardError 被 py3 废弃，统一使用 Exception</li>
<li>迭代器 iterator 的 next() 函数被 Py3 废弃，统一使用 next(iterator)</li>
<li>long 整数类型被 Py3 废弃，统一使用 int</li>
<li>不相等操作符 <code>&lt;&gt;</code> 被Py3废弃，统一使用 <code>!=</code></li>
<li>Py2中模块文件的集合必须有 <strong>init</strong> ,Py3 则不必须</li>
<li>Py3 统一使用 range,Python3 中 range 的机制也进行修改并提高了大数据集生成效率</li>
</ol>
<h3 id="15-Py2-项目如何迁移成-Py3"><a href="#15-Py2-项目如何迁移成-Py3" class="headerlink" title="15 Py2 项目如何迁移成 Py3"></a>15 Py2 项目如何迁移成 Py3</h3><p>应该会有相应的工具吧，上网搜搜？？</p>
<h3 id="16-用一行代码实现数值交换"><a href="#16-用一行代码实现数值交换" class="headerlink" title="16 用一行代码实现数值交换"></a>16 用一行代码实现数值交换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a,b = b,a</span><br></pre></td></tr></table></figure>

<h3 id="17-Python3-和-Python2-中-int-和-long-的区别"><a href="#17-Python3-和-Python2-中-int-和-long-的区别" class="headerlink" title="17 Python3 和 Python2 中 int 和 long 的区别"></a>17 Python3 和 Python2 中 int 和 long 的区别</h3><p>Python3 中没有 long，只有一种整数类型 int, 大多数情况下，和 Py2 中的长整型类似</p>
<h3 id="18-xrange-和-range-的区别"><a href="#18-xrange-和-range-的区别" class="headerlink" title="18 xrange 和 range 的区别"></a>18 xrange 和 range 的区别</h3><p>都是在循环时使用，xrange内存性能更好，xrange 与 range 用法完全相同，range 一个生成 list 对象，而 xrange 是生成器。要生成很大的数字序列的时候，用 xrange 会比 range 性能优很多，因为不需要一上来就开辟一块很大的内存空间。</p>
<p>在 Py3 中，range() 是像 xrange() 那样实现， xrange() 被抛弃</p>
<h3 id="19-如何实现字符串的反转"><a href="#19-如何实现字符串的反转" class="headerlink" title="19 如何实现字符串的反转"></a>19 如何实现字符串的反转</h3><p>如：name &#x3D; “wupeiqi” 请反转为 name &#x3D; “iqiepuw”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="20-文件操作时：xreadlines-和-readlines-的区别"><a href="#20-文件操作时：xreadlines-和-readlines-的区别" class="headerlink" title="20 文件操作时：xreadlines 和 readlines 的区别"></a>20 文件操作时：xreadlines 和 readlines 的区别</h3><ul>
<li>readlines 返回的是一个列表</li>
<li>xreadlines 返回的是一个生成器</li>
</ul>
<h3 id="21-列举布尔值为-False-的常见值"><a href="#21-列举布尔值为-False-的常见值" class="headerlink" title="21 列举布尔值为 False 的常见值"></a>21 列举布尔值为 False 的常见值</h3><p>0, “”, {}, [], (), set(), False, 负数, 不成立的表达式, None等</p>
<h3 id="22-列举字符串，列表，元组，字典每个常用的五个方法"><a href="#22-列举字符串，列表，元组，字典每个常用的五个方法" class="headerlink" title="22 列举字符串，列表，元组，字典每个常用的五个方法"></a>22 列举字符串，列表，元组，字典每个常用的五个方法</h3><p>字符串：count,encode,format,find,isdigit</p>
<p>列表:append,insert,pop,remove,extend</p>
<p>元组:count,index,压根没有这么多方法</p>
<p>字典：get,keys,values</p>
<h3 id="23-is-和-x3D-x3D-的区别"><a href="#23-is-和-x3D-x3D-的区别" class="headerlink" title="23 is 和 &#x3D;&#x3D; 的区别"></a>23 is 和 &#x3D;&#x3D; 的区别</h3><p>is 比较的是内存地址，&#x3D;&#x3D;比较的是值</p>
<h3 id="24-1-2-3-4-5-能组成多少个互不相同且无重复的三位数"><a href="#24-1-2-3-4-5-能组成多少个互不相同且无重复的三位数" class="headerlink" title="24 1,2,3,4,5 能组成多少个互不相同且无重复的三位数"></a>24 1,2,3,4,5 能组成多少个互不相同且无重复的三位数</h3><p>好吧 你说我能不能 111？？</p>
<h3 id="25-什么是反射？以及其应用场景"><a href="#25-什么是反射？以及其应用场景" class="headerlink" title="25 什么是反射？以及其应用场景"></a>25 什么是反射？以及其应用场景</h3><h3 id="26-简述Python的深浅拷贝"><a href="#26-简述Python的深浅拷贝" class="headerlink" title="26 简述Python的深浅拷贝"></a>26 简述Python的深浅拷贝</h3><ul>
<li>浅拷贝只是增加了一个指针指向一个存在的内存空间</li>
<li>而深拷贝是增加一个指针并开辟了新的内存，这个增加的指针指向这个新的内存</li>
<li>采用浅拷贝的情况，释放内存会一同释放内存,深拷贝就不会出现释放同一内存的错误</li>
</ul>
<h3 id="27-Python-垃圾回收机制"><a href="#27-Python-垃圾回收机制" class="headerlink" title="27 Python 垃圾回收机制"></a>27 Python 垃圾回收机制</h3><ul>
<li>指针计数</li>
<li>标记清楚</li>
<li>分代回收</li>
</ul>
<h3 id="28-Python-的可变类型和不可变类型的区别"><a href="#28-Python-的可变类型和不可变类型的区别" class="headerlink" title="28 Python 的可变类型和不可变类型的区别"></a>28 Python 的可变类型和不可变类型的区别</h3><ul>
<li>可变数据类型:列表、字典、可变集合</li>
<li>不可变数据类型:数字、字符串、元组、不可变集合</li>
</ul>
<h3 id="29-求结果"><a href="#29-求结果" class="headerlink" title="29 求结果"></a>29 求结果</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>],[])</span><br><span class="line">v[<span class="string">&#x27;k1&#x27;</span>].append(<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line">v[<span class="string">&#x27;k1&#x27;</span>] = <span class="number">777</span></span><br><span class="line"><span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>

<p><del>{‘k1’:[666], ‘k2’:[]}</del><br><del>{‘k1’:777, ‘k2’:[]}</del></p>
<p>结果:<br>{‘k1’: [666], ‘k2’: [666]}<br>{‘k1’: 777, ‘k2’: [666]}  </p>
<p>解释:<br>Python 字典(Dictionary) fromkeys() 函数用于创建一个新字典,以序列seq中元素做字典的键,value为字典所有键<br>对应的初始值,默认为None。</p>
<h3 id="30-一行代码实现删除列表中重复的值"><a href="#30-一行代码实现删除列表中重复的值" class="headerlink" title="30 一行代码实现删除列表中重复的值"></a>30 一行代码实现删除列表中重复的值</h3><p><del>这个真的挺有难度的，等等</del></p>
<p>没有比这更简单的了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">64</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">83</span>,<span class="number">45</span>,<span class="number">48</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">513</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">set</span>(a))</span><br></pre></td></tr></table></figure>

<h3 id="31-如何实现”1-2-3”变成-‘1’-’2’-’3’"><a href="#31-如何实现”1-2-3”变成-‘1’-’2’-’3’" class="headerlink" title="31 如何实现”1,2,3”变成[‘1’,’2’,’3’]"></a>31 如何实现”1,2,3”变成[‘1’,’2’,’3’]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1,2,3&quot;</span>.split(<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="32-如何实现-‘1’-’2’-’3’-变成-1-2-3"><a href="#32-如何实现-‘1’-’2’-’3’-变成-1-2-3" class="headerlink" title="32 如何实现[‘1’,’2’,’3’] 变成 [1, 2, 3]"></a>32 如何实现[‘1’,’2’,’3’] 变成 [1, 2, 3]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> res]</span><br></pre></td></tr></table></figure>

<h3 id="33-比较-a-x3D-1-2-3-和-b-x3D-1-2-3-以及-c-x3D-1-2-3-的区别"><a href="#33-比较-a-x3D-1-2-3-和-b-x3D-1-2-3-以及-c-x3D-1-2-3-的区别" class="headerlink" title="33 比较: a &#x3D; [1,2,3] 和 b &#x3D; [(1),(2),(3) ] 以及 c &#x3D; [(1,),(2,),(3,) ] 的区别"></a>33 比较: a &#x3D; [1,2,3] 和 b &#x3D; [(1),(2),(3) ] 以及 c &#x3D; [(1,),(2,),(3,) ] 的区别</h3><h3 id="34-如何用一行代码生成-1-4-9-16-25-36-49-64-81-100"><a href="#34-如何用一行代码生成-1-4-9-16-25-36-49-64-81-100" class="headerlink" title="34 如何用一行代码生成[1,4,9,16,25,36,49,64,81,100]"></a>34 如何用一行代码生成[1,4,9,16,25,36,49,64,81,100]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="35-常用字符串格式化哪几种"><a href="#35-常用字符串格式化哪几种" class="headerlink" title="35 常用字符串格式化哪几种"></a>35 常用字符串格式化哪几种</h3><p>字符串格式化的方法主要有两种</p>
<ol>
<li>占位符 %</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, %s&#x27;</span> % <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, %d %s %.2f&#x27;</span> % (<span class="number">666</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="number">9.99999</span>))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>format</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;k&#125; is &#123;v&#125;&#x27;</span>.<span class="built_in">format</span>(k=<span class="string">&#x27;python&#x27;</span>, v=<span class="string">&#x27;easy&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; is &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;easy&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>量化交易|万矿交易平台学习(初阶)</title>
    <url>/2019/07/11/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93-%E4%B8%87%E7%9F%BF%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="关于我对量化交易的看法"><a href="#关于我对量化交易的看法" class="headerlink" title="关于我对量化交易的看法"></a>关于我对量化交易的看法</h2><p>在此之前，我先说一下我对量化交易的看法，假如你的水平只是半桶水，那么你可能会亏死。量化交易就是一帮专业的赚快钱的人，我就不相信教这门课的讲师能有几个能靠这个赚钱的。</p>
<h2 id="万矿量化平台介绍"><a href="#万矿量化平台介绍" class="headerlink" title="万矿量化平台介绍"></a>万矿量化平台介绍</h2><blockquote>
<p>万矿平台的功能也就下面四个，它的编程题目也是按照这四个出的</p>
</blockquote>
<ol>
<li>数据获取与处理</li>
<li>因子研究</li>
<li>数据可视化</li>
<li>策略回测</li>
</ol>
<span id="more"></span>

<h3 id="通过-Wind-API-获取金融数据"><a href="#通过-Wind-API-获取金融数据" class="headerlink" title="通过 Wind API 获取金融数据"></a>通过 Wind API 获取金融数据</h3><h3 id="使用-Pandas-x2F-Numpy等工具对数据进行处理和分析"><a href="#使用-Pandas-x2F-Numpy等工具对数据进行处理和分析" class="headerlink" title="使用 Pandas&#x2F;Numpy等工具对数据进行处理和分析"></a>使用 Pandas&#x2F;Numpy等工具对数据进行处理和分析</h3><h3 id="使用-WindCharts-对数据进行可视化"><a href="#使用-WindCharts-对数据进行可视化" class="headerlink" title="使用 WindCharts 对数据进行可视化"></a>使用 WindCharts 对数据进行可视化</h3><h3 id="使用-WindAlgo-进行策略回测"><a href="#使用-WindAlgo-进行策略回测" class="headerlink" title="使用 WindAlgo 进行策略回测"></a>使用 WindAlgo 进行策略回测</h3><h2 id="Wind-API-金融数据接口"><a href="#Wind-API-金融数据接口" class="headerlink" title="Wind API 金融数据接口"></a>Wind API 金融数据接口</h2><h3 id="WSD日期序列函数"><a href="#WSD日期序列函数" class="headerlink" title="WSD日期序列函数"></a>WSD日期序列函数</h3><p>主要是用来获取一段时间里面某个股票某个指标的情况</p>
<h3 id="WSS多维数据函数"><a href="#WSS多维数据函数" class="headerlink" title="WSS多维数据函数"></a>WSS多维数据函数</h3><p>用来获取选定证券品种的历史截面数据</p>
<h3 id="WSQ行情数据函数"><a href="#WSQ行情数据函数" class="headerlink" title="WSQ行情数据函数"></a>WSQ行情数据函数</h3><p>用来获取选定证券品种的当天实施指标数据，数据可以一次性请求，也可以通过订阅的方式获取</p>
<h3 id="WSET数据集"><a href="#WSET数据集" class="headerlink" title="WSET数据集"></a>WSET数据集</h3><p>主要用于获取数据集的信息，例如我要获取沪深300的所有数据的id号</p>
<h3 id="TDays-日期函数"><a href="#TDays-日期函数" class="headerlink" title="TDays 日期函数"></a>TDays 日期函数</h3><p>用于获取那种奇怪的时间序列的函数</p>
<h2 id="Python-基础入门"><a href="#Python-基础入门" class="headerlink" title="Python 基础入门"></a>Python 基础入门</h2><blockquote>
<p>这个我大概是不需要了</p>
</blockquote>
<h2 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h2><h3 id="关于Numpy数组的一些事情"><a href="#关于Numpy数组的一些事情" class="headerlink" title="关于Numpy数组的一些事情"></a>关于Numpy数组的一些事情</h3><ol>
<li>数组array的生成</li>
<li>数组array的性质</li>
<li>数组array间运算</li>
<li>数组array集合运算</li>
<li>数组array切片进阶</li>
<li>数组排序</li>
<li>数组拼接</li>
<li>数组分解</li>
</ol>
<h3 id="Numpy中的一些常用函数"><a href="#Numpy中的一些常用函数" class="headerlink" title="Numpy中的一些常用函数"></a>Numpy中的一些常用函数</h3><ol>
<li>np.arange 可以生成array</li>
<li>np.linspace 返回均匀间隔的数字</li>
<li>常用的矩阵：全零或全一</li>
<li>np.tile() 重复某个对象为一定的结构</li>
</ol>
<h3 id="Numpy常用常量"><a href="#Numpy常用常量" class="headerlink" title="Numpy常用常量"></a>Numpy常用常量</h3><ol>
<li>np.e 自然底数</li>
<li>np.NaN 缺失值</li>
<li>np.inf 无穷大</li>
<li>np.pi 圆周率</li>
</ol>
<h3 id="Numpy随机数产生"><a href="#Numpy随机数产生" class="headerlink" title="Numpy随机数产生"></a>Numpy随机数产生</h3><h3 id="Numpy矩阵性质"><a href="#Numpy矩阵性质" class="headerlink" title="Numpy矩阵性质"></a>Numpy矩阵性质</h3><h3 id="Numpy矩阵运算"><a href="#Numpy矩阵运算" class="headerlink" title="Numpy矩阵运算"></a>Numpy矩阵运算</h3><h3 id="多项式曲线拟合"><a href="#多项式曲线拟合" class="headerlink" title="多项式曲线拟合"></a>多项式曲线拟合</h3><h2 id="Pandas库"><a href="#Pandas库" class="headerlink" title="Pandas库"></a>Pandas库</h2><h3 id="序列Series"><a href="#序列Series" class="headerlink" title="序列Series"></a>序列Series</h3><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><ol>
<li>DataFrame的生成</li>
<li>DataFrame的基本性质</li>
<li>DataFrame截取</li>
<li>DataFrame缺失值处理</li>
<li>DataFrame排序</li>
<li>DataFrame的基本函数</li>
<li>DataFrame的拼接</li>
<li>DataFrame分组及透视表</li>
</ol>
<p>什么是透视表？</p>
<h2 id="SciPy库"><a href="#SciPy库" class="headerlink" title="SciPy库"></a>SciPy库</h2><h3 id="积分和微分方程求解–integrate"><a href="#积分和微分方程求解–integrate" class="headerlink" title="积分和微分方程求解–integrate"></a>积分和微分方程求解–integrate</h3><ol>
<li>数值积分–quad</li>
<li>常微分方程求解–odeint</li>
</ol>
<h3 id="最优化求解–optimize"><a href="#最优化求解–optimize" class="headerlink" title="最优化求解–optimize"></a>最优化求解–optimize</h3><ol>
<li>曲线拟合</li>
<li>资产组合的有效边界求解</li>
</ol>
<h3 id="概率统计"><a href="#概率统计" class="headerlink" title="概率统计"></a>概率统计</h3><ol>
<li>描述性统计</li>
<li>连续概率分布</li>
<li>离散概率分布</li>
<li>假设检验</li>
</ol>
<h3 id="聚类分析–cluster"><a href="#聚类分析–cluster" class="headerlink" title="聚类分析–cluster"></a>聚类分析–cluster</h3><h3 id="插值处理–interpolate"><a href="#插值处理–interpolate" class="headerlink" title="插值处理–interpolate"></a>插值处理–interpolate</h3><ol>
<li>一维插值</li>
<li>二维插值</li>
<li>径向量插值</li>
</ol>
<h2 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h2><h3 id="序列线性趋势提取"><a href="#序列线性趋势提取" class="headerlink" title="序列线性趋势提取"></a>序列线性趋势提取</h3><h3 id="傅里叶分析"><a href="#傅里叶分析" class="headerlink" title="傅里叶分析"></a>傅里叶分析</h3><h2 id="股票多因子策略"><a href="#股票多因子策略" class="headerlink" title="股票多因子策略"></a>股票多因子策略</h2><h3 id="什么是因子？"><a href="#什么是因子？" class="headerlink" title="什么是因子？"></a>什么是因子？</h3><p>因子就是指标或者特征, 如PE、PB、5日均线等。因子选股模型就是通过分析各个因子与股票表现（收益率）之间的关系而建立的一套量化选股的体系。</p>
<h3 id="怎么判断单个因子是否有效呢？"><a href="#怎么判断单个因子是否有效呢？" class="headerlink" title="怎么判断单个因子是否有效呢？"></a>怎么判断单个因子是否有效呢？</h3><p>我们一般看因子值与收益率之间的相关性（称为信息系数IC）是衡量因子有效性的重要指标，通常大于0.03，就认为该因子有效</p>
<p>有效的因子&#x3D;有效的区分度</p>
<h3 id="判断单因子是否有效的步骤"><a href="#判断单因子是否有效的步骤" class="headerlink" title="判断单因子是否有效的步骤"></a>判断单因子是否有效的步骤</h3><ol>
<li>将股票按照因子的大小从高到低排序</li>
<li>将排序后的股票分为3组</li>
<li>比较这三组股票下一期的平均收益率</li>
<li>如果TOP&gt;MIDDLE&gt;BOTTOM, 则因子有效</li>
</ol>
<h3 id="怎么判断多个因子是否有效？"><a href="#怎么判断多个因子是否有效？" class="headerlink" title="怎么判断多个因子是否有效？"></a>怎么判断多个因子是否有效？</h3><p>大致的流程是：单因子分析-&gt;选择因子-&gt;构建多因子组合-&gt;选股&#x2F;押注</p>
<ol>
<li>打分法:跟随机森林？</li>
<li>回归法:就是多元线性回归？</li>
</ol>
<h2 id="万矿的多因子选股分析"><a href="#万矿的多因子选股分析" class="headerlink" title="万矿的多因子选股分析"></a>万矿的多因子选股分析</h2><h3 id="获取原始分析数据-因子数据，收益率数据"><a href="#获取原始分析数据-因子数据，收益率数据" class="headerlink" title="获取原始分析数据(因子数据，收益率数据)"></a>获取原始分析数据(因子数据，收益率数据)</h3><p>一般用作多因子选股模型的因子可以分为两大类：</p>
<p>技术面分析类:趋势动量类，反转类及波动类<br>基本面分析类:主要基于财报数据</p>
<h3 id="原始因子数据处理-去极值，标准化"><a href="#原始因子数据处理-去极值，标准化" class="headerlink" title="原始因子数据处理(去极值，标准化)"></a>原始因子数据处理(去极值，标准化)</h3><p>去极值:主要有MAD与STD方法<br>标准化: 让其分布更为均匀，以及区间更为合理</p>
<h3 id="因子分析"><a href="#因子分析" class="headerlink" title="因子分析"></a>因子分析</h3><p>IC分析在整个单因子分析过程中起主导性作用，反映了因子暴露值与股票表现之间的线性关系。</p>
<p>IC_IR 反应的是IC序列的稳定性，我们用IC时间序列的均值除以其方差得到IC_IR， 所以IC_IR越大越好</p>
<h3 id="什么是IC信号衰减？"><a href="#什么是IC信号衰减？" class="headerlink" title="什么是IC信号衰减？"></a>什么是IC信号衰减？</h3><p>一般提到IC我们都是计算当期的因子值与下一期收益率之间的相关性，也就是因子值与收益率之间相差一个周期。而IC衰减描述的是因子值和相隔LEG期的收益率的相关性，具体的计算方法如下:</p>
<p>如果一共有N期的因子数据和收益率的数据，我们先把所有i期因子和i+1期收益率的IC值先求出来求平均，再把i期因子和i+2收益率的IC求平均（i&#x3D;1..N-LAG），最终我们得到LAG个IC的均值</p>
<h3 id="因子分析-换手率分析"><a href="#因子分析-换手率分析" class="headerlink" title="因子分析:换手率分析"></a>因子分析:换手率分析</h3><p>关于换手率的分析，常用的方法有:<br>个数法:计算每期之间股票变动的数量并除以股票的总数量计算出的比率<br>权重法:不仅考虑股票本身的变化，还考虑了股票权重的变化</p>
<h3 id="买入信号衰减与反转"><a href="#买入信号衰减与反转" class="headerlink" title="买入信号衰减与反转"></a>买入信号衰减与反转</h3><p>买入信号的衰减度量的是当前买入的股票在后续调仓期买入的比率</p>
<h3 id="因子分析-板块分析"><a href="#因子分析-板块分析" class="headerlink" title="因子分析:板块分析"></a>因子分析:板块分析</h3><blockquote>
<p>这究竟是?</p>
</blockquote>
<h2 id="股票多因子策略进阶"><a href="#股票多因子策略进阶" class="headerlink" title="股票多因子策略进阶"></a>股票多因子策略进阶</h2><h3 id="多因子组合分析"><a href="#多因子组合分析" class="headerlink" title="多因子组合分析"></a>多因子组合分析</h3><p>单因子与多因子的主要区别在于:<br>因子选择和多因子组合得分</p>
<p>主要的组合得分的计算方法：</p>
<ul>
<li>等权法</li>
<li>IC加权法</li>
<li>ICIR加权法</li>
</ul>
<h2 id="期货套利策略"><a href="#期货套利策略" class="headerlink" title="期货套利策略"></a>期货套利策略</h2><blockquote>
<p>我感觉期货套利与配对交易没什么差别啊，都是在相关性极高的同类产品间不断地进行买入卖出。这个我感觉在熊市也可以做啊。</p>
</blockquote>
<p>因为自带杠杆的性质，所以风险就极高</p>
<h2 id="线性代数应用量化投资"><a href="#线性代数应用量化投资" class="headerlink" title="线性代数应用量化投资"></a>线性代数应用量化投资</h2><h3 id="线性代数的理论基础"><a href="#线性代数的理论基础" class="headerlink" title="线性代数的理论基础"></a>线性代数的理论基础</h3><h3 id="线性回归模型简介"><a href="#线性回归模型简介" class="headerlink" title="线性回归模型简介"></a>线性回归模型简介</h3><h3 id="线性回归模型求解模拟"><a href="#线性回归模型求解模拟" class="headerlink" title="线性回归模型求解模拟"></a>线性回归模型求解模拟</h3><h3 id="线性回归模型用于多因子选股"><a href="#线性回归模型用于多因子选股" class="headerlink" title="线性回归模型用于多因子选股"></a>线性回归模型用于多因子选股</h3><h2 id="概率论应用量化投资"><a href="#概率论应用量化投资" class="headerlink" title="概率论应用量化投资"></a>概率论应用量化投资</h2><h3 id="概率分布"><a href="#概率分布" class="headerlink" title="概率分布"></a>概率分布</h3><h3 id="离散型随机变量的概率分布"><a href="#离散型随机变量的概率分布" class="headerlink" title="离散型随机变量的概率分布"></a>离散型随机变量的概率分布</h3><ol>
<li>二项分布</li>
<li>泊松分布</li>
</ol>
<h3 id="连续型随机变量的概率分布"><a href="#连续型随机变量的概率分布" class="headerlink" title="连续型随机变量的概率分布"></a>连续型随机变量的概率分布</h3><ol>
<li>正态分布</li>
<li>均匀分布</li>
</ol>
<h3 id="置信区间"><a href="#置信区间" class="headerlink" title="置信区间"></a>置信区间</h3><h3 id="概率分布与置信区间在统计套利中的应用"><a href="#概率分布与置信区间在统计套利中的应用" class="headerlink" title="概率分布与置信区间在统计套利中的应用"></a>概率分布与置信区间在统计套利中的应用</h3><ol>
<li>期货品种筛选</li>
<li>计算品种之间的相关性</li>
<li>构建策略模型</li>
<li>策略回归</li>
</ol>
<h2 id="市场投资组合理论"><a href="#市场投资组合理论" class="headerlink" title="市场投资组合理论"></a>市场投资组合理论</h2><h3 id="基于Python的线性规划函数求最优解"><a href="#基于Python的线性规划函数求最优解" class="headerlink" title="基于Python的线性规划函数求最优解"></a>基于Python的线性规划函数求最优解</h3><p>线性规划就是高中那种，几个图，然后用一条线在上面滑动来求最优解的方法</p>
<h2 id="现代投资组合理论-MPT"><a href="#现代投资组合理论-MPT" class="headerlink" title="现代投资组合理论(MPT)"></a>现代投资组合理论(MPT)</h2><p>运用线性规划来处理收益与风险的权衡问题，给出选择最佳投资组合的方法。</p>
<h3 id="MPT依据以下几个假设"><a href="#MPT依据以下几个假设" class="headerlink" title="MPT依据以下几个假设:"></a>MPT依据以下几个假设:</h3><ol>
<li>投资者在考虑每一次投资选择时，其依据的是某一持仓时间内的证券收益的概率分布</li>
<li>投资者是根据证券的期望收益率估测证券组合的风险</li>
<li>投资者的决定仅仅是依据证券的风险和收益</li>
<li>在一定的风险水平上，投资者期望收益最大;对应的是在一定的收益水平上，投资者希望风险最小</li>
</ol>
<h3 id="有效边界-最小方差组合"><a href="#有效边界-最小方差组合" class="headerlink" title="有效边界(最小方差组合)"></a>有效边界(最小方差组合)</h3><p>有效的投资必须满足以下的条件之一：</p>
<ol>
<li>同等风险条件下收益最大</li>
<li>同等收益条件下风险最小</li>
</ol>
<h3 id="资本市场-CML"><a href="#资本市场-CML" class="headerlink" title="资本市场(CML)"></a>资本市场(CML)</h3><p>是在MPT基础上引进无风险资产得到的</p>
<p>资本市场线是指表明有效组合的期望收益和标准差之间的一种简单的线性关系的一条射线。它是沿着投资组合的有效边界，由风险资产和无风险资产的一个有效组合。</p>
<p>基本思路:当考虑无风险资产是，投资者首先确定高风险资产的一个有效组合，然后在组合中加入无风险资产。此时，投资组合为穿过无风险收益点有效前沿上的一条切线。</p>
<h3 id="资本资产定价模型-CAPM"><a href="#资本资产定价模型-CAPM" class="headerlink" title="资本资产定价模型(CAPM)"></a>资本资产定价模型(CAPM)</h3><p>假设所有投资者都按马克维茨的资产选择理论进行投资，对期望收益，方差和协方差等的估计完全相同，投资人可以自由借贷</p>
<p>基于这样的假设，资本资产定价模型研究的重点在于探求风险资产收益与风险的数量关系，即为了补偿某一特定程度的风险，投资者应该获得多少的报酬率？</p>
<h2 id="金融时序分析初阶"><a href="#金融时序分析初阶" class="headerlink" title="金融时序分析初阶"></a>金融时序分析初阶</h2><h3 id="相关系数"><a href="#相关系数" class="headerlink" title="相关系数"></a>相关系数</h3><p>皮尔逊（Pearson）相关系数，就是我们平常说的那个相关系数</p>
<p>自相关函数(Autocorrelation Function, ACF)，顾名思义就是衡量自己和自己的相关程度，即r(t)和过去某个时间r(t-l)的相关性</p>
<p>偏自相关函数(Partial Autocorrelation Function, PACF), </p>
<h3 id="平稳性"><a href="#平稳性" class="headerlink" title="平稳性"></a>平稳性</h3><p>时间序列的平稳性是其基本的假设，只有基于平稳时间序列的预测才是有效的。</p>
<h3 id="单位根检验"><a href="#单位根检验" class="headerlink" title="单位根检验"></a>单位根检验</h3><p>常见的单位根检验方法有:DF检验，ADF检验，和PP检验</p>
<p>ADF的原假设为序列有单位根（非平稳）H0，备择假设为序列是平稳的H1。对于一个平稳的时序数据，就需要在给定的置信水平上显著，拒绝原假设。</p>
<h3 id="白噪声序列和线性时间序列"><a href="#白噪声序列和线性时间序列" class="headerlink" title="白噪声序列和线性时间序列"></a>白噪声序列和线性时间序列</h3><ol>
<li>xt 是一个具有有限方差和有限均值的IDD（独立同分布，independent and identically distributed）随机变量序列，则 {xt} 称为一个白噪声序列（white noise）。其均值等于0、方差等于𝜎2，协方差等于0。可以得出，白噪声过程中各期变量之间的协方差为0，也就是说白噪声过程是没有相关性的。这种时间序列也称为纯随机序列。</li>
</ol>
<p>若 𝑋𝑡 还服从均值为 0 ，方差为𝜎2的正态分布，则称这个序列为高斯白噪声序列（Gaussian white noise）。</p>
<p>对于白噪声序列，一定是平稳的时间序列。</p>
<h2 id="金融数据处理与统计"><a href="#金融数据处理与统计" class="headerlink" title="金融数据处理与统计"></a>金融数据处理与统计</h2><p>数据的频数分析。在数据的预处理部分，利用频数分析和交叉频数分析可以检验异常值</p>
<p>数据的集中趋势分析。用来反映数据的一般水平，常用的指标有平均值，中位数，和众数</p>
<p>数据的离散程度分析。主要是用来反映数据之间的差异程度，常用的指标有方差和标准差。</p>
<p>数据的分布。在统计分析中，通常要假设样本所属总体的分布属于正太分布，因此需要用偏度和峰度两个指标来检查样板数据是否符合正太分布。</p>
<p>绘制统计图。用图形的形式来表达数据，比用文字表达更清晰，更简明。</p>
<h3 id="几何平均数"><a href="#几何平均数" class="headerlink" title="几何平均数"></a>几何平均数</h3><p>算术平均数是用加法计算，几何平均数是用乘法计算</p>
<h3 id="调和平均数"><a href="#调和平均数" class="headerlink" title="调和平均数"></a>调和平均数</h3><p>调和平均数又叫倒数平均数，是总体各统计变量倒数的算术平均数的倒数。调和平均数是平均数的一种，调和平均数也有简单调和平均数和加权调和平均数两种。</p>
<h3 id="方差和标准差"><a href="#方差和标准差" class="headerlink" title="方差和标准差"></a>方差和标准差</h3><h3 id="极差"><a href="#极差" class="headerlink" title="极差"></a>极差</h3><p>最大最小值的差</p>
<h3 id="平均绝对离差"><a href="#平均绝对离差" class="headerlink" title="平均绝对离差"></a>平均绝对离差</h3><h3 id="半方差和半绝对离差"><a href="#半方差和半绝对离差" class="headerlink" title="半方差和半绝对离差"></a>半方差和半绝对离差</h3><p>主要是看向下偏离得多厉害</p>
<h3 id="偏度"><a href="#偏度" class="headerlink" title="偏度"></a>偏度</h3><p>一阶中心矩–均值<br>二阶中心矩–方差<br>三阶中心矩–偏度<br>四阶中心矩–峰度</p>
]]></content>
      <tags>
        <tag>量化交易</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络|链路层</title>
    <url>/2019/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><h3 id="1-数据链路-即逻辑链路-与链路-即物理链路-有何区别？“电路接通了”与“数据链路接通了”的区别何在"><a href="#1-数据链路-即逻辑链路-与链路-即物理链路-有何区别？“电路接通了”与“数据链路接通了”的区别何在" class="headerlink" title="1 数据链路(即逻辑链路)与链路(即物理链路)有何区别？“电路接通了”与“数据链路接通了”的区别何在"></a>1 数据链路(即逻辑链路)与链路(即物理链路)有何区别？“电路接通了”与“数据链路接通了”的区别何在</h3><p>数据链路与链路的区别在于：</p>
<p>数据链路除链路外，还必须有一些必要的规程来控制数据的传输，因此，数据链路比链路多了实现通信规程做需要的硬件和软件。</p>
<p><strong>电路接通了</strong> 表示链路两端端的结点交换机已经开机, 物理连接已经能够传送比特流了， 但是数据传输并不可靠， 在物理连接的基础上，再建立数据链路连接，才是 <strong>数据链路接通了</strong> 。</p>
<p>此后，由于数据链路连接具有检测、确认和重传功能，才使不太可靠的物理链路变成可靠的数据链路，进行可靠的数据传输当数据链路断开连接时，物理电路连接不一定跟着断开连接。</p>
<span id="more"></span>

<h3 id="2-数据链路层中的链路控制包括哪些功能？试讨论数据链路层做成可靠的链路层有哪些优点和缺点"><a href="#2-数据链路层中的链路控制包括哪些功能？试讨论数据链路层做成可靠的链路层有哪些优点和缺点" class="headerlink" title="2 数据链路层中的链路控制包括哪些功能？试讨论数据链路层做成可靠的链路层有哪些优点和缺点"></a>2 数据链路层中的链路控制包括哪些功能？试讨论数据链路层做成可靠的链路层有哪些优点和缺点</h3><p>链路管理帧定界流量控制，差错控制，将数据和控制信息区分开，透明传输寻址</p>
<p>链路层的优点和缺点取决于所应用的环境：</p>
<p>对于干扰严重的信道，可靠的链路层可以将重传范围约束在局部链路，防止全网络</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>学校内容</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题|Python基础(二)</title>
    <url>/2019/10/19/%E9%9D%A2%E8%AF%95%E9%A2%98-Python%E5%9F%BA%E7%A1%80-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="36-什么是断言-assert-，有什么应用场景"><a href="#36-什么是断言-assert-，有什么应用场景" class="headerlink" title="36 什么是断言(assert)，有什么应用场景"></a>36 什么是断言(assert)，有什么应用场景</h3><p>我没有用过断言(assert)，应该是用来测试或者是抓取错误的</p>
<span id="more"></span>

<h3 id="37-如下-按每个字符串的第一个值-合并-a-和-b-到-c"><a href="#37-如下-按每个字符串的第一个值-合并-a-和-b-到-c" class="headerlink" title="37 如下 按每个字符串的第一个值,合并 a 和 b 到 c"></a>37 如下 按每个字符串的第一个值,合并 a 和 b 到 c</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [</span><br><span class="line">    <span class="string">&#x27;a,1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b,3,22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c,3,4&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">b = [</span><br><span class="line">    <span class="string">&#x27;a,2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b,1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d,2&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按每个字符串的第一个值,合并 a 和 b 到 c</span></span><br><span class="line">c = [</span><br><span class="line">    <span class="string">&#x27;a,1,2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b,3,22,1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c,3,4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d,2&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="38-有一个多层嵌套的列表-A-x3D-1-2-3-4-“434”-…-请写一段代码遍历-A-中的每一个元素并打印出来"><a href="#38-有一个多层嵌套的列表-A-x3D-1-2-3-4-“434”-…-请写一段代码遍历-A-中的每一个元素并打印出来" class="headerlink" title="38 有一个多层嵌套的列表 A&#x3D;[1,2,[3,4,[“434”,…]]], 请写一段代码遍历 A 中的每一个元素并打印出来"></a>38 有一个多层嵌套的列表 A&#x3D;[1,2,[3,4,[“434”,…]]], 请写一段代码遍历 A 中的每一个元素并打印出来</h3><h3 id="39-a-x3D-range-10-a-3-的结果"><a href="#39-a-x3D-range-10-a-3-的结果" class="headerlink" title="39 a &#x3D; range(10),a[::-3] 的结果"></a>39 a &#x3D; range(10),a[::-3] 的结果</h3><p>range(9, -1, -3),为什么是这个？简直莫名奇妙。。</p>
<h3 id="40-下面那个命令可以从虚拟环境中退出"><a href="#40-下面那个命令可以从虚拟环境中退出" class="headerlink" title="40 下面那个命令可以从虚拟环境中退出"></a>40 下面那个命令可以从虚拟环境中退出</h3><p>A. deactivate<br>B. exit<br>C. quit<br>D. 以上均可  </p>
<p>那肯定是 A 啊，后面那两个是 Python Shell 的退出</p>
<h3 id="41-def-func-a-b-x3D-这种写法有什什么坑"><a href="#41-def-func-a-b-x3D-这种写法有什什么坑" class="headerlink" title="41 def func(a,b&#x3D;[]) 这种写法有什什么坑"></a>41 def func(a,b&#x3D;[]) 这种写法有什什么坑</h3><h3 id="42-如何实现-“1-2-3”-变成-‘1’-’2’-’3’"><a href="#42-如何实现-“1-2-3”-变成-‘1’-’2’-’3’" class="headerlink" title="42 如何实现 “1,2,3” 变成 [‘1’,’2’,’3’]"></a>42 如何实现 “1,2,3” 变成 [‘1’,’2’,’3’]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="43-如何实现-‘1’-’2’-’3’-变成-1-2-3"><a href="#43-如何实现-‘1’-’2’-’3’-变成-1-2-3" class="headerlink" title="43 如何实现[‘1’,’2’,’3’]变成[1,2,3]"></a>43 如何实现[‘1’,’2’,’3’]变成[1,2,3]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]]</span><br></pre></td></tr></table></figure>

<h3 id="44-a-x3D-1-2-3-和-b-x3D-1-2-3-以及-b-x3D-1-2-3-的区别"><a href="#44-a-x3D-1-2-3-和-b-x3D-1-2-3-以及-b-x3D-1-2-3-的区别" class="headerlink" title="44 a &#x3D; [1,2,3] 和 b &#x3D; [(1),(2),(3) ] 以及 b &#x3D; [(1,),(2,),(3,) ] 的区别"></a>44 a &#x3D; [1,2,3] 和 b &#x3D; [(1),(2),(3) ] 以及 b &#x3D; [(1,),(2,),(3,) ] 的区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="45-如何用一行代码生成-1-4-9-16-25-36-49-64-81-100"><a href="#45-如何用一行代码生成-1-4-9-16-25-36-49-64-81-100" class="headerlink" title="45 如何用一行代码生成[1,4,9,16,25,36,49,64,81,100]"></a>45 如何用一行代码生成[1,4,9,16,25,36,49,64,81,100]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="46-通过代码实现如下进制转换"><a href="#46-通过代码实现如下进制转换" class="headerlink" title="46 通过代码实现如下进制转换"></a>46 通过代码实现如下进制转换</h3><p>二进制转换为十进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = <span class="string">&#x27;0b10010&#x27;</span></span><br><span class="line">res = <span class="built_in">int</span>(v1, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 123</span></span><br></pre></td></tr></table></figure>

<p>十进制转换为二进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v2 = <span class="number">18</span></span><br><span class="line">res = <span class="built_in">bin</span>(v2)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># &#x27;0b10010&#x27;</span></span><br></pre></td></tr></table></figure>

<p>八进制转换为十进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v3 = <span class="string">&#x27;0o22&#x27;</span></span><br><span class="line">res = <span class="built_in">int</span>(v3, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 18</span></span><br></pre></td></tr></table></figure>

<p>十进制转换为八进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v4 = <span class="number">18</span></span><br><span class="line">res = <span class="built_in">oct</span>(v4)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># &#x27;0o22&#x27;</span></span><br></pre></td></tr></table></figure>

<p>十六进制转换为十进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v5 = <span class="string">&#x27;0x12&#x27;</span></span><br><span class="line">res = <span class="built_in">int</span>(v5, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 18</span></span><br></pre></td></tr></table></figure>

<p>十进制转换为十六进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v6 = <span class="number">18</span></span><br><span class="line">res = <span class="built_in">hex</span>(v6)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># &#x27;0x12&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="47-请写一个函数将IP地址转换为一个整数"><a href="#47-请写一个函数将IP地址转换为一个整数" class="headerlink" title="47 请写一个函数将IP地址转换为一个整数"></a>47 请写一个函数将IP地址转换为一个整数</h3><p>如 10.3.9.12 转换规则为:</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>00001010</td>
</tr>
<tr>
<td>3</td>
<td>00000011</td>
</tr>
<tr>
<td>9</td>
<td>00001001</td>
</tr>
<tr>
<td>12</td>
<td>00001100</td>
</tr>
</tbody></table>
<p>再将以上二进制拼接起来计算十进制结果:00001010 00000011 00001001 00001100 &#x3D; ?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip_sum</span>(<span class="params">addr</span>):</span></span><br><span class="line">    res = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> addr.split(<span class="string">&quot;.&quot;</span>)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(res[i] &lt;&lt; [<span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">0</span>][i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_ip_sum(&quot;127.0.0.1&quot;)</span></span><br><span class="line"><span class="comment"># 2130706433</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>位运算这个神器，我真是到最后都用不好</p>
<h3 id="48-Python递归的最大层数"><a href="#48-Python递归的最大层数" class="headerlink" title="48 Python递归的最大层数"></a>48 Python递归的最大层数</h3><p>998 究竟是为什么，为什么不是九九六</p>
<h3 id="49-按位与，按位或"><a href="#49-按位与，按位或" class="headerlink" title="49 按位与，按位或"></a>49 按位与，按位或</h3><p>求2^5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="number">2</span> ^ <span class="number">5</span> <span class="comment"># 10 ^ 101 = 111</span></span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 7</span></span><br></pre></td></tr></table></figure>

<p>求2&amp;5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="number">2</span> &amp; <span class="number">5</span> <span class="comment"># 10 &amp; 101 = 000</span></span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<h3 id="50-lambda表达式格式以及应用场景"><a href="#50-lambda表达式格式以及应用场景" class="headerlink" title="50 lambda表达式格式以及应用场景"></a>50 lambda表达式格式以及应用场景</h3><p>lambda函数也叫匿名函数：为了解决那些功能很简单的需求而设计的一句话函数</p>
<p>lambda的格式为： lambda 输入： 结果  </p>
<ol>
<li>参数可以有多个，用逗号隔开</li>
<li>匿名函数不管逻辑有多复杂，只能写一行，且逻辑执行结束后的内容就是返回值</li>
<li>返回值和正常函数一样，可以是任意数据类型</li>
</ol>
<h3 id="51-pass的作用"><a href="#51-pass的作用" class="headerlink" title="51 pass的作用"></a>51 pass的作用</h3><p>pass是空语句，是为了保持程序结构的完整性。pass不做任何事情，一般用作占位符。</p>
<h3 id="52-arg和-kwarg作用"><a href="#52-arg和-kwarg作用" class="headerlink" title="52 *arg和**kwarg作用"></a>52 *arg和**kwarg作用</h3><ul>
<li>*args 代表位置参数，他会接收任意多个参数并把这些参数作为元组传递给函数。</li>
<li>**kwarg 代表的关键字参数,返回的是字典,位置参数一定要放在关键字前面</li>
</ul>
<h3 id="53-列举常见的内置函数及其功能"><a href="#53-列举常见的内置函数及其功能" class="headerlink" title="53 列举常见的内置函数及其功能"></a>53 列举常见的内置函数及其功能</h3><p>abs()</p>
<p>返回数字的绝对值</p>
<p>map()</p>
<p>根据函数对指定序列做映射，map()函数接收两个参数,一个是函数，一个是可迭代对象,map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。Py2是返回list，而Py3是返回迭代器</p>
<p>filter()</p>
<p>该函数hi接收一个函数和一个list(可迭代对象)，这个函数的作用是对每个元素进行判断，返回True 或者 False。能根据判断结果过滤掉不符合条件的元素，返回由符合条件的元素组成的新list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x : x % <span class="number">2</span> == <span class="number">0</span> , [<span class="number">6</span>,<span class="number">84</span>,<span class="number">15</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">36</span>,<span class="number">84</span>,<span class="number">8</span>]))</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># [6, 84, 34, 8, 4, 36, 84, 8]</span></span><br></pre></td></tr></table></figure>

<p>map()与filter()</p>
<p>参数以及返回值的类型都一样，filter是做筛选的，而map是对可迭代对象做操作的</p>
<p>isinstance()与type()</p>
<p>isinstance函数判断一个对象是否是一个已知的类型，类似与type，而区别是type不会认为子类是一个父类类型，不考虑继承关系，而isinstacne考虑继承关系，所以推荐使用isintance??</p>
<p>zip() 拉链函数</p>
<p>将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的迭代器，如果各个迭代器的元素个数不一致，则返回列表长度与最短对象相同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>], [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(0, 5, &#x27;a&#x27;), (1, 6, &#x27;b&#x27;)]</span></span><br></pre></td></tr></table></figure>

<p>reduce()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x,y: x+y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]))</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure>

<h3 id="54-如何安装第三方模块，以及用过哪些第三方模块"><a href="#54-如何安装第三方模块，以及用过哪些第三方模块" class="headerlink" title="54 如何安装第三方模块，以及用过哪些第三方模块"></a>54 如何安装第三方模块，以及用过哪些第三方模块</h3><ol>
<li>pip安装</li>
<li>源码安装</li>
</ol>
<p>用过的第三方模块，太多了，我不想列举</p>
<h3 id="55-常用模块都有哪些"><a href="#55-常用模块都有哪些" class="headerlink" title="55 常用模块都有哪些"></a>55 常用模块都有哪些</h3><p>re, os, json, time, 爬虫里面的requests&#x2F;beautifulsoup4</p>
<h3 id="56-re的match和search的区别"><a href="#56-re的match和search的区别" class="headerlink" title="56 re的match和search的区别"></a>56 re的match和search的区别</h3><ul>
<li>match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match就返回None</li>
<li>search 是扫描整个字符串并返回第一个成功的匹配</li>
</ul>
<h3 id="57-什么是正则的贪婪匹配"><a href="#57-什么是正则的贪婪匹配" class="headerlink" title="57 什么是正则的贪婪匹配"></a>57 什么是正则的贪婪匹配</h3><p>匹配一个字符串没有节制，能匹配多少就去匹配多少，知道没有匹配的为止。</p>
<h3 id="58-def-func-a-b-x3D-这种写法有什么坑"><a href="#58-def-func-a-b-x3D-这种写法有什么坑" class="headerlink" title="58 def func(a,b&#x3D;[])这种写法有什么坑"></a>58 def func(a,b&#x3D;[])这种写法有什么坑</h3><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b = []</span>):</span></span><br><span class="line">    b.append(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line">func(<span class="number">2</span>)</span><br><span class="line">func(<span class="number">2</span>)</span><br><span class="line">func(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2[1]</span></span><br><span class="line"><span class="comment"># 2[1,1]</span></span><br><span class="line"><span class="comment"># 2[1,1,1]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那个默认参数经过多次执行还是第一次实例化的那个地址</p>
<h3 id="59-下面这两种操作有什么区别"><a href="#59-下面这两种操作有什么区别" class="headerlink" title="59 下面这两种操作有什么区别"></a>59 下面这两种操作有什么区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = a</span><br><span class="line">c = a[:]</span><br></pre></td></tr></table></figure>

<p>一个是指针指向原来数组的那片内存空间，一个是拷贝，重新申请一片内存空间再拷贝进去</p>
<h3 id="60-如何在函数中设置一个全局变量"><a href="#60-如何在函数中设置一个全局变量" class="headerlink" title="60 如何在函数中设置一个全局变量"></a>60 如何在函数中设置一个全局变量</h3><p>使用 global 语句啊</p>
<h3 id="61-logging-模块的作用，以及应用场景"><a href="#61-logging-模块的作用，以及应用场景" class="headerlink" title="61 logging 模块的作用，以及应用场景"></a>61 logging 模块的作用，以及应用场景</h3><p>logging模块定义的函数和类为应用程序和库的开发实现了一个灵活的事件日志系统</p>
<p>作用 可以了解程序运行情况是否正常，在程序出现故障时快速定位出错地方以及故障分析</p>
<h3 id="62-请用代码解答实现stack"><a href="#62-请用代码解答实现stack" class="headerlink" title="62 请用代码解答实现stack"></a>62 请用代码解答实现stack</h3><ul>
<li>Stack()创建一个新的空栈</li>
<li>push()添加一个新元素item到栈顶</li>
<li>pop()弹出栈顶元素</li>
<li>is_empty()判断栈顶是否为空</li>
<li>size()返回栈顶元素个数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="built_in">len</span>(self.items)-<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.items</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack = Stack()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.push(<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.push(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.push(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="string">&#x27;L&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.peek()</span><br><span class="line"><span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.is_empty()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.size()</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="63-简述生成器，迭代器，可迭代对象，以及应用场景"><a href="#63-简述生成器，迭代器，可迭代对象，以及应用场景" class="headerlink" title="63 简述生成器，迭代器，可迭代对象，以及应用场景"></a>63 简述生成器，迭代器，可迭代对象，以及应用场景</h3><p>迭代器：含有 <strong>iter</strong> 和 <strong>next</strong> (包含__next__方法的可迭代对象就是迭代器)</p>
<p>生成器：包含有yield这个关键字，生成器也是迭代器，调用next将函数变成迭代器</p>
<p>可迭代对象：一个类内部实现__iter__方法且返回一个迭代器</p>
<p>装饰器：能够在不修改原函数代码的基础上，在执行前后进行定制的操作，闭包函数的一种应用。调用装饰器其实是一个闭包函数，为其他函数添加附加功能，不修改被修改的源代码和不修改被修饰的方式，装饰器的返回值也是一个函数对象。比如：插入日志、性能测试、事务处理、缓存、权限验证等、有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</p>
<h3 id="64-用Python实现一个二分查找的函数"><a href="#64-用Python实现一个二分查找的函数" class="headerlink" title="64 用Python实现一个二分查找的函数"></a>64 用Python实现一个二分查找的函数</h3><p>二分查找算法：简单的说，就是将一个列表先排序好，比如按照从小到大的顺序排列好，给定一个数据，比如3，查找3在列表中的位置时，可以先找到列表中间的数 li[middle] 和3进行比较，当它比3小时，那么3一定是在列表右边，反之，则3在列表左边，则下次就可以只比较 [middle+1, end] 的数， 继续使用二分查找，将它一分为二，直到3这个数返回或者列表全部遍历完成(即不在列表中)</p>
<p>优点：效率高，时间复杂度O(logN)<br>缺点：数据要是有序的，顺序存储  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">78</span>, <span class="number">945</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">someone, li</span>):</span></span><br><span class="line">    l = -<span class="number">1</span></span><br><span class="line">    h = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">while</span> (l + <span class="number">1</span> != h):</span><br><span class="line">        m = <span class="built_in">int</span>((<span class="number">1</span> + h) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> li[m] &lt; someone:</span><br><span class="line">            l = m</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            h = m</span><br><span class="line">    p = h</span><br><span class="line">    <span class="keyword">if</span> p &gt;= <span class="built_in">len</span>(li) <span class="keyword">or</span> li[p] != someone:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure>

<h3 id="65-谈谈你对闭包的理解"><a href="#65-谈谈你对闭包的理解" class="headerlink" title="65 谈谈你对闭包的理解"></a>65 谈谈你对闭包的理解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    m = <span class="number">1</span></span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">        a = <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> m + n + a</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line">bar = foo()</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure>

<p>bar 在 foo 函数的代码块中定义。我们称bar是foo的内部函数。在bar的局部作用域中可以直接访问foo局部作用域中定义的m、n变量。简单的说，这种内部函数可以使用外部函数变量的行为，就叫闭包。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题|Python基础(三)</title>
    <url>/2019/11/10/%E9%9D%A2%E8%AF%95%E9%A2%98-Python%E5%9F%BA%E7%A1%80-%E4%B8%89/</url>
    <content><![CDATA[<h3 id="1-评价一下自己"><a href="#1-评价一下自己" class="headerlink" title="1 评价一下自己"></a>1 评价一下自己</h3><p>评价一下自己，最大的优点以及最大的缺点，另外你的人生规划是什么？</p>
<p>我最大的优点是能够好好地做到时间规划</p>
<h3 id="2-如果上司交给你一份不属于你份内的工作"><a href="#2-如果上司交给你一份不属于你份内的工作" class="headerlink" title="2 如果上司交给你一份不属于你份内的工作"></a>2 如果上司交给你一份不属于你份内的工作</h3><p>你会拒绝or接受它？</p>
<p>当然，这个是要看情况了。我想了解一下你所说的“份内的工作”是什么含义。这是需要具体情况具体分析的，假如是“我做前端的人员，然后需要我去做后端”，这种情况属于是我的相关类型工作虽说是不属于我份内的工作，只要有合理的原因我还是能接受的，但这种情况要是一直持续下去，而我又真的对这种“不属于我份内的工作”</p>
<span id="more"></span>

<p>是指“我们做IT的，而上司指派我们去做流水线手工工作做一周”这种程度，不过即使是这种程度假如时间不长而且有足够的补贴的话，还能接受吧。这种情况我是需要向</p>
<h3 id="3-当你确信你自己是正确的"><a href="#3-当你确信你自己是正确的" class="headerlink" title="3 当你确信你自己是正确的"></a>3 当你确信你自己是正确的</h3><p>但是其他人却不赞同你，你会怎样做？</p>
<p>这种情况，只能说是求同存异了。首先，一般这种问题最经常出现的一种情况就是我们对讨论的问题的理解程度不一样。</p>
<h3 id="4-当你成为主要领导"><a href="#4-当你成为主要领导" class="headerlink" title="4 当你成为主要领导"></a>4 当你成为主要领导</h3><p>当你成为了主要领导，发现工作压力和强度远远超过了你当初的想象，你会怎么做？</p>
<p>这是很自然的，主要领导是责任的核心。承担责任自然是要承担无法想象的工作压力和强度，是的，无论如何你都是无法想象那种压力和强度的。所以说，只能是不</p>
<h3 id="5-你对加班有什么看法"><a href="#5-你对加班有什么看法" class="headerlink" title="5 你对加班有什么看法"></a>5 你对加班有什么看法</h3><p>你对加班有什么看法？假如是符合我想要做的事情的目标的话，我除了睡觉吃饭时间，以及每周八个小时的固定休息时间外，我都是可以工作的。假如是那种重复的流水线工作的话，我无法忍受那种加班时间。假如是没有加班费的话。我想我是需要问清楚你们公司的加班情况主要是怎么样的，大概多久加一次班？加班是否有补贴？补贴能有什么程度？这些问题都是要具体实际情况具体分析具体解决的。</p>
<h3 id="6-os-和-sys-模块的作用"><a href="#6-os-和-sys-模块的作用" class="headerlink" title="6 os 和 sys 模块的作用"></a>6 os 和 sys 模块的作用</h3><ul>
<li>os模块 负责程序与操作系统的交互，提供了访问操作系统底层的接口</li>
<li>sys模块 负责程序与 Python 解析器的交互，提供了一系列的函数和变量，用于操控python的运行时环境。</li>
</ul>
<p>os常用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.remove() <span class="comment"># 删除文件</span></span><br><span class="line">os.rename() <span class="comment"># 文件重命名</span></span><br><span class="line">os.walk() <span class="comment"># 生成目录树下的所有文件名</span></span><br><span class="line">os.chdir() <span class="comment"># 改变目录</span></span><br><span class="line">os.mkdir/makedirs <span class="comment"># 创建目录、创建多级目录</span></span><br><span class="line">os.listdir() <span class="comment"># 列出指定目录的文件</span></span><br><span class="line">os.getcwd() <span class="comment"># 获取当前工作目录</span></span><br><span class="line">os.path.basename() <span class="comment"># 去掉目录路径，返回文件名</span></span><br><span class="line">os.path.dirname() <span class="comment"># 去掉文件名，返回目录路径</span></span><br><span class="line">os.path.join() <span class="comment"># 将分离的各部分组成一个路径名</span></span><br><span class="line">os.path.split() <span class="comment"># 返回 (dirname, basename) 元组</span></span><br><span class="line">os.path.splitext() <span class="comment"># 返回 (filename， extension) 元组</span></span><br><span class="line">os.path.getatime/ctime/mtime <span class="comment"># 分别返回最近访问、创建、修改时间</span></span><br><span class="line">os.path.getsize() <span class="comment"># 返回文件大小</span></span><br><span class="line">os.path.exists() <span class="comment"># 返回文件是否存在</span></span><br><span class="line">os.path.isabs() <span class="comment"># 是否为绝对路径</span></span><br><span class="line">os.path.isdir() <span class="comment"># 是否为目录</span></span><br><span class="line">os.path.isfile() <span class="comment"># 是否为文件</span></span><br></pre></td></tr></table></figure>

<p>sys常用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.argv <span class="comment"># 命令行参数列表，第一个元素是程序本身路径</span></span><br><span class="line">sys.moudules.keys() <span class="comment"># 返回所有已导入的模块列表</span></span><br><span class="line">sys.exc_info() <span class="comment"># 获取当前正在处理的异常类</span></span><br><span class="line">sys.exit() <span class="comment"># 退出程序，正常退出时exit(0)</span></span><br><span class="line">sys.hexversion <span class="comment"># 获取python解析程序的十六进制版本值</span></span><br><span class="line">sys.version <span class="comment"># 获取python解析程序的版本信息</span></span><br><span class="line">sys.maxint <span class="comment"># 最大的int值</span></span><br><span class="line">sys.maxunicode <span class="comment"># 最大的unicode值</span></span><br><span class="line">sys.modules <span class="comment"># 返回系统导入的模块字段，key是模块名，value是模块</span></span><br><span class="line">sys.path <span class="comment"># 返回模块的搜索路径</span></span><br><span class="line">sys.platform <span class="comment"># 返回操作系统的平台名称</span></span><br><span class="line">sys.stdout <span class="comment"># 标准输出</span></span><br><span class="line">sys.stdin <span class="comment"># 标准输入</span></span><br><span class="line">sys.stderr <span class="comment"># 错误输出</span></span><br><span class="line">sys.exc_clear <span class="comment"># 清除当前线程所出现的当前的或最近的错误信息</span></span><br><span class="line">sys.exec_prefix <span class="comment"># 返回平台独立的python文件安装位置</span></span><br><span class="line">sys.byteorder <span class="comment"># 本地字节规则的指示器</span></span><br><span class="line">sys.copyright <span class="comment"># 记录python版权相关的东西</span></span><br><span class="line">sys.api_version <span class="comment"># 解析器的C的API版本</span></span><br></pre></td></tr></table></figure>

<h3 id="7-如何生成一个随机数"><a href="#7-如何生成一个随机数" class="headerlink" title="7 如何生成一个随机数"></a>7 如何生成一个随机数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()</span><br><span class="line"><span class="number">0.10174308638634244</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="number">8545</span></span><br></pre></td></tr></table></figure>

<h3 id="8-如何使用python删除一个文件"><a href="#8-如何使用python删除一个文件" class="headerlink" title="8 如何使用python删除一个文件"></a>8 如何使用python删除一个文件</h3><p>使用os.remove()方法</p>
<h3 id="9-谈谈你对面向对象的理解"><a href="#9-谈谈你对面向对象的理解" class="headerlink" title="9 谈谈你对面向对象的理解"></a>9 谈谈你对面向对象的理解</h3><p>面向对象是一种编程思想，以类的眼光来看待事物的一种方法。将共同的属性和方法的事物封装到同一个类下面。</p>
<p>继承：将多个类的共同属性和方法封装到同一个父类中，然后用这些类类继承这个类的属性和方法</p>
<p>封装：将有共同的属性和方法封装到同一个类值嗯</p>
<ul>
<li>创建类和对象会分别创建二者的名称空间，我们只能用类名<code>.</code>或者<code>obj.</code>的方式去访问里面的名字，这本身就是一种封装</li>
<li>类中把某些属性和方法隐藏起来，只在类的内部使用、外部无法访问，或者留下少量接口供外部访问</li>
</ul>
<p>多态:Python天生是支持多态的。指的是基类的同一个方法在不同的派生类中有着不同的功能</p>
<h3 id="10-面向对象中的继承有什么特点"><a href="#10-面向对象中的继承有什么特点" class="headerlink" title="10 面向对象中的继承有什么特点"></a>10 面向对象中的继承有什么特点</h3><p>继承概念的实现方式主要有两类：实现继承、接口继承</p>
<ul>
<li>实现继承是指使用基类的属性和方法而无需额外编码的能力</li>
<li>接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力(子类重构父类的方法)</li>
</ul>
<h3 id="11-面向对象深度优先和广度优先是什么"><a href="#11-面向对象深度优先和广度优先是什么" class="headerlink" title="11 面向对象深度优先和广度优先是什么"></a>11 面向对象深度优先和广度优先是什么</h3><p>Python的类可以继承多个类，Python的类如果继承了多个类，那么其寻找方法的方式有两种：</p>
<ol>
<li>当类是经典类时，多继承情况下，会按照深度优先的方法查找 PY2</li>
<li>当类是新式类时，多继承情况下，会按照广度优先的方法查找 PY3</li>
</ol>
<p>总的来说：经典类是纵向查找，新式类是横向查找<br>区别：在声明类的时候新式类需要加上 <code>object</code> 关键字。在Python3中默认全是新式类</p>
<h3 id="12-面向对象中super的作用"><a href="#12-面向对象中super的作用" class="headerlink" title="12 面向对象中super的作用"></a>12 面向对象中super的作用</h3><p>super是指向父类的指针，在子类实体化的时候，也同时会实体化一个父类对象， 使用super().XXX()就能够调用父类的方法</p>
<ul>
<li>可以用来解决多重继承的问题，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查询顺序(MRO)、重复调用(砖石继承)等种种问题</li>
<li>MRO就是类的方法解析顺序表，其实也就是继承父类方法时的顺序表</li>
</ul>
<h3 id="13-请分析一下下面的输出结果"><a href="#13-请分析一下下面的输出结果" class="headerlink" title="13 请分析一下下面的输出结果"></a>13 请分析一下下面的输出结果</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter A&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave A&quot;</span>)  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter B&quot;</span>)  </span><br><span class="line">    A.__init__(self)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave B&quot;</span>)  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A</span>):</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter C&quot;</span>)  </span><br><span class="line">    A.__init__(self)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave C&quot;</span>)  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">A</span>):</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter D&quot;</span>)  </span><br><span class="line">    A.__init__(self)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave D&quot;</span>)  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>(<span class="params">B, C, D</span>):</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter E&quot;</span>)  </span><br><span class="line">    B.__init__(self)  </span><br><span class="line">    C.__init__(self)  </span><br><span class="line">    D.__init__(self)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave E&quot;</span>)  </span><br><span class="line">E()</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Enter E&quot;</span></span><br><span class="line"><span class="string">&quot;Enter B&quot;</span></span><br><span class="line"><span class="string">&quot;Enter A&quot;</span></span><br><span class="line"><span class="string">&quot;Leave A&quot;</span></span><br><span class="line"><span class="string">&quot;Leave B&quot;</span></span><br><span class="line"><span class="string">&quot;Enter C&quot;</span></span><br><span class="line"><span class="string">&quot;Enter A&quot;</span></span><br><span class="line"><span class="string">&quot;Leave A&quot;</span></span><br><span class="line"><span class="string">&quot;Leave C&quot;</span></span><br><span class="line"><span class="string">&quot;Enter D&quot;</span></span><br><span class="line"><span class="string">&quot;Enter A&quot;</span></span><br><span class="line"><span class="string">&quot;Leave A&quot;</span></span><br><span class="line"><span class="string">&quot;Leave D&quot;</span></span><br><span class="line"><span class="string">&quot;Leave E&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="14-装饰器的写法套路"><a href="#14-装饰器的写法套路" class="headerlink" title="14 装饰器的写法套路"></a>14 装饰器的写法套路</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查今年是否是2019的装饰器</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;上文&#x27;</span>) <span class="comment"># 你要执行的函数的上文</span></span><br><span class="line">        func(*args, **kwargs)<span class="comment"># 你要执行的函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下文&#x27;</span>) <span class="comment"># 你要执行的函数的下文</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数正在执行&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="15-带定长参数的装饰器的写法"><a href="#15-带定长参数的装饰器的写法" class="headerlink" title="15 带定长参数的装饰器的写法"></a>15 带定长参数的装饰器的写法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_func</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查今年是否是2019的装饰器</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">username, passwd</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(username) <span class="comment"># 你要执行的函数的上文</span></span><br><span class="line">        func()<span class="comment"># 你要执行的函数</span></span><br><span class="line">        <span class="built_in">print</span>(passwd) <span class="comment"># 你要执行的函数的下文</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@new_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数正在执行&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="16-带不定长参数的装饰器的写法"><a href="#16-带不定长参数的装饰器的写法" class="headerlink" title="16 带不定长参数的装饰器的写法"></a>16 带不定长参数的装饰器的写法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_func</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查今年是否是2019的装饰器</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;上文&#x27;</span>) <span class="comment"># 你要执行的函数的上文</span></span><br><span class="line">        func(*args, **kwargs)<span class="comment"># 你要执行的函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下文&#x27;</span>) <span class="comment"># 你要执行的函数的下文</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@new_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数正在执行&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>但，假如你调用test的时候真的放进了参数那就出错了。</p>
<h3 id="17-请写一个判断时间的装饰器"><a href="#17-请写一个判断时间的装饰器" class="headerlink" title="17 请写一个判断时间的装饰器"></a>17 请写一个判断时间的装饰器</h3><p>所谓装饰器，就是在函数里面定义一个函数，然后返回这个函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    关于时间异常的类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, execption_info</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.info = execption_info</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.info</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timecheck</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查今年是否是2019的装饰器</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> datetime.datetime.now().year == <span class="number">2018</span>:</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TimeException(<span class="string">&quot;函数已过时&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timecheck</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello &#123;&#125;, 2018 Happy&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test(<span class="string">&quot;niracler&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="18-是否使用过-functool-中的函数-其作用是什么"><a href="#18-是否使用过-functool-中的函数-其作用是什么" class="headerlink" title="18 是否使用过 functool 中的函数,其作用是什么"></a>18 是否使用过 functool 中的函数,其作用是什么</h3><p>可以用于修复装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>) </span><span class="comment"># 加在最内层函数正上方</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;哈哈哈&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修复前</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>index.__name__</span><br><span class="line"><span class="string">&#x27;index&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index.__doc__</span><br><span class="line"><span class="string">&#x27;哈哈哈&#x27;</span></span><br></pre></td></tr></table></figure>

<p>修复后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>index.__name__</span><br><span class="line"><span class="string">&#x27;wrapper&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index.__doc__</span><br></pre></td></tr></table></figure>

<h3 id="19-列举面向对象中带双下划线的特殊方法，如-init-new"><a href="#19-列举面向对象中带双下划线的特殊方法，如-init-new" class="headerlink" title="19 列举面向对象中带双下划线的特殊方法，如__init__, new"></a>19 列举面向对象中带双下划线的特殊方法，如__init__, <strong>new</strong></h3><ul>
<li><code>__new__</code> 生成实例</li>
<li><code>__init__</code> 生成实例的属性</li>
<li><code>__call__</code> 实例对象加()会执行 <code>def __call__:...</code> 方法里面的内容</li>
<li><code>__del__</code> 析构方法，当对象在内存中被释放时，自动触发执行。当 del obj 或者应用程序运行完毕时，执行该方法里面的内容。</li>
<li><code>__enter__ 和 __exit__</code> 出现with语句，对象的<code>__enter__</code>被触发，有返回值则赋值给as声明的变量;with中代码块执行完毕时执行 <code>__exit__</code> 里面的内容。</li>
<li><code>__module__</code> 表示当前操作的对象在哪个模块</li>
<li><code>__class__</code> 表示当前操作的对象的类是什么</li>
<li><code>__doc__</code> 类的描述信息，该描述信息无法被继承</li>
<li><code>__str__</code> 改变对象的字符串显示</li>
<li><code>__repr__</code> 改变对象的字符串显示，交互式解析器</li>
<li><code>__format__</code> 自定义格式化字符串</li>
<li><code>__slots__</code> 一个类变量 用来限制实例可以添加的属性的数量和类型</li>
<li><code>__setitem__， __getitem__， __delitem__</code></li>
<li><code>__get__()</code> 调用一个属性时触发</li>
<li><code>__set__()</code> 为一个属性赋值时触发</li>
<li><code>__delete__()</code> 采用del删除属性时触发</li>
</ul>
<h3 id="20-如何判断是函数还是方法"><a href="#20-如何判断是函数还是方法" class="headerlink" title="20 如何判断是函数还是方法"></a>20 如何判断是函数还是方法</h3><p>看他的调用者是谁</p>
<p>如果调用者是类，就需要传入一个参数self的值，这时他就是一个函数<br>如果调用者是对象，就不需要给self传入参数值，这时他就是一个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;lcg&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(obj.func, FunctionType)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(obj.func, MethodType)) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">obj =  Foo()</span><br><span class="line">Foo.func(obj) <span class="comment"># lcg</span></span><br><span class="line"></span><br><span class="line">obj =  Foo()</span><br><span class="line">obj.func(obj) <span class="comment"># lcg</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li>方法，无需传入self参数</li>
<li>函数，必须手动传入self参数</li>
</ul>
<h3 id="21-静态方法和类方法的区别"><a href="#21-静态方法和类方法的区别" class="headerlink" title="21 静态方法和类方法的区别"></a>21 静态方法和类方法的区别</h3><p>尽管 classmethod 和 staticmethod 非常相似，但在用法上依然有一些明显的区别。classmethod必须有一个指向类对象的引用作为第一个参数，而staticmethod可以没有任何参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">one</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        普通方法, 能用num调用而不能用实例化对象调用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        实例方法，能用实例化对象调用而不能用Num调用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">three</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        静态方法，能用Num和实例化对象调用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">four</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        类方法，第一个参数cls长什么样不重要，都是指Num类本身，调用时将Num类作为对象隐式地传入方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        cls.three()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Num.one()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Num.two()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: two() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;self&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Num.three()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Num.four()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="22-1-2-3-4-5能组成多少个互不相同且无重复的三位数"><a href="#22-1-2-3-4-5能组成多少个互不相同且无重复的三位数" class="headerlink" title="22 1,2,3,4,5能组成多少个互不相同且无重复的三位数"></a>22 1,2,3,4,5能组成多少个互不相同且无重复的三位数</h3><p>我们可以使用pytho内置的排列组合函数</p>
<ul>
<li>product 笛卡尔积(有放回抽样排列)</li>
<li>permutations 排列(不放回抽样排列)</li>
<li>combinations 组合，没有重复(不放回抽样组合)</li>
<li>combinations_with_replacement 组合，有重复(有放回抽样组合)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">list</span>(itertools.permutations(<span class="string">&#x27;12345&#x27;</span>, <span class="number">3</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 60</span></span><br></pre></td></tr></table></figure>

<h3 id="23-什么是反射，以及应用场景"><a href="#23-什么是反射，以及应用场景" class="headerlink" title="23 什么是反射，以及应用场景"></a>23 什么是反射，以及应用场景</h3><p>反射的核心本质就是以字符串的形式去导入整个模块，利用字符串的形式去执行函数。</p>
<p>Django中的CBV就是基于反射实现的</p>
<h3 id="24-metaclass作用-及其应用场景"><a href="#24-metaclass作用-及其应用场景" class="headerlink" title="24 metaclass作用,及其应用场景"></a>24 metaclass作用,及其应用场景</h3><p>metaclass用来指定类是由谁创建的</p>
<p>类的metaclass默认是type。我们也可以指定类的metaclass值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyType</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyType, self).__init__(*args, **kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        obj = self.__new__(self, *args, **kwargs)</span><br><span class="line">        obj.__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span>, metaclass=MyType</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;XXX&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = Foo()</span><br><span class="line">XXX</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(obj)</span><br><span class="line">&lt;__main__.Foo <span class="built_in">object</span> at <span class="number">0x7f9bc9c6a890</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="25-什么是面向对象MRO"><a href="#25-什么是面向对象MRO" class="headerlink" title="25 什么是面向对象MRO"></a>25 什么是面向对象MRO</h3><p>MRO就是方法解析顺序</p>
<h3 id="26-isinstance作用以及应用场景"><a href="#26-isinstance作用以及应用场景" class="headerlink" title="26 isinstance作用以及应用场景"></a>26 isinstance作用以及应用场景</h3><p>isinstance(对象) 判断这个对象是否是这个类或者这个类的子类的实例化</p>
<p>应用场景：rest framework 认证流程</p>
<h3 id="27-Python是静态类型还是动态类型，是强类型还是弱类型"><a href="#27-Python是静态类型还是动态类型，是强类型还是弱类型" class="headerlink" title="27 Python是静态类型还是动态类型，是强类型还是弱类型"></a>27 Python是静态类型还是动态类型，是强类型还是弱类型</h3><ul>
<li>动态强类型语言(不少人误以为是)</li>
<li>动态还是静态指的是编译期还是运行期确定类型</li>
<li>强类型指的是不会发生隐式类型转换</li>
</ul>
<h3 id="28-什么是鸭子类型"><a href="#28-什么是鸭子类型" class="headerlink" title="28 什么是鸭子类型"></a>28 什么是鸭子类型</h3><ul>
<li>关注点在对象的行为，而不是类型(duck typing)</li>
<li>比如 file, StringIO, socket 对象都支持 read&#x2F;write 方法 (file like object)</li>
<li>再比如定义了 <code>__iter__</code> 魔术方法的对象可以用 for 迭代</li>
</ul>
<h3 id="29-什么是-monkey-patch，-哪些地方用到了，自己如何实现"><a href="#29-什么是-monkey-patch，-哪些地方用到了，自己如何实现" class="headerlink" title="29 什么是 monkey patch， 哪些地方用到了，自己如何实现"></a>29 什么是 monkey patch， 哪些地方用到了，自己如何实现</h3><p>Monkey patch就是在运行时对已有的代码进行修改，达到hot patch的目的。Eventlet中大量使用了该技巧，以替换标准库中的组件，比如socket。首先来看一下最简单的monkey patch的实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.bar&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Modified bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line">foo.bar = bar</span><br><span class="line">foo.bar()</span><br></pre></td></tr></table></figure>

<h3 id="30-什么是自省"><a href="#30-什么是自省" class="headerlink" title="30 什么是自省"></a>30 什么是自省</h3><ul>
<li>运行时判断一个对象的类型的能力</li>
<li>Python一切皆对象，用type，id，isinstance获取对象类型信息</li>
</ul>
<h3 id="31-什么是列表和字典推导"><a href="#31-什么是列表和字典推导" class="headerlink" title="31 什么是列表和字典推导"></a>31 什么是列表和字典推导</h3><p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>一种快速生成list&#x2F;dict&#x2F;set的方式。用来替代map&#x2F;filter等</p>
<h3 id="32-Python可变-x2F-不可变对象"><a href="#32-Python可变-x2F-不可变对象" class="headerlink" title="32 Python可变&#x2F;不可变对象"></a>32 Python可变&#x2F;不可变对象</h3><ul>
<li>哪些是可变对象？哪些是不可变对象？</li>
<li>不可变对象 bool&#x2F;int&#x2F;float&#x2F;tuple&#x2F;str&#x2F;frozenset</li>
<li>可变对象 list&#x2F;set&#x2F;dict</li>
</ul>
<h3 id="33-Python-args-kwargs"><a href="#33-Python-args-kwargs" class="headerlink" title="33 Python args, **kwargs"></a>33 Python <code>args</code>, <code>**kwargs</code></h3><p>函数中 *args, **kwargs 含义是什么？</p>
<ul>
<li>用来处理可变参数</li>
<li>*args 被打包成tuple</li>
<li>**kwargs 被打包成dict</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_all</span>(<span class="params">a, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">if</span> args:</span><br><span class="line">            <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="keyword">if</span> kwargs:</span><br><span class="line">            <span class="built_in">print</span>(kwargs)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_all(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, name=<span class="string">&#x27;sdvsdv&#x27;</span>)</span><br><span class="line">hello</span><br><span class="line">(<span class="string">&#x27;world&#x27;</span>,)</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sdvsdv&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="34-什么是-Cpython-GIL"><a href="#34-什么是-Cpython-GIL" class="headerlink" title="34 什么是 Cpython GIL"></a>34 什么是 Cpython GIL</h3><p>GIL, Global Interperter Lock</p>
<ul>
<li>Cpython解析器的内存管理并不是线程安全的</li>
<li>保护多线程情况下对Python对象的访问</li>
<li>Cpython使用简单的锁机制避免多个线程同时执行字节码</li>
</ul>
<h3 id="35-GIL的影响"><a href="#35-GIL的影响" class="headerlink" title="35 GIL的影响"></a>35 GIL的影响</h3><ul>
<li>同一时间只能有一个线程执行字节码</li>
<li>CPU密集型程序难以利用多核优势</li>
<li>IO期间会释放GIL，对IO密集型程序影响不大</li>
</ul>
<h3 id="36-如何规避GIL的影响"><a href="#36-如何规避GIL的影响" class="headerlink" title="36 如何规避GIL的影响"></a>36 如何规避GIL的影响</h3><p>区分CPU密集型和IO密集型程序</p>
<ul>
<li>CPU密集可以使用多进程+进程池</li>
<li>IO密集使用多线程&#x2F;协程</li>
<li>cython扩展</li>
</ul>
<h3 id="37-服务器端性能优化措施"><a href="#37-服务器端性能优化措施" class="headerlink" title="37 服务器端性能优化措施"></a>37 服务器端性能优化措施</h3><p>Web应用一般语言不会成为瓶颈</p>
<ul>
<li>数据结构与算法优化</li>
<li>数据库层：索引优化，慢查询消除，批量操作减少IO，NoSQL</li>
<li>网络IO：批量操作，pipline操作减少IO</li>
<li>缓存：使用内存数据库 redis&#x2F;memcached</li>
<li>异步：asyncio， celery</li>
<li>并发：gevent&#x2F;多线程</li>
</ul>
<h3 id="38-什么是生成器"><a href="#38-什么是生成器" class="headerlink" title="38 什么是生成器"></a>38 什么是生成器</h3><p>Generator</p>
<ul>
<li>生成器就是可以生成值的函数</li>
<li>当一个函数里有了yield关键字就成了生成器</li>
<li>生成器可以挂起执行并保持当前执行的状态</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_gen</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line">gen = simple_gen()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line">hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line">world</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
</search>
